
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000189c  0800eca8  0800eca8  0001eca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010544  08010544  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010544  08010544  00020544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801054c  0801054c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801054c  0801054c  0002054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010550  08010550  00020550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010554  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005680  20000094  080105e8  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005714  080105e8  00035714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003246f  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062a6  00000000  00000000  00062533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  000687e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020e0  00000000  00000000  0006aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007fbb  00000000  00000000  0006cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029e01  00000000  00000000  00074b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e182b  00000000  00000000  0009e96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009884  00000000  00000000  001801ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec90 	.word	0x0800ec90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800ec90 	.word	0x0800ec90

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 b96e 	b.w	8000e50 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	468c      	mov	ip, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8083 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	d947      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba2:	fab2 f282 	clz	r2, r2
 8000ba6:	b142      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	f1c2 0020 	rsb	r0, r2, #32
 8000bac:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	4097      	lsls	r7, r2
 8000bb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc4:	fa1f fe87 	uxth.w	lr, r7
 8000bc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x60>
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bde:	f080 8119 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 8116 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	443b      	add	r3, r7
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x8c>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0a:	f080 8105 	bcs.w	8000e18 <__udivmoddi4+0x28c>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	f240 8102 	bls.w	8000e18 <__udivmoddi4+0x28c>
 8000c14:	3802      	subs	r0, #2
 8000c16:	443c      	add	r4, r7
 8000c18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa0>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d150      	bne.n	8000ce0 <__udivmoddi4+0x154>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2601      	movs	r6, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	f200 80e9 	bhi.w	8000e40 <__udivmoddi4+0x2b4>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1ac9      	subs	r1, r1, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d9 	bhi.w	8000e48 <__udivmoddi4+0x2bc>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7bf      	b.n	8000c22 <__udivmoddi4+0x96>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x12e>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80b1 	beq.w	8000e0e <__udivmoddi4+0x282>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0x140>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80b8 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0103 	sbc.w	r1, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0a8      	beq.n	8000c2c <__udivmoddi4+0xa0>
 8000cda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce8:	4097      	lsls	r7, r2
 8000cea:	fa01 f002 	lsl.w	r0, r1, r2
 8000cee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf2:	40d9      	lsrs	r1, r3
 8000cf4:	4330      	orrs	r0, r6
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cfc:	fa1f f887 	uxth.w	r8, r7
 8000d00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb06 f108 	mul.w	r1, r6, r8
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 808d 	bcs.w	8000e38 <__udivmoddi4+0x2ac>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 808a 	bls.w	8000e38 <__udivmoddi4+0x2ac>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b281      	uxth	r1, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	1879      	adds	r1, r7, r1
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d46:	d273      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d971      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4439      	add	r1, r7
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c6 0c20 	rsb	ip, r6, #32
 8000d5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d64:	431c      	orrs	r4, r3
 8000d66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d76:	431f      	orrs	r7, r3
 8000d78:	0c3b      	lsrs	r3, r7, #16
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fa1f f884 	uxth.w	r8, r4
 8000d82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8e:	458a      	cmp	sl, r1
 8000d90:	fa02 f206 	lsl.w	r2, r2, r6
 8000d94:	fa00 f306 	lsl.w	r3, r0, r6
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x220>
 8000d9a:	1861      	adds	r1, r4, r1
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da0:	d248      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000da2:	458a      	cmp	sl, r1
 8000da4:	d946      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4421      	add	r1, r4
 8000dac:	eba1 010a 	sub.w	r1, r1, sl
 8000db0:	b2bf      	uxth	r7, r7
 8000db2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dbe:	fb00 f808 	mul.w	r8, r0, r8
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x24a>
 8000dc6:	19e7      	adds	r7, r4, r7
 8000dc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dcc:	d22e      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000dce:	45b8      	cmp	r8, r7
 8000dd0:	d92c      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4427      	add	r7, r4
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	eba7 0708 	sub.w	r7, r7, r8
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	454f      	cmp	r7, r9
 8000de4:	46c6      	mov	lr, r8
 8000de6:	4649      	mov	r1, r9
 8000de8:	d31a      	bcc.n	8000e20 <__udivmoddi4+0x294>
 8000dea:	d017      	beq.n	8000e1c <__udivmoddi4+0x290>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x27a>
 8000dee:	ebb3 020e 	subs.w	r2, r3, lr
 8000df2:	eb67 0701 	sbc.w	r7, r7, r1
 8000df6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dfa:	40f2      	lsrs	r2, r6
 8000dfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000e00:	40f7      	lsrs	r7, r6
 8000e02:	e9c5 2700 	strd	r2, r7, [r5]
 8000e06:	2600      	movs	r6, #0
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e70b      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fd      	b.n	8000c18 <__udivmoddi4+0x8c>
 8000e1c:	4543      	cmp	r3, r8
 8000e1e:	d2e5      	bcs.n	8000dec <__udivmoddi4+0x260>
 8000e20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e24:	eb69 0104 	sbc.w	r1, r9, r4
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7df      	b.n	8000dec <__udivmoddi4+0x260>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e7d2      	b.n	8000dd6 <__udivmoddi4+0x24a>
 8000e30:	4660      	mov	r0, ip
 8000e32:	e78d      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e34:	4681      	mov	r9, r0
 8000e36:	e7b9      	b.n	8000dac <__udivmoddi4+0x220>
 8000e38:	4666      	mov	r6, ip
 8000e3a:	e775      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	e74a      	b.n	8000cd6 <__udivmoddi4+0x14a>
 8000e40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e44:	4439      	add	r1, r7
 8000e46:	e713      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	443c      	add	r4, r7
 8000e4c:	e724      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <start_normal>:
#define ANGLE_9_INIT 100
#define ANGLE_10_INIT 105
#define ANGLE_11_INIT 35

void start_normal()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 8000e58:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000ee4 <start_normal+0x90>
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 fe57 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(1,ANGLE_1_INIT);
 8000e62:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000ee8 <start_normal+0x94>
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 fe52 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8000e6c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000ee4 <start_normal+0x90>
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fe4d 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8000e76:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000eec <start_normal+0x98>
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f000 fe48 	bl	8001b10 <PCA9685_SetServoAngle>
	  HAL_Delay(500);
 8000e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e84:	f001 fc2c 	bl	80026e0 <HAL_Delay>
	  PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000e88:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000ef0 <start_normal+0x9c>
 8000e8c:	2004      	movs	r0, #4
 8000e8e:	f000 fe3f 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 8000e92:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000ef4 <start_normal+0xa0>
 8000e96:	2005      	movs	r0, #5
 8000e98:	f000 fe3a 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8000e9c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000ef8 <start_normal+0xa4>
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f000 fe35 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000ea6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000ee8 <start_normal+0x94>
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f000 fe30 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(8, ANGLE_8_INIT);
 8000eb0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000efc <start_normal+0xa8>
 8000eb4:	2008      	movs	r0, #8
 8000eb6:	f000 fe2b 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8000eba:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f00 <start_normal+0xac>
 8000ebe:	2009      	movs	r0, #9
 8000ec0:	f000 fe26 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 8000ec4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000ef8 <start_normal+0xa4>
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f000 fe21 	bl	8001b10 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 8000ece:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000ef4 <start_normal+0xa0>
 8000ed2:	200b      	movs	r0, #11
 8000ed4:	f000 fe1c 	bl	8001b10 <PCA9685_SetServoAngle>
	HAL_Delay(2000);
 8000ed8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000edc:	f001 fc00 	bl	80026e0 <HAL_Delay>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	42f00000 	.word	0x42f00000
 8000ee8:	42dc0000 	.word	0x42dc0000
 8000eec:	42340000 	.word	0x42340000
 8000ef0:	42700000 	.word	0x42700000
 8000ef4:	420c0000 	.word	0x420c0000
 8000ef8:	42d20000 	.word	0x42d20000
 8000efc:	42960000 	.word	0x42960000
 8000f00:	42c80000 	.word	0x42c80000

08000f04 <walk>:
	vTaskDelete(NULL);
}


void walk(void *parameters)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	int delay_time = 100;
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	60fb      	str	r3, [r7, #12]
	PCA9685_SetServoAngle(4, ANGLE_4_INIT+20);
 8000f10:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80010a4 <walk+0x1a0>
 8000f14:	2004      	movs	r0, #4
 8000f16:	f000 fdfb 	bl	8001b10 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fbdf 	bl	80026e0 <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT+20);
 8000f22:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80010a8 <walk+0x1a4>
 8000f26:	2008      	movs	r0, #8
 8000f28:	f000 fdf2 	bl	8001b10 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fbd6 	bl	80026e0 <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000f34:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80010ac <walk+0x1a8>
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f000 fde9 	bl	8001b10 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fbcd 	bl	80026e0 <HAL_Delay>

	while (1)
	{
//		STATE 1
//		-----------------------------------------------------
		PCA9685_SetServoAngle(7, ANGLE_7_INIT-30);
 8000f46:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80010a4 <walk+0x1a0>
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f000 fde0 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fbc4 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8000f58:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80010b0 <walk+0x1ac>
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 fdd7 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fbbb 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(11, ANGLE_11_INIT-35);
 8000f6a:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80010b4 <walk+0x1b0>
 8000f6e:	200b      	movs	r0, #11
 8000f70:	f000 fdce 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fbb2 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000f7c:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80010b8 <walk+0x1b4>
 8000f80:	2007      	movs	r0, #7
 8000f82:	f000 fdc5 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fba9 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000f8e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80010b8 <walk+0x1b4>
 8000f92:	2007      	movs	r0, #7
 8000f94:	f000 fdbc 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fba0 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT+20);
 8000fa0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80010a4 <walk+0x1a0>
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f000 fdb3 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fb97 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(8, ANGLE_8_INIT-20);
 8000fb2:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80010bc <walk+0x1b8>
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f000 fdaa 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fb8e 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000fc4:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80010ac <walk+0x1a8>
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f000 fda1 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fb85 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(9, ANGLE_9_INIT-55);
 8000fd6:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80010b0 <walk+0x1ac>
 8000fda:	2009      	movs	r0, #9
 8000fdc:	f000 fd98 	bl	8001b10 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 8000fe0:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80010c0 <walk+0x1bc>
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f000 fd93 	bl	8001b10 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(2, ANGLE_2_INIT-30);
 8000fea:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80010c4 <walk+0x1c0>
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 fd8e 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fb72 	bl	80026e0 <HAL_Delay>

		PCA9685_SetServoAngle(6, ANGLE_6_INIT+30);
 8000ffc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80010c8 <walk+0x1c4>
 8001000:	2006      	movs	r0, #6
 8001002:	f000 fd85 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fb69 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT+30);
 800100e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80010c8 <walk+0x1c4>
 8001012:	200a      	movs	r0, #10
 8001014:	f000 fd7c 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fb60 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8001020:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80010cc <walk+0x1c8>
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fd73 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fb57 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8001032:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80010d0 <walk+0x1cc>
 8001036:	2006      	movs	r0, #6
 8001038:	f000 fd6a 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fb4e 	bl	80026e0 <HAL_Delay>


//		STATE 2
		PCA9685_SetServoAngle(5, ANGLE_5_INIT+30);
 8001044:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80010d4 <walk+0x1d0>
 8001048:	2005      	movs	r0, #5
 800104a:	f000 fd61 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fb45 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8001056:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80010d8 <walk+0x1d4>
 800105a:	2009      	movs	r0, #9
 800105c:	f000 fd58 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fb3c 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 8001068:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80010c0 <walk+0x1bc>
 800106c:	2005      	movs	r0, #5
 800106e:	f000 fd4f 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fb33 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(8, ANGLE_8_INIT+20);
 800107a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80010a8 <walk+0x1a4>
 800107e:	2008      	movs	r0, #8
 8001080:	f000 fd46 	bl	8001b10 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 8001084:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80010d0 <walk+0x1cc>
 8001088:	200a      	movs	r0, #10
 800108a:	f000 fd41 	bl	8001b10 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(3, ANGLE_3_INIT+20);
 800108e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80010d4 <walk+0x1d0>
 8001092:	2003      	movs	r0, #3
 8001094:	f000 fd3c 	bl	8001b10 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fb20 	bl	80026e0 <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT-30);
 80010a0:	e751      	b.n	8000f46 <walk+0x42>
 80010a2:	bf00      	nop
 80010a4:	42a00000 	.word	0x42a00000
 80010a8:	42be0000 	.word	0x42be0000
 80010ac:	42700000 	.word	0x42700000
 80010b0:	42340000 	.word	0x42340000
 80010b4:	00000000 	.word	0x00000000
 80010b8:	42dc0000 	.word	0x42dc0000
 80010bc:	425c0000 	.word	0x425c0000
 80010c0:	420c0000 	.word	0x420c0000
 80010c4:	42b40000 	.word	0x42b40000
 80010c8:	43070000 	.word	0x43070000
 80010cc:	42f00000 	.word	0x42f00000
 80010d0:	42d20000 	.word	0x42d20000
 80010d4:	42820000 	.word	0x42820000
 80010d8:	42c80000 	.word	0x42c80000

080010dc <faces>:
	}
	vTaskDelete(NULL);
}

void faces(void *parameters)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	6078      	str	r0, [r7, #4]
	int times = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	4a35      	ldr	r2, [pc, #212]	; (80011c8 <faces+0xec>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 fd7c 	bl	8001bf4 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80010fc:	f000 fea6 	bl	8001e4c <SSD1306_UpdateScreen>
		HAL_Delay(times + 1000);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001106:	4618      	mov	r0, r3
 8001108:	f001 faea 	bl	80026e0 <HAL_Delay>
		SSD1306_Clear();
 800110c:	f000 ff44 	bl	8001f98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <faces+0xf0>)
 800111c:	2100      	movs	r1, #0
 800111e:	2000      	movs	r0, #0
 8001120:	f000 fd68 	bl	8001bf4 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001124:	f000 fe92 	bl	8001e4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fad8 	bl	80026e0 <HAL_Delay>
		SSD1306_Clear();
 8001130:	f000 ff32 	bl	8001f98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <faces+0xf4>)
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f000 fd56 	bl	8001bf4 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001148:	f000 fe80 	bl	8001e4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fac6 	bl	80026e0 <HAL_Delay>
		SSD1306_Clear();
 8001154:	f000 ff20 	bl	8001f98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <faces+0xf8>)
 8001164:	2100      	movs	r1, #0
 8001166:	2000      	movs	r0, #0
 8001168:	f000 fd44 	bl	8001bf4 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800116c:	f000 fe6e 	bl	8001e4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fab4 	bl	80026e0 <HAL_Delay>
		SSD1306_Clear();
 8001178:	f000 ff0e 	bl	8001f98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <faces+0xfc>)
 8001188:	2100      	movs	r1, #0
 800118a:	2000      	movs	r0, #0
 800118c:	f000 fd32 	bl	8001bf4 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001190:	f000 fe5c 	bl	8001e4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 faa2 	bl	80026e0 <HAL_Delay>
		SSD1306_Clear();
 800119c:	f000 fefc 	bl	8001f98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <faces+0x100>)
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 fd20 	bl	8001bf4 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80011b4:	f000 fe4a 	bl	8001e4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fa90 	bl	80026e0 <HAL_Delay>
		SSD1306_Clear();
 80011c0:	f000 feea 	bl	8001f98 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80011c4:	e790      	b.n	80010e8 <faces+0xc>
 80011c6:	bf00      	nop
 80011c8:	0800ed08 	.word	0x0800ed08
 80011cc:	0800f108 	.word	0x0800f108
 80011d0:	0800f508 	.word	0x0800f508
 80011d4:	0800f908 	.word	0x0800f908
 80011d8:	0800fd08 	.word	0x0800fd08
 80011dc:	08010108 	.word	0x08010108

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e6:	f001 fa39 	bl	800265c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ea:	f000 f847 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 f9b3 	bl	8001558 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011f2:	f000 f8c5 	bl	8001380 <MX_I2C1_Init>
  MX_I2S3_Init();
 80011f6:	f000 f91f 	bl	8001438 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011fa:	f000 f94d 	bl	8001498 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80011fe:	f000 f981 	bl	8001504 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001202:	f000 f8eb 	bl	80013dc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	SSD1306_Init();
 8001206:	f000 fd5d 	bl	8001cc4 <SSD1306_Init>
	PCA9685_Init(&hi2c3);
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <main+0x7c>)
 800120c:	f000 fcdc 	bl	8001bc8 <PCA9685_Init>

	start_normal();
 8001210:	f7ff fe20 	bl	8000e54 <start_normal>
	xTaskHandle HT1, HT2;
	xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	490f      	ldr	r1, [pc, #60]	; (8001260 <main+0x80>)
 8001222:	4810      	ldr	r0, [pc, #64]	; (8001264 <main+0x84>)
 8001224:	f00b fa75 	bl	800c712 <xTaskCreate>
	xTaskCreate(walk, "debugging", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
 8001228:	463b      	mov	r3, r7
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <main+0x88>)
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <main+0x8c>)
 8001238:	f00b fa6b 	bl	800c712 <xTaskCreate>

	vTaskStartScheduler();
 800123c:	f00b fbe2 	bl	800ca04 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001240:	f00a f954 	bl	800b4ec <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <main+0x90>)
 8001246:	2100      	movs	r1, #0
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <main+0x94>)
 800124a:	f00a f999 	bl	800b580 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <main+0x98>)
 8001252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001254:	f00a f96e 	bl	800b534 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001258:	e7fe      	b.n	8001258 <main+0x78>
 800125a:	bf00      	nop
 800125c:	20004ddc 	.word	0x20004ddc
 8001260:	0800ecc8 	.word	0x0800ecc8
 8001264:	080010dd 	.word	0x080010dd
 8001268:	0800ecd4 	.word	0x0800ecd4
 800126c:	08000f05 	.word	0x08000f05
 8001270:	08010508 	.word	0x08010508
 8001274:	08001759 	.word	0x08001759
 8001278:	20004dd8 	.word	0x20004dd8

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b098      	sub	sp, #96	; 0x60
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00d fbb0 	bl	800e9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <SystemClock_Config+0xfc>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a30      	ldr	r2, [pc, #192]	; (8001378 <SystemClock_Config+0xfc>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <SystemClock_Config+0xfc>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <SystemClock_Config+0x100>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <SystemClock_Config+0x100>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <SystemClock_Config+0x100>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e6:	2301      	movs	r3, #1
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012fa:	2308      	movs	r3, #8
 80012fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012fe:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001302:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001308:	2307      	movs	r3, #7
 800130a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001310:	4618      	mov	r0, r3
 8001312:	f005 f9a5 	bl	8006660 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800131c:	f000 fa38 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2105      	movs	r1, #5
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fc06 	bl	8006b50 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800134a:	f000 fa21 	bl	8001790 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800134e:	2301      	movs	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fe24 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800136a:	f000 fa11 	bl	8001790 <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	3760      	adds	r7, #96	; 0x60
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <MX_I2C1_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x50>)
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_I2C1_Init+0x58>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_I2C1_Init+0x50>)
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013be:	f003 fa41 	bl	8004844 <HAL_I2C_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c8:	f000 f9e2 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20004e30 	.word	0x20004e30
 80013d4:	40005400 	.word	0x40005400
 80013d8:	00061a80 	.word	0x00061a80

080013dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C3_Init+0x50>)
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <MX_I2C3_Init+0x54>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_I2C3_Init+0x50>)
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_I2C3_Init+0x58>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C3_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_I2C3_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_I2C3_Init+0x50>)
 80013fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_I2C3_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_I2C3_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_I2C3_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_I2C3_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_I2C3_Init+0x50>)
 800141a:	f003 fa13 	bl	8004844 <HAL_I2C_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001424:	f000 f9b4 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20004ddc 	.word	0x20004ddc
 8001430:	40005c00 	.word	0x40005c00
 8001434:	00061a80 	.word	0x00061a80

08001438 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_I2S3_Init+0x54>)
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <MX_I2S3_Init+0x58>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2S3_Init+0x54>)
 8001444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001448:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_I2S3_Init+0x54>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_I2S3_Init+0x54>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_I2S3_Init+0x54>)
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_I2S3_Init+0x54>)
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <MX_I2S3_Init+0x5c>)
 8001462:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_I2S3_Init+0x54>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_I2S3_Init+0x54>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_I2S3_Init+0x54>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_I2S3_Init+0x54>)
 8001478:	f004 fc52 	bl	8005d20 <HAL_I2S_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001482:	f000 f985 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20004f20 	.word	0x20004f20
 8001490:	40003c00 	.word	0x40003c00
 8001494:	00017700 	.word	0x00017700

08001498 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_SPI1_Init+0x64>)
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <MX_SPI1_Init+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_SPI1_Init+0x64>)
 80014a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_SPI1_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_SPI1_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_SPI1_Init+0x64>)
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_SPI1_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_SPI1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_SPI1_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_SPI1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_SPI1_Init+0x64>)
 80014e4:	220a      	movs	r2, #10
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_SPI1_Init+0x64>)
 80014ea:	f005 fe9f 	bl	800722c <HAL_SPI_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014f4:	f000 f94c 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20004e84 	.word	0x20004e84
 8001500:	40013000 	.word	0x40013000

08001504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_USART2_UART_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800153c:	f006 f9ac 	bl	8007898 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001546:	f000 f923 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20004edc 	.word	0x20004edc
 8001554:	40004400 	.word	0x40004400

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	4b72      	ldr	r3, [pc, #456]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a71      	ldr	r2, [pc, #452]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b6f      	ldr	r3, [pc, #444]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b6b      	ldr	r3, [pc, #428]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a6a      	ldr	r2, [pc, #424]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b68      	ldr	r3, [pc, #416]	; (800173c <MX_GPIO_Init+0x1e4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b64      	ldr	r3, [pc, #400]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a63      	ldr	r2, [pc, #396]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b61      	ldr	r3, [pc, #388]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b5a      	ldr	r3, [pc, #360]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b56      	ldr	r3, [pc, #344]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a55      	ldr	r2, [pc, #340]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b53      	ldr	r3, [pc, #332]	; (800173c <MX_GPIO_Init+0x1e4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b4f      	ldr	r3, [pc, #316]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a4e      	ldr	r2, [pc, #312]	; (800173c <MX_GPIO_Init+0x1e4>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <MX_GPIO_Init+0x1e4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2108      	movs	r1, #8
 800161a:	4849      	ldr	r0, [pc, #292]	; (8001740 <MX_GPIO_Init+0x1e8>)
 800161c:	f001 fb94 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f240 1101 	movw	r1, #257	; 0x101
 8001626:	4847      	ldr	r0, [pc, #284]	; (8001744 <MX_GPIO_Init+0x1ec>)
 8001628:	f001 fb8e 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800162c:	2200      	movs	r2, #0
 800162e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001632:	4845      	ldr	r0, [pc, #276]	; (8001748 <MX_GPIO_Init+0x1f0>)
 8001634:	f001 fb88 	bl	8002d48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001638:	2308      	movs	r3, #8
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	483c      	ldr	r0, [pc, #240]	; (8001740 <MX_GPIO_Init+0x1e8>)
 8001650:	f001 f9de 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8;
 8001654:	f240 1301 	movw	r3, #257	; 0x101
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4835      	ldr	r0, [pc, #212]	; (8001744 <MX_GPIO_Init+0x1ec>)
 800166e:	f001 f9cf 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001672:	2308      	movs	r3, #8
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001682:	2305      	movs	r3, #5
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	482d      	ldr	r0, [pc, #180]	; (8001744 <MX_GPIO_Init+0x1ec>)
 800168e:	f001 f9bf 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001692:	2301      	movs	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_GPIO_Init+0x1f4>)
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	482a      	ldr	r0, [pc, #168]	; (8001750 <MX_GPIO_Init+0x1f8>)
 80016a6:	f001 f9b3 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016aa:	2304      	movs	r3, #4
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4825      	ldr	r0, [pc, #148]	; (8001754 <MX_GPIO_Init+0x1fc>)
 80016be:	f001 f9a7 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80016c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d4:	2305      	movs	r3, #5
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	481d      	ldr	r0, [pc, #116]	; (8001754 <MX_GPIO_Init+0x1fc>)
 80016e0:	f001 f996 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016e4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80016e8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <MX_GPIO_Init+0x1f0>)
 80016fe:	f001 f987 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001702:	2320      	movs	r3, #32
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <MX_GPIO_Init+0x1f0>)
 8001716:	f001 f97b 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_GPIO_Init+0x1f4>)
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_GPIO_Init+0x1e8>)
 800172e:	f001 f96f 	bl	8002a10 <HAL_GPIO_Init>

}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40021000 	.word	0x40021000
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	10120000 	.word	0x10120000
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400

08001758 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001760:	f00c fdfc 	bl	800e35c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f009 ff9d 	bl	800b6a4 <osDelay>
 800176a:	e7fb      	b.n	8001764 <StartDefaultTask+0xc>

0800176c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800177e:	f000 ff8f 	bl	80026a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40001000 	.word	0x40001000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001798:	e7fe      	b.n	8001798 <Error_Handler+0x8>
	...

0800179c <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	460b      	mov	r3, r1
 80017a8:	71bb      	strb	r3, [r7, #6]
 80017aa:	4613      	mov	r3, r2
 80017ac:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80017ae:	797b      	ldrb	r3, [r7, #5]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <PCA9685_SetBit+0x1c>
 80017b4:	2301      	movs	r3, #1
 80017b6:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <PCA9685_SetBit+0xb0>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	230a      	movs	r3, #10
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	f107 030f 	add.w	r3, r7, #15
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	f003 fb73 	bl	8004ebc <HAL_I2C_Mem_Read>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e031      	b.n	8001844 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	2201      	movs	r2, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	b25a      	sxtb	r2, r3
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	b25b      	sxtb	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b25b      	sxtb	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <PCA9685_SetBit+0xb0>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	b29a      	uxth	r2, r3
 8001822:	230a      	movs	r3, #10
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2301      	movs	r3, #1
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	f107 030f 	add.w	r3, r7, #15
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2301      	movs	r3, #1
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	f003 fa48 	bl	8004cc8 <HAL_I2C_Mem_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20004f68 	.word	0x20004f68

08001850 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001856:	2306      	movs	r3, #6
 8001858:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <PCA9685_SoftwareReset+0x30>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	1dfa      	adds	r2, r7, #7
 8001860:	230a      	movs	r3, #10
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	2100      	movs	r1, #0
 8001868:	f003 f930 	bl	8004acc <HAL_I2C_Master_Transmit>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20004f68 	.word	0x20004f68

08001884 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	461a      	mov	r2, r3
 8001892:	2104      	movs	r1, #4
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff ff81 	bl	800179c <PCA9685_SetBit>
 800189a:	4603      	mov	r3, r0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	461a      	mov	r2, r3
 80018b2:	2107      	movs	r1, #7
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff ff71 	bl	800179c <PCA9685_SetBit>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	461a      	mov	r2, r3
 80018d2:	2105      	movs	r1, #5
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff ff61 	bl	800179c <PCA9685_SetBit>
 80018da:	4603      	mov	r3, r0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0000      	movs	r0, r0
	...

080018e8 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af04      	add	r7, sp, #16
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d902      	bls.n	8001902 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 80018fc:	2303      	movs	r3, #3
 80018fe:	72fb      	strb	r3, [r7, #11]
 8001900:	e046      	b.n	8001990 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b18      	cmp	r3, #24
 8001906:	d802      	bhi.n	800190e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001908:	23ff      	movs	r3, #255	; 0xff
 800190a:	72fb      	strb	r3, [r7, #11]
 800190c:	e040      	b.n	8001990 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001918:	ee17 0a90 	vmov	r0, s15
 800191c:	f7fe fdbc 	bl	8000498 <__aeabi_f2d>
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <PCA9685_SetPwmFrequency+0xe8>)
 8001926:	f7fe fe0f 	bl	8000548 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	a126      	add	r1, pc, #152	; (adr r1, 80019c8 <PCA9685_SetPwmFrequency+0xe0>)
 8001930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001934:	f7fe ff32 	bl	800079c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <PCA9685_SetPwmFrequency+0xec>)
 8001946:	f7fe fc47 	bl	80001d8 <__aeabi_dsub>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f8b3 	bl	8000abc <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7fe fd9c 	bl	8000498 <__aeabi_f2d>
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <PCA9685_SetPwmFrequency+0xf0>)
 8001966:	f7fe fc39 	bl	80001dc <__adddf3>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b17 	vmov	d7, r2, r3
 8001972:	eeb0 0a47 	vmov.f32	s0, s14
 8001976:	eef0 0a67 	vmov.f32	s1, s15
 800197a:	f00d f909 	bl	800eb90 <floor>
 800197e:	ec53 2b10 	vmov	r2, r3, d0
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7ff f879 	bl	8000a7c <__aeabi_d2uiz>
 800198a:	4603      	mov	r3, r0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff ff77 	bl	8001884 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <PCA9685_SetPwmFrequency+0xf4>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	230a      	movs	r3, #10
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2301      	movs	r3, #1
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	f107 030b 	add.w	r3, r7, #11
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	22fe      	movs	r2, #254	; 0xfe
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	f003 f98b 	bl	8004cc8 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff ff66 	bl	8001884 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff ff73 	bl	80018a4 <PCA9685_RestartMode>
	return PCA9685_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	00000000 	.word	0x00000000
 80019cc:	4177d784 	.word	0x4177d784
 80019d0:	40b00000 	.word	0x40b00000
 80019d4:	3ff00000 	.word	0x3ff00000
 80019d8:	3fe00000 	.word	0x3fe00000
 80019dc:	20004f68 	.word	0x20004f68

080019e0 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	460b      	mov	r3, r1
 80019ec:	80bb      	strh	r3, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3306      	adds	r3, #6
 80019fa:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <PCA9685_SetPwm+0x70>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	230a      	movs	r3, #10
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2304      	movs	r3, #4
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	f003 f947 	bl	8004cc8 <HAL_I2C_Mem_Write>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20004f68 	.word	0x20004f68

08001a54 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	80bb      	strh	r3, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001a66:	88bb      	ldrh	r3, [r7, #4]
 8001a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6c:	d302      	bcc.n	8001a74 <PCA9685_SetPin+0x20>
 8001a6e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001a72:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d025      	beq.n	8001ac6 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ffa9 	bl	80019e0 <PCA9685_SetPwm>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	e03a      	b.n	8001b08 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001a92:	88bb      	ldrh	r3, [r7, #4]
 8001a94:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d108      	bne.n	8001aae <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff9b 	bl	80019e0 <PCA9685_SetPwm>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e02c      	b.n	8001b08 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001ab4:	330f      	adds	r3, #15
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff8f 	bl	80019e0 <PCA9685_SetPwm>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	e020      	b.n	8001b08 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d108      	bne.n	8001ae2 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff81 	bl	80019e0 <PCA9685_SetPwm>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	e012      	b.n	8001b08 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d108      	bne.n	8001afa <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff75 	bl	80019e0 <PCA9685_SetPwm>
 8001af6:	4603      	mov	r3, r0
 8001af8:	e006      	b.n	8001b08 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001afa:	88ba      	ldrh	r2, [r7, #4]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff6d 	bl	80019e0 <PCA9685_SetPwm>
 8001b06:	4603      	mov	r3, r0
    }
  }
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	ed87 0a00 	vstr	s0, [r7]
 8001b1c:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001b1e:	edd7 7a00 	vldr	s15, [r7]
 8001b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d502      	bpl.n	8001b32 <PCA9685_SetServoAngle+0x22>
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001b32:	edd7 7a00 	vldr	s15, [r7]
 8001b36:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001bb8 <PCA9685_SetServoAngle+0xa8>
 8001b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	dd01      	ble.n	8001b48 <PCA9685_SetServoAngle+0x38>
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <PCA9685_SetServoAngle+0xac>)
 8001b46:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7fe fca5 	bl	8000498 <__aeabi_f2d>
 8001b4e:	a318      	add	r3, pc, #96	; (adr r3, 8001bb0 <PCA9685_SetServoAngle+0xa0>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <PCA9685_SetServoAngle+0xb0>)
 8001b66:	f7fe fe19 	bl	800079c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <PCA9685_SetServoAngle+0xb4>)
 8001b78:	f7fe fb30 	bl	80001dc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe ff9a 	bl	8000abc <__aeabi_d2f>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b94:	ee17 3a90 	vmov	r3, s15
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff58 	bl	8001a54 <PCA9685_SetPin>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	407c2000 	.word	0x407c2000
 8001bb8:	43340000 	.word	0x43340000
 8001bbc:	43340000 	.word	0x43340000
 8001bc0:	40668000 	.word	0x40668000
 8001bc4:	405f4000 	.word	0x405f4000

08001bc8 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <PCA9685_Init+0x28>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001bd6:	f7ff fe3b 	bl	8001850 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001bda:	2030      	movs	r0, #48	; 0x30
 8001bdc:	f7ff fe84 	bl	80018e8 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fe6f 	bl	80018c4 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20004f68 	.word	0x20004f68

08001bf4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60ba      	str	r2, [r7, #8]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	81fb      	strh	r3, [r7, #14]
 8001c02:	460b      	mov	r3, r1
 8001c04:	81bb      	strh	r3, [r7, #12]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0e:	3307      	adds	r3, #7
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da00      	bge.n	8001c16 <SSD1306_DrawBitmap+0x22>
 8001c14:	3307      	adds	r3, #7
 8001c16:	10db      	asrs	r3, r3, #3
 8001c18:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	82bb      	strh	r3, [r7, #20]
 8001c22:	e044      	b.n	8001cae <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	827b      	strh	r3, [r7, #18]
 8001c28:	e02f      	b.n	8001c8a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001c2a:	8a7b      	ldrh	r3, [r7, #18]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
 8001c3a:	e012      	b.n	8001c62 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001c3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c44:	fb02 f203 	mul.w	r2, r2, r3
 8001c48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da00      	bge.n	8001c52 <SSD1306_DrawBitmap+0x5e>
 8001c50:	3307      	adds	r3, #7
 8001c52:	10db      	asrs	r3, r3, #3
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da09      	bge.n	8001c7e <SSD1306_DrawBitmap+0x8a>
 8001c6a:	89fa      	ldrh	r2, [r7, #14]
 8001c6c:	8a7b      	ldrh	r3, [r7, #18]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	89b9      	ldrh	r1, [r7, #12]
 8001c74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f92d 	bl	8001ed8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001c7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	827b      	strh	r3, [r7, #18]
 8001c8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbc9      	blt.n	8001c2a <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001c96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	82bb      	strh	r3, [r7, #20]
 8001ca2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	81bb      	strh	r3, [r7, #12]
 8001cae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001cb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbb4      	blt.n	8001c24 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001cca:	f000 f96f 	bl	8001fac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001cce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2178      	movs	r1, #120	; 0x78
 8001cd6:	485b      	ldr	r0, [pc, #364]	; (8001e44 <SSD1306_Init+0x180>)
 8001cd8:	f003 fb16 	bl	8005308 <HAL_I2C_IsDeviceReady>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e0a9      	b.n	8001e3a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001ce6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001cea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cec:	e002      	b.n	8001cf4 <SSD1306_Init+0x30>
		p--;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001cfa:	22ae      	movs	r2, #174	; 0xae
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2078      	movs	r0, #120	; 0x78
 8001d00:	f000 f9b2 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001d04:	2220      	movs	r2, #32
 8001d06:	2100      	movs	r1, #0
 8001d08:	2078      	movs	r0, #120	; 0x78
 8001d0a:	f000 f9ad 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d0e:	2210      	movs	r2, #16
 8001d10:	2100      	movs	r1, #0
 8001d12:	2078      	movs	r0, #120	; 0x78
 8001d14:	f000 f9a8 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d18:	22b0      	movs	r2, #176	; 0xb0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2078      	movs	r0, #120	; 0x78
 8001d1e:	f000 f9a3 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001d22:	22c8      	movs	r2, #200	; 0xc8
 8001d24:	2100      	movs	r1, #0
 8001d26:	2078      	movs	r0, #120	; 0x78
 8001d28:	f000 f99e 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2078      	movs	r0, #120	; 0x78
 8001d32:	f000 f999 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d36:	2210      	movs	r2, #16
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2078      	movs	r0, #120	; 0x78
 8001d3c:	f000 f994 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	2078      	movs	r0, #120	; 0x78
 8001d46:	f000 f98f 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d4a:	2281      	movs	r2, #129	; 0x81
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2078      	movs	r0, #120	; 0x78
 8001d50:	f000 f98a 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001d54:	22ff      	movs	r2, #255	; 0xff
 8001d56:	2100      	movs	r1, #0
 8001d58:	2078      	movs	r0, #120	; 0x78
 8001d5a:	f000 f985 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001d5e:	22a1      	movs	r2, #161	; 0xa1
 8001d60:	2100      	movs	r1, #0
 8001d62:	2078      	movs	r0, #120	; 0x78
 8001d64:	f000 f980 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001d68:	22a6      	movs	r2, #166	; 0xa6
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2078      	movs	r0, #120	; 0x78
 8001d6e:	f000 f97b 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001d72:	22a8      	movs	r2, #168	; 0xa8
 8001d74:	2100      	movs	r1, #0
 8001d76:	2078      	movs	r0, #120	; 0x78
 8001d78:	f000 f976 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2078      	movs	r0, #120	; 0x78
 8001d82:	f000 f971 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d86:	22a4      	movs	r2, #164	; 0xa4
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2078      	movs	r0, #120	; 0x78
 8001d8c:	f000 f96c 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001d90:	22d3      	movs	r2, #211	; 0xd3
 8001d92:	2100      	movs	r1, #0
 8001d94:	2078      	movs	r0, #120	; 0x78
 8001d96:	f000 f967 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2078      	movs	r0, #120	; 0x78
 8001da0:	f000 f962 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001da4:	22d5      	movs	r2, #213	; 0xd5
 8001da6:	2100      	movs	r1, #0
 8001da8:	2078      	movs	r0, #120	; 0x78
 8001daa:	f000 f95d 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001dae:	22f0      	movs	r2, #240	; 0xf0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2078      	movs	r0, #120	; 0x78
 8001db4:	f000 f958 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001db8:	22d9      	movs	r2, #217	; 0xd9
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2078      	movs	r0, #120	; 0x78
 8001dbe:	f000 f953 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001dc2:	2222      	movs	r2, #34	; 0x22
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2078      	movs	r0, #120	; 0x78
 8001dc8:	f000 f94e 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001dcc:	22da      	movs	r2, #218	; 0xda
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2078      	movs	r0, #120	; 0x78
 8001dd2:	f000 f949 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001dd6:	2212      	movs	r2, #18
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2078      	movs	r0, #120	; 0x78
 8001ddc:	f000 f944 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001de0:	22db      	movs	r2, #219	; 0xdb
 8001de2:	2100      	movs	r1, #0
 8001de4:	2078      	movs	r0, #120	; 0x78
 8001de6:	f000 f93f 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001dea:	2220      	movs	r2, #32
 8001dec:	2100      	movs	r1, #0
 8001dee:	2078      	movs	r0, #120	; 0x78
 8001df0:	f000 f93a 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001df4:	228d      	movs	r2, #141	; 0x8d
 8001df6:	2100      	movs	r1, #0
 8001df8:	2078      	movs	r0, #120	; 0x78
 8001dfa:	f000 f935 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001dfe:	2214      	movs	r2, #20
 8001e00:	2100      	movs	r1, #0
 8001e02:	2078      	movs	r0, #120	; 0x78
 8001e04:	f000 f930 	bl	8002068 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e08:	22af      	movs	r2, #175	; 0xaf
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2078      	movs	r0, #120	; 0x78
 8001e0e:	f000 f92b 	bl	8002068 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001e12:	222e      	movs	r2, #46	; 0x2e
 8001e14:	2100      	movs	r1, #0
 8001e16:	2078      	movs	r0, #120	; 0x78
 8001e18:	f000 f926 	bl	8002068 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 f843 	bl	8001ea8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001e22:	f000 f813 	bl	8001e4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <SSD1306_Init+0x184>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SSD1306_Init+0x184>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SSD1306_Init+0x184>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20004e30 	.word	0x20004e30
 8001e48:	200004b0 	.word	0x200004b0

08001e4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	e01d      	b.n	8001e94 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	3b50      	subs	r3, #80	; 0x50
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	; 0x78
 8001e64:	f000 f900 	bl	8002068 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	; 0x78
 8001e6e:	f000 f8fb 	bl	8002068 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001e72:	2210      	movs	r2, #16
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	; 0x78
 8001e78:	f000 f8f6 	bl	8002068 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	01db      	lsls	r3, r3, #7
 8001e80:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <SSD1306_UpdateScreen+0x58>)
 8001e82:	441a      	add	r2, r3
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	2078      	movs	r0, #120	; 0x78
 8001e8a:	f000 f8a5 	bl	8001fd8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	3301      	adds	r3, #1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b07      	cmp	r3, #7
 8001e98:	d9de      	bls.n	8001e58 <SSD1306_UpdateScreen+0xc>
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200000b0 	.word	0x200000b0

08001ea8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <SSD1306_Fill+0x14>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <SSD1306_Fill+0x16>
 8001ebc:	23ff      	movs	r3, #255	; 0xff
 8001ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <SSD1306_Fill+0x2c>)
 8001ec6:	f00c fd93 	bl	800e9f0 <memset>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000b0 	.word	0x200000b0

08001ed8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	70fb      	strb	r3, [r7, #3]
	if (
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b7f      	cmp	r3, #127	; 0x7f
 8001eee:	d848      	bhi.n	8001f82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ef4:	d845      	bhi.n	8001f82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <SSD1306_DrawPixel+0xb8>)
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d11a      	bne.n	8001f48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	88bb      	ldrh	r3, [r7, #4]
 8001f16:	08db      	lsrs	r3, r3, #3
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <SSD1306_DrawPixel+0xbc>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b259      	sxtb	r1, r3
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	01db      	lsls	r3, r3, #7
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2c9      	uxtb	r1, r1
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <SSD1306_DrawPixel+0xbc>)
 8001f44:	54d1      	strb	r1, [r2, r3]
 8001f46:	e01d      	b.n	8001f84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4413      	add	r3, r2
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <SSD1306_DrawPixel+0xbc>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	b25a      	sxtb	r2, r3
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b259      	sxtb	r1, r3
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	4603      	mov	r3, r0
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4413      	add	r3, r2
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <SSD1306_DrawPixel+0xbc>)
 8001f7e:	54d1      	strb	r1, [r2, r3]
 8001f80:	e000      	b.n	8001f84 <SSD1306_DrawPixel+0xac>
		return;
 8001f82:	bf00      	nop
	}
}
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200004b0 	.word	0x200004b0
 8001f94:	200000b0 	.word	0x200000b0

08001f98 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff ff83 	bl	8001ea8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fa2:	f7ff ff53 	bl	8001e4c <SSD1306_UpdateScreen>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <ssd1306_I2C_Init+0x28>)
 8001fb4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fb6:	e002      	b.n	8001fbe <ssd1306_I2C_Init+0x12>
		p--;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	0003d090 	.word	0x0003d090

08001fd8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b0c7      	sub	sp, #284	; 0x11c
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4639      	mov	r1, r7
 8001fe4:	600a      	str	r2, [r1, #0]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	4622      	mov	r2, r4
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	1dbb      	adds	r3, r7, #6
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	1dba      	adds	r2, r7, #6
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800200a:	e010      	b.n	800202e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800200c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002010:	463a      	mov	r2, r7
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	441a      	add	r2, r3
 8002016:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800201a:	3301      	adds	r3, #1
 800201c:	7811      	ldrb	r1, [r2, #0]
 800201e:	f107 020c 	add.w	r2, r7, #12
 8002022:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002024:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002028:	3301      	adds	r3, #1
 800202a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800202e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002032:	b29b      	uxth	r3, r3
 8002034:	1d3a      	adds	r2, r7, #4
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8e7      	bhi.n	800200c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800203c:	1dfb      	adds	r3, r7, #7
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b299      	uxth	r1, r3
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b29b      	uxth	r3, r3
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	200a      	movs	r0, #10
 8002050:	9000      	str	r0, [sp, #0]
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <ssd1306_I2C_WriteMulti+0x8c>)
 8002054:	f002 fd3a 	bl	8004acc <HAL_I2C_Master_Transmit>
}
 8002058:	bf00      	nop
 800205a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	bf00      	nop
 8002064:	20004e30 	.word	0x20004e30

08002068 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af02      	add	r7, sp, #8
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	460b      	mov	r3, r1
 8002074:	71bb      	strb	r3, [r7, #6]
 8002076:	4613      	mov	r3, r2
 8002078:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800207e:	797b      	ldrb	r3, [r7, #5]
 8002080:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	b299      	uxth	r1, r3
 8002086:	f107 020c 	add.w	r2, r7, #12
 800208a:	230a      	movs	r3, #10
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2302      	movs	r3, #2
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <ssd1306_I2C_Write+0x38>)
 8002092:	f002 fd1b 	bl	8004acc <HAL_I2C_Master_Transmit>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20004e30 	.word	0x20004e30

080020a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_MspInit+0x64>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_MspInit+0x64>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_MspInit+0x64>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_MspInit+0x64>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_MspInit+0x64>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_MspInit+0x64>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	210f      	movs	r1, #15
 80020e6:	f06f 0001 	mvn.w	r0, #1
 80020ea:	f000 fbd5 	bl	8002898 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	2005      	movs	r0, #5
 80020f4:	f000 fbd0 	bl	8002898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80020f8:	2005      	movs	r0, #5
 80020fa:	f000 fbe9 	bl	80028d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_I2C_MspInit+0x128>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12c      	bne.n	8002188 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a40      	ldr	r2, [pc, #256]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800214a:	23c0      	movs	r3, #192	; 0xc0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214e:	2312      	movs	r3, #18
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800215a:	2304      	movs	r3, #4
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4835      	ldr	r0, [pc, #212]	; (800223c <HAL_I2C_MspInit+0x130>)
 8002166:	f000 fc53 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a31      	ldr	r2, [pc, #196]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002186:	e050      	b.n	800222a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <HAL_I2C_MspInit+0x134>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d14b      	bne.n	800222a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a20      	ldr	r2, [pc, #128]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	2312      	movs	r3, #18
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021dc:	2304      	movs	r3, #4
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	4817      	ldr	r0, [pc, #92]	; (8002244 <HAL_I2C_MspInit+0x138>)
 80021e8:	f000 fc12 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021fe:	2304      	movs	r3, #4
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	480f      	ldr	r0, [pc, #60]	; (8002248 <HAL_I2C_MspInit+0x13c>)
 800220a:	f000 fc01 	bl	8002a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_I2C_MspInit+0x12c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
}
 800222a:	bf00      	nop
 800222c:	3730      	adds	r7, #48	; 0x30
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40005400 	.word	0x40005400
 8002238:	40023800 	.word	0x40023800
 800223c:	40020400 	.word	0x40020400
 8002240:	40005c00 	.word	0x40005c00
 8002244:	40020800 	.word	0x40020800
 8002248:	40020000 	.word	0x40020000

0800224c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <HAL_I2S_MspInit+0xc0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d14a      	bne.n	8002304 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 8002278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_I2S_MspInit+0xc4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80022c2:	2310      	movs	r3, #16
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022d2:	2306      	movs	r3, #6
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <HAL_I2S_MspInit+0xc8>)
 80022de:	f000 fb97 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022e2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022f4:	2306      	movs	r3, #6
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <HAL_I2S_MspInit+0xcc>)
 8002300:	f000 fb86 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40003c00 	.word	0x40003c00
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020800 	.word	0x40020800

0800231c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_SPI_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12b      	bne.n	8002396 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002376:	23e0      	movs	r3, #224	; 0xe0
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002386:	2305      	movs	r3, #5
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_SPI_MspInit+0x8c>)
 8002392:	f000 fb3d 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013000 	.word	0x40013000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_UART_MspInit+0x94>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d133      	bne.n	8002436 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_UART_MspInit+0x98>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_UART_MspInit+0x98>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_UART_MspInit+0x98>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_UART_MspInit+0x98>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_UART_MspInit+0x98>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_UART_MspInit+0x98>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002406:	230c      	movs	r3, #12
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002416:	2307      	movs	r3, #7
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <HAL_UART_MspInit+0x9c>)
 8002422:	f000 faf5 	bl	8002a10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2105      	movs	r1, #5
 800242a:	2026      	movs	r0, #38	; 0x26
 800242c:	f000 fa34 	bl	8002898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002430:	2026      	movs	r0, #38	; 0x26
 8002432:	f000 fa4d 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40004400 	.word	0x40004400
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000

0800244c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800245c:	2200      	movs	r2, #0
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	2036      	movs	r0, #54	; 0x36
 8002462:	f000 fa19 	bl	8002898 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002466:	2036      	movs	r0, #54	; 0x36
 8002468:	f000 fa32 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <HAL_InitTick+0xa4>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_InitTick+0xa4>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	6413      	str	r3, [r2, #64]	; 0x40
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <HAL_InitTick+0xa4>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002488:	f107 0210 	add.w	r2, r7, #16
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f004 fd58 	bl	8006f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002498:	f004 fd2e 	bl	8006ef8 <HAL_RCC_GetPCLK1Freq>
 800249c:	4603      	mov	r3, r0
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <HAL_InitTick+0xa8>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	3b01      	subs	r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_InitTick+0xac>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <HAL_InitTick+0xb0>)
 80024b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_InitTick+0xac>)
 80024b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024be:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_InitTick+0xac>)
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_InitTick+0xac>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_InitTick+0xac>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024d0:	4809      	ldr	r0, [pc, #36]	; (80024f8 <HAL_InitTick+0xac>)
 80024d2:	f004 ff34 	bl	800733e <HAL_TIM_Base_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d104      	bne.n	80024e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <HAL_InitTick+0xac>)
 80024de:	f004 ff87 	bl	80073f0 <HAL_TIM_Base_Start_IT>
 80024e2:	4603      	mov	r3, r0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3730      	adds	r7, #48	; 0x30
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	20004f6c 	.word	0x20004f6c
 80024fc:	40001000 	.word	0x40001000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <USART2_IRQHandler+0x10>)
 8002542:	f005 f9f7 	bl	8007934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20004edc 	.word	0x20004edc

08002550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM6_DAC_IRQHandler+0x10>)
 8002556:	f004 ffbb 	bl	80074d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20004f6c 	.word	0x20004f6c

08002564 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <OTG_FS_IRQHandler+0x10>)
 800256a:	f000 fe71 	bl	8003250 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20005400 	.word	0x20005400

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f00c f9da 	bl	800e960 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20020000 	.word	0x20020000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	200004b8 	.word	0x200004b8
 80025e0:	20005718 	.word	0x20005718

080025e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002624:	4c0b      	ldr	r4, [pc, #44]	; (8002654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002632:	f7ff ffd7 	bl	80025e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f00c f999 	bl	800e96c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7fe fdd1 	bl	80011e0 <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800264c:	08010554 	.word	0x08010554
  ldr r2, =_sbss
 8002650:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002654:	20005714 	.word	0x20005714

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_Init+0x40>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_Init+0x40>)
 8002672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_Init+0x40>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f000 f8fc 	bl	8002882 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff fede 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002690:	f7ff fd08 	bl	80020a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20004fb4 	.word	0x20004fb4

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20004fb4 	.word	0x20004fb4

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000008 	.word	0x20000008

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ff4c 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028aa:	f7ff ff61 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6978      	ldr	r0, [r7, #20]
 80028b6:	f7ff ffb1 	bl	800281c <NVIC_EncodePriority>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff80 	bl	80027c8 <__NVIC_SetPriority>
}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff54 	bl	800278c <__NVIC_EnableIRQ>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028fa:	f7ff fee5 	bl	80026c8 <HAL_GetTick>
 80028fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d008      	beq.n	800291e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e052      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_Abort+0x62>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	e013      	b.n	8002998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002970:	f7ff feaa 	bl	80026c8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d90c      	bls.n	8002998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e015      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e4      	bne.n	8002970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	223f      	movs	r2, #63	; 0x3f
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00c      	b.n	8002a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2205      	movs	r2, #5
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e16b      	b.n	8002d04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 815a 	bne.w	8002cfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d005      	beq.n	8002a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d130      	bne.n	8002ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0201 	and.w	r2, r3, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d017      	beq.n	8002b00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d123      	bne.n	8002b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80b4 	beq.w	8002cfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a5f      	ldr	r2, [pc, #380]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb2:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_GPIO_Init+0x314>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <HAL_GPIO_Init+0x226>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_GPIO_Init+0x318>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d025      	beq.n	8002c32 <HAL_GPIO_Init+0x222>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_GPIO_Init+0x31c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <HAL_GPIO_Init+0x21e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <HAL_GPIO_Init+0x320>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x21a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4e      	ldr	r2, [pc, #312]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x216>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <HAL_GPIO_Init+0x328>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x212>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4c      	ldr	r2, [pc, #304]	; (8002d3c <HAL_GPIO_Init+0x32c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x20e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4b      	ldr	r2, [pc, #300]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x20a>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e00e      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	e00c      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c1e:	2306      	movs	r3, #6
 8002c20:	e00a      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c22:	2305      	movs	r3, #5
 8002c24:	e008      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c36:	2300      	movs	r3, #0
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4093      	lsls	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c48:	4935      	ldr	r1, [pc, #212]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c7a:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca4:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f ae90 	bls.w	8002a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40021400 	.word	0x40021400
 8002d3c:	40021800 	.word	0x40021800
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	619a      	str	r2, [r3, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7c:	b08f      	sub	sp, #60	; 0x3c
 8002d7e:	af0a      	add	r7, sp, #40	; 0x28
 8002d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e054      	b.n	8002e36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f00b fb2c 	bl	800e404 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2203      	movs	r2, #3
 8002db0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f005 fb02 	bl	80083d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	687e      	ldr	r6, [r7, #4]
 8002dd8:	466d      	mov	r5, sp
 8002dda:	f106 0410 	add.w	r4, r6, #16
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dee:	1d33      	adds	r3, r6, #4
 8002df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df2:	6838      	ldr	r0, [r7, #0]
 8002df4:	f005 fa7c 	bl	80082f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f005 faf9 	bl	80083f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	687e      	ldr	r6, [r7, #4]
 8002e0c:	466d      	mov	r5, sp
 8002e0e:	f106 0410 	add.w	r4, r6, #16
 8002e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e22:	1d33      	adds	r3, r6, #4
 8002e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e26:	6838      	ldr	r0, [r7, #0]
 8002e28:	f005 fc0c 	bl	8008644 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e3e:	b590      	push	{r4, r7, lr}
 8002e40:	b089      	sub	sp, #36	; 0x24
 8002e42:	af04      	add	r7, sp, #16
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	4608      	mov	r0, r1
 8002e48:	4611      	mov	r1, r2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	70fb      	strb	r3, [r7, #3]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70bb      	strb	r3, [r7, #2]
 8002e54:	4613      	mov	r3, r2
 8002e56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_HCD_HC_Init+0x28>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e076      	b.n	8002f54 <HAL_HCD_HC_Init+0x116>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	333d      	adds	r3, #61	; 0x3d
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	787a      	ldrb	r2, [r7, #1]
 8002e90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3340      	adds	r3, #64	; 0x40
 8002ea0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ea2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3339      	adds	r3, #57	; 0x39
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	333f      	adds	r3, #63	; 0x3f
 8002ec4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ec8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	78ba      	ldrb	r2, [r7, #2]
 8002ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ed2:	b2d0      	uxtb	r0, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	333a      	adds	r3, #58	; 0x3a
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ee4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	da09      	bge.n	8002f00 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	333b      	adds	r3, #59	; 0x3b
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e008      	b.n	8002f12 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	333b      	adds	r3, #59	; 0x3b
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	333c      	adds	r3, #60	; 0x3c
 8002f20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f24:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	787c      	ldrb	r4, [r7, #1]
 8002f2c:	78ba      	ldrb	r2, [r7, #2]
 8002f2e:	78f9      	ldrb	r1, [r7, #3]
 8002f30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f32:	9302      	str	r3, [sp, #8]
 8002f34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4623      	mov	r3, r4
 8002f42:	f005 fd01 	bl	8008948 <USB_HC_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}

08002f5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_HCD_HC_Halt+0x1e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e00f      	b.n	8002f9a <HAL_HCD_HC_Halt+0x3e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 ff3d 	bl	8008e0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	70fb      	strb	r3, [r7, #3]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70bb      	strb	r3, [r7, #2]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	333b      	adds	r3, #59	; 0x3b
 8002fcc:	78ba      	ldrb	r2, [r7, #2]
 8002fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333f      	adds	r3, #63	; 0x3f
 8002fde:	787a      	ldrb	r2, [r7, #1]
 8002fe0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002fe2:	7c3b      	ldrb	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d112      	bne.n	800300e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3342      	adds	r3, #66	; 0x42
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333d      	adds	r3, #61	; 0x3d
 8003008:	7f3a      	ldrb	r2, [r7, #28]
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e008      	b.n	8003020 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b03      	cmp	r3, #3
 8003024:	f200 80c6 	bhi.w	80031b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003028:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003041 	.word	0x08003041
 8003034:	080031a1 	.word	0x080031a1
 8003038:	080030a5 	.word	0x080030a5
 800303c:	08003123 	.word	0x08003123
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003040:	7c3b      	ldrb	r3, [r7, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	f040 80b8 	bne.w	80031b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003048:	78bb      	ldrb	r3, [r7, #2]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80b4 	bne.w	80031b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003050:	8b3b      	ldrh	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3355      	adds	r3, #85	; 0x55
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3355      	adds	r3, #85	; 0x55
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3342      	adds	r3, #66	; 0x42
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800308e:	e093      	b.n	80031b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3342      	adds	r3, #66	; 0x42
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
      break;
 80030a2:	e089      	b.n	80031b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030a4:	78bb      	ldrb	r3, [r7, #2]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11d      	bne.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3355      	adds	r3, #85	; 0x55
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3342      	adds	r3, #66	; 0x42
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80030d0:	e073      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3342      	adds	r3, #66	; 0x42
 80030e0:	2202      	movs	r2, #2
 80030e2:	701a      	strb	r2, [r3, #0]
      break;
 80030e4:	e069      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3354      	adds	r3, #84	; 0x54
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3342      	adds	r3, #66	; 0x42
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
      break;
 800310c:	e055      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3342      	adds	r3, #66	; 0x42
 800311c:	2202      	movs	r2, #2
 800311e:	701a      	strb	r2, [r3, #0]
      break;
 8003120:	e04b      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003122:	78bb      	ldrb	r3, [r7, #2]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11d      	bne.n	8003164 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3355      	adds	r3, #85	; 0x55
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3342      	adds	r3, #66	; 0x42
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800314e:	e034      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3342      	adds	r3, #66	; 0x42
 800315e:	2202      	movs	r2, #2
 8003160:	701a      	strb	r2, [r3, #0]
      break;
 8003162:	e02a      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3354      	adds	r3, #84	; 0x54
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3342      	adds	r3, #66	; 0x42
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
      break;
 800318a:	e016      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3342      	adds	r3, #66	; 0x42
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
      break;
 800319e:	e00c      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3342      	adds	r3, #66	; 0x42
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
      break;
 80031b2:	e002      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80031b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3344      	adds	r3, #68	; 0x44
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	8b3a      	ldrh	r2, [r7, #24]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	202c      	movs	r0, #44	; 0x2c
 80031d4:	fb00 f303 	mul.w	r3, r0, r3
 80031d8:	440b      	add	r3, r1
 80031da:	334c      	adds	r3, #76	; 0x4c
 80031dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3360      	adds	r3, #96	; 0x60
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3350      	adds	r3, #80	; 0x50
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3339      	adds	r3, #57	; 0x39
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3361      	adds	r3, #97	; 0x61
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	222c      	movs	r2, #44	; 0x2c
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	3338      	adds	r3, #56	; 0x38
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	18d1      	adds	r1, r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	f005 fc90 	bl	8008b64 <USB_HC_StartXfer>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop

08003250 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 f9a9 	bl	80085be <USB_GetMode>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 80ef 	bne.w	8003452 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f005 f98d 	bl	8008598 <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80e5 	beq.w	8003450 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f005 f984 	bl	8008598 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329a:	d104      	bne.n	80032a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 f974 	bl	8008598 <USB_ReadInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ba:	d104      	bne.n	80032c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f005 f964 	bl	8008598 <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032da:	d104      	bne.n	80032e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f005 f954 	bl	8008598 <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d103      	bne.n	8003302 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f005 f946 	bl	8008598 <USB_ReadInterrupts>
 800330c:	4603      	mov	r3, r0
 800330e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003316:	d115      	bne.n	8003344 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003320:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f00b f8e4 	bl	800e500 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f005 fa3c 	bl	80087bc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f005 f925 	bl	8008598 <USB_ReadInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003358:	d102      	bne.n	8003360 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f001 f9ff 	bl	800475e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f005 f917 	bl	8008598 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b08      	cmp	r3, #8
 8003372:	d106      	bne.n	8003382 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f00b f8a7 	bl	800e4c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2208      	movs	r2, #8
 8003380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f005 f906 	bl	8008598 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d101      	bne.n	800339a <HAL_HCD_IRQHandler+0x14a>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_HCD_IRQHandler+0x14c>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0210 	bic.w	r2, r2, #16
 80033ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 f902 	bl	80045ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0210 	orr.w	r2, r2, #16
 80033c4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f005 f8e4 	bl	8008598 <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033da:	d13a      	bne.n	8003452 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 fd01 	bl	8008de8 <USB_HC_ReadInterrupt>
 80033e6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e025      	b.n	800343a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003418:	d106      	bne.n	8003428 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8ab 	bl	800357c <HCD_HC_IN_IRQHandler>
 8003426:	e005      	b.n	8003434 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fcc6 	bl	8003dc0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3301      	adds	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	d3d4      	bcc.n	80033ee <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344c:	615a      	str	r2, [r3, #20]
 800344e:	e000      	b.n	8003452 <HAL_HCD_IRQHandler+0x202>
      return;
 8003450:	bf00      	nop
    }
  }
}
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_HCD_Start+0x16>
 800346a:	2302      	movs	r3, #2
 800346c:	e013      	b.n	8003496 <HAL_HCD_Start+0x3e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 ff99 	bl	80083b2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	4618      	mov	r0, r3
 8003488:	f005 f9fc 	bl	8008884 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_HCD_Stop+0x16>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e00d      	b.n	80034d0 <HAL_HCD_Stop+0x32>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f005 fdfb 	bl	80090bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 f9a3 	bl	8008830 <USB_ResetPort>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3360      	adds	r3, #96	; 0x60
 800350e:	781b      	ldrb	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3350      	adds	r3, #80	; 0x50
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f005 f9e7 	bl	8008924 <USB_GetCurrentFrame>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f005 f9c2 	bl	80088f6 <USB_GetHostSpeed>
 8003572:	4603      	mov	r3, r0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d119      	bne.n	80035e0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	2304      	movs	r3, #4
 80035bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	60d3      	str	r3, [r2, #12]
 80035de:	e101      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f6:	d12b      	bne.n	8003650 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	461a      	mov	r2, r3
 8003606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	3361      	adds	r3, #97	; 0x61
 800361a:	2207      	movs	r2, #7
 800361c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	440a      	add	r2, r1
 8003634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f005 fbde 	bl	8008e0a <USB_HC_Halt>
 800364e:	e0c9      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d109      	bne.n	800367a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	461a      	mov	r2, r3
 8003674:	2320      	movs	r3, #32
 8003676:	6093      	str	r3, [r2, #8]
 8003678:	e0b4      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d133      	bne.n	80036f8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	0151      	lsls	r1, r2, #5
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	440a      	add	r2, r1
 80036a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3361      	adds	r3, #97	; 0x61
 80036be:	2205      	movs	r2, #5
 80036c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	461a      	mov	r2, r3
 80036d0:	2310      	movs	r3, #16
 80036d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2308      	movs	r3, #8
 80036e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f005 fb8a 	bl	8008e0a <USB_HC_Halt>
 80036f6:	e075      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370e:	d134      	bne.n	800377a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	0151      	lsls	r1, r2, #5
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	440a      	add	r2, r1
 8003726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	3361      	adds	r3, #97	; 0x61
 800373e:	2208      	movs	r2, #8
 8003740:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	461a      	mov	r2, r3
 8003750:	2310      	movs	r3, #16
 8003752:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	461a      	mov	r2, r3
 8003762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003766:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f005 fb49 	bl	8008e0a <USB_HC_Halt>
 8003778:	e034      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d129      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	0151      	lsls	r1, r2, #5
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	440a      	add	r2, r1
 80037a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3361      	adds	r3, #97	; 0x61
 80037be:	2206      	movs	r2, #6
 80037c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f005 fb1c 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fa:	d122      	bne.n	8003842 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	440a      	add	r2, r1
 8003812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f005 faef 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	461a      	mov	r2, r3
 800383a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003840:	e2ba      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 811b 	bne.w	8003a90 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d019      	beq.n	8003896 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	3348      	adds	r3, #72	; 0x48
 8003870:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	0159      	lsls	r1, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	440b      	add	r3, r1
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003884:	1ad2      	subs	r2, r2, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	202c      	movs	r0, #44	; 0x2c
 800388c:	fb00 f303 	mul.w	r3, r0, r3
 8003890:	440b      	add	r3, r1
 8003892:	3350      	adds	r3, #80	; 0x50
 8003894:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3361      	adds	r3, #97	; 0x61
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	335c      	adds	r3, #92	; 0x5c
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c6:	461a      	mov	r2, r3
 80038c8:	2301      	movs	r3, #1
 80038ca:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	333f      	adds	r3, #63	; 0x3f
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	333f      	adds	r3, #63	; 0x3f
 80038ee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d121      	bne.n	8003938 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	440a      	add	r2, r1
 800390a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f005 fa73 	bl	8008e0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2310      	movs	r3, #16
 8003934:	6093      	str	r3, [r2, #8]
 8003936:	e066      	b.n	8003a06 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	333f      	adds	r3, #63	; 0x3f
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d127      	bne.n	800399c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	440a      	add	r2, r1
 8003962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800396a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3360      	adds	r3, #96	; 0x60
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	b2d9      	uxtb	r1, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	fb00 f303 	mul.w	r3, r0, r3
 800398c:	4413      	add	r3, r2
 800398e:	3360      	adds	r3, #96	; 0x60
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f00a fdc1 	bl	800e51c <HAL_HCD_HC_NotifyURBChange_Callback>
 800399a:	e034      	b.n	8003a06 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	333f      	adds	r3, #63	; 0x3f
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d12a      	bne.n	8003a06 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3360      	adds	r3, #96	; 0x60
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3354      	adds	r3, #84	; 0x54
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	f083 0301 	eor.w	r3, r3, #1
 80039d6:	b2d8      	uxtb	r0, r3
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3354      	adds	r3, #84	; 0x54
 80039e6:	4602      	mov	r2, r0
 80039e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	b2d9      	uxtb	r1, r3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	202c      	movs	r0, #44	; 0x2c
 80039f4:	fb00 f303 	mul.w	r3, r0, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3360      	adds	r3, #96	; 0x60
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f00a fd8b 	bl	800e51c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d12b      	bne.n	8003a66 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3348      	adds	r3, #72	; 0x48
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	202c      	movs	r0, #44	; 0x2c
 8003a24:	fb00 f202 	mul.w	r2, r0, r2
 8003a28:	440a      	add	r2, r1
 8003a2a:	3240      	adds	r2, #64	; 0x40
 8003a2c:	8812      	ldrh	r2, [r2, #0]
 8003a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 81be 	beq.w	8003db8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3354      	adds	r3, #84	; 0x54
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	f083 0301 	eor.w	r3, r3, #1
 8003a50:	b2d8      	uxtb	r0, r3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3354      	adds	r3, #84	; 0x54
 8003a60:	4602      	mov	r2, r0
 8003a62:	701a      	strb	r2, [r3, #0]
}
 8003a64:	e1a8      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	212c      	movs	r1, #44	; 0x2c
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3354      	adds	r3, #84	; 0x54
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	f083 0301 	eor.w	r3, r3, #1
 8003a7a:	b2d8      	uxtb	r0, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3354      	adds	r3, #84	; 0x54
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	701a      	strb	r2, [r3, #0]
}
 8003a8e:	e193      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	f040 8106 	bne.w	8003cb4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	0151      	lsls	r1, r2, #5
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	440a      	add	r2, r1
 8003abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3361      	adds	r3, #97	; 0x61
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d109      	bne.n	8003af0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3360      	adds	r3, #96	; 0x60
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e0c9      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3361      	adds	r3, #97	; 0x61
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d109      	bne.n	8003b18 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	2205      	movs	r2, #5
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e0b5      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3361      	adds	r3, #97	; 0x61
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b06      	cmp	r3, #6
 8003b2a:	d009      	beq.n	8003b40 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3361      	adds	r3, #97	; 0x61
 8003b3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d150      	bne.n	8003be2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	335c      	adds	r3, #92	; 0x5c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	202c      	movs	r0, #44	; 0x2c
 8003b58:	fb00 f303 	mul.w	r3, r0, r3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	335c      	adds	r3, #92	; 0x5c
 8003b60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	335c      	adds	r3, #92	; 0x5c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d912      	bls.n	8003b9c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	335c      	adds	r3, #92	; 0x5c
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3360      	adds	r3, #96	; 0x60
 8003b96:	2204      	movs	r2, #4
 8003b98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b9a:	e073      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3360      	adds	r3, #96	; 0x60
 8003baa:	2202      	movs	r2, #2
 8003bac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bc4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003be0:	e050      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3361      	adds	r3, #97	; 0x61
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d122      	bne.n	8003c3c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3360      	adds	r3, #96	; 0x60
 8003c04:	2202      	movs	r2, #2
 8003c06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e023      	b.n	8003c84 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3361      	adds	r3, #97	; 0x61
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d119      	bne.n	8003c84 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	335c      	adds	r3, #92	; 0x5c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	202c      	movs	r0, #44	; 0x2c
 8003c68:	fb00 f303 	mul.w	r3, r0, r3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	335c      	adds	r3, #92	; 0x5c
 8003c70:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3360      	adds	r3, #96	; 0x60
 8003c80:	2204      	movs	r2, #4
 8003c82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	461a      	mov	r2, r3
 8003c92:	2302      	movs	r3, #2
 8003c94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	202c      	movs	r0, #44	; 0x2c
 8003ca0:	fb00 f303 	mul.w	r3, r0, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3360      	adds	r3, #96	; 0x60
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f00a fc35 	bl	800e51c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cb2:	e081      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d176      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	333f      	adds	r3, #63	; 0x3f
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d121      	bne.n	8003d22 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	335c      	adds	r3, #92	; 0x5c
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f005 f875 	bl	8008e0a <USB_HC_Halt>
 8003d20:	e041      	b.n	8003da6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	333f      	adds	r3, #63	; 0x3f
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	333f      	adds	r3, #63	; 0x3f
 8003d44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d12d      	bne.n	8003da6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	335c      	adds	r3, #92	; 0x5c
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3361      	adds	r3, #97	; 0x61
 8003d72:	2203      	movs	r2, #3
 8003d74:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 f832 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	461a      	mov	r2, r3
 8003db4:	2310      	movs	r3, #16
 8003db6:	6093      	str	r3, [r2, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d119      	bne.n	8003e24 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2304      	movs	r3, #4
 8003e00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e22:	e3c6      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d13e      	bne.n	8003eb8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	461a      	mov	r2, r3
 8003e48:	2320      	movs	r3, #32
 8003e4a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	333d      	adds	r3, #61	; 0x3d
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 83a8 	bne.w	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	333d      	adds	r3, #61	; 0x3d
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3360      	adds	r3, #96	; 0x60
 8003e82:	2202      	movs	r2, #2
 8003e84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 ffaa 	bl	8008e0a <USB_HC_Halt>
}
 8003eb6:	e37c      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ece:	d122      	bne.n	8003f16 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 ff85 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f12:	6093      	str	r3, [r2, #8]
}
 8003f14:	e34d      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d150      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	335c      	adds	r3, #92	; 0x5c
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d111      	bne.n	8003f78 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	333d      	adds	r3, #61	; 0x3d
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f72:	461a      	mov	r2, r3
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f92:	f043 0302 	orr.w	r3, r3, #2
 8003f96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 ff31 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3361      	adds	r3, #97	; 0x61
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
}
 8003fcc:	e2f1      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d13c      	bne.n	800405e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3361      	adds	r3, #97	; 0x61
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	212c      	movs	r1, #44	; 0x2c
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	333d      	adds	r3, #61	; 0x3d
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	212c      	movs	r1, #44	; 0x2c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	335c      	adds	r3, #92	; 0x5c
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	440a      	add	r2, r1
 8004030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f004 fee0 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	6093      	str	r3, [r2, #8]
}
 800405c:	e2a9      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d12a      	bne.n	80040ca <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	461a      	mov	r2, r3
 8004082:	2308      	movs	r3, #8
 8004084:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	440a      	add	r2, r1
 800409c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 feaa 	bl	8008e0a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	3361      	adds	r3, #97	; 0x61
 80040c4:	2205      	movs	r2, #5
 80040c6:	701a      	strb	r2, [r3, #0]
}
 80040c8:	e273      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d150      	bne.n	8004182 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	335c      	adds	r3, #92	; 0x5c
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3361      	adds	r3, #97	; 0x61
 8004100:	2203      	movs	r2, #3
 8004102:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	333d      	adds	r3, #61	; 0x3d
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d112      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	333c      	adds	r3, #60	; 0x3c
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d108      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	333d      	adds	r3, #61	; 0x3d
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	440a      	add	r2, r1
 8004154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f004 fe4e 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	461a      	mov	r2, r3
 800417c:	2310      	movs	r3, #16
 800417e:	6093      	str	r3, [r2, #8]
}
 8004180:	e217      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d174      	bne.n	8004282 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d121      	bne.n	80041e4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	3361      	adds	r3, #97	; 0x61
 80041ae:	2206      	movs	r2, #6
 80041b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f004 fe14 	bl	8008e0a <USB_HC_Halt>
 80041e2:	e044      	b.n	800426e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	335c      	adds	r3, #92	; 0x5c
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	202c      	movs	r0, #44	; 0x2c
 80041fc:	fb00 f303 	mul.w	r3, r0, r3
 8004200:	440b      	add	r3, r1
 8004202:	335c      	adds	r3, #92	; 0x5c
 8004204:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	212c      	movs	r1, #44	; 0x2c
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	4413      	add	r3, r2
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d920      	bls.n	800425c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	335c      	adds	r3, #92	; 0x5c
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	3360      	adds	r3, #96	; 0x60
 800423a:	2204      	movs	r2, #4
 800423c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	b2d9      	uxtb	r1, r3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	202c      	movs	r0, #44	; 0x2c
 8004248:	fb00 f303 	mul.w	r3, r0, r3
 800424c:	4413      	add	r3, r2
 800424e:	3360      	adds	r3, #96	; 0x60
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f00a f961 	bl	800e51c <HAL_HCD_HC_NotifyURBChange_Callback>
 800425a:	e008      	b.n	800426e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3360      	adds	r3, #96	; 0x60
 800426a:	2202      	movs	r2, #2
 800426c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427a:	461a      	mov	r2, r3
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	6093      	str	r3, [r2, #8]
}
 8004280:	e197      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004298:	d134      	bne.n	8004304 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fda0 	bl	8008e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	461a      	mov	r2, r3
 80042d8:	2310      	movs	r3, #16
 80042da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	461a      	mov	r2, r3
 80042ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	3361      	adds	r3, #97	; 0x61
 80042fe:	2208      	movs	r2, #8
 8004300:	701a      	strb	r2, [r3, #0]
}
 8004302:	e156      	b.n	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	f040 814b 	bne.w	80045b2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	440a      	add	r2, r1
 8004332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004336:	f023 0302 	bic.w	r3, r3, #2
 800433a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3361      	adds	r3, #97	; 0x61
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d179      	bne.n	8004444 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	3360      	adds	r3, #96	; 0x60
 800435e:	2201      	movs	r2, #1
 8004360:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	333f      	adds	r3, #63	; 0x3f
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d00a      	beq.n	800438c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	333f      	adds	r3, #63	; 0x3f
 8004384:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004386:	2b03      	cmp	r3, #3
 8004388:	f040 80fc 	bne.w	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d142      	bne.n	800441a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	212c      	movs	r1, #44	; 0x2c
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	4413      	add	r3, r2
 80043a0:	334c      	adds	r3, #76	; 0x4c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80ed 	beq.w	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	334c      	adds	r3, #76	; 0x4c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	202c      	movs	r0, #44	; 0x2c
 80043c0:	fb00 f202 	mul.w	r2, r0, r2
 80043c4:	440a      	add	r2, r1
 80043c6:	3240      	adds	r2, #64	; 0x40
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	3b01      	subs	r3, #1
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	202c      	movs	r0, #44	; 0x2c
 80043d4:	fb00 f202 	mul.w	r2, r0, r2
 80043d8:	440a      	add	r2, r1
 80043da:	3240      	adds	r2, #64	; 0x40
 80043dc:	8812      	ldrh	r2, [r2, #0]
 80043de:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80ca 	beq.w	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	3355      	adds	r3, #85	; 0x55
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f083 0301 	eor.w	r3, r3, #1
 8004404:	b2d8      	uxtb	r0, r3
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3355      	adds	r3, #85	; 0x55
 8004414:	4602      	mov	r2, r0
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e0b4      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3355      	adds	r3, #85	; 0x55
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	f083 0301 	eor.w	r3, r3, #1
 800442e:	b2d8      	uxtb	r0, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3355      	adds	r3, #85	; 0x55
 800443e:	4602      	mov	r2, r0
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e09f      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3361      	adds	r3, #97	; 0x61
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d109      	bne.n	800446c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	3360      	adds	r3, #96	; 0x60
 8004466:	2202      	movs	r2, #2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e08b      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3361      	adds	r3, #97	; 0x61
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d109      	bne.n	8004494 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	3360      	adds	r3, #96	; 0x60
 800448e:	2202      	movs	r2, #2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e077      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	212c      	movs	r1, #44	; 0x2c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	3361      	adds	r3, #97	; 0x61
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d109      	bne.n	80044bc <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	212c      	movs	r1, #44	; 0x2c
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	3360      	adds	r3, #96	; 0x60
 80044b6:	2205      	movs	r2, #5
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e063      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	212c      	movs	r1, #44	; 0x2c
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	3361      	adds	r3, #97	; 0x61
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d009      	beq.n	80044e4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	3361      	adds	r3, #97	; 0x61
 80044de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d14f      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	335c      	adds	r3, #92	; 0x5c
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	202c      	movs	r0, #44	; 0x2c
 80044fc:	fb00 f303 	mul.w	r3, r0, r3
 8004500:	440b      	add	r3, r1
 8004502:	335c      	adds	r3, #92	; 0x5c
 8004504:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	335c      	adds	r3, #92	; 0x5c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d912      	bls.n	8004540 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	335c      	adds	r3, #92	; 0x5c
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	2204      	movs	r2, #4
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e021      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3360      	adds	r3, #96	; 0x60
 800454e:	2202      	movs	r2, #2
 8004550:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004568:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004570:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	461a      	mov	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	461a      	mov	r2, r3
 8004592:	2302      	movs	r3, #2
 8004594:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	b2d9      	uxtb	r1, r3
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	202c      	movs	r0, #44	; 0x2c
 80045a0:	fb00 f303 	mul.w	r3, r0, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	3360      	adds	r3, #96	; 0x60
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f009 ffb5 	bl	800e51c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045b2:	bf00      	nop
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08a      	sub	sp, #40	; 0x28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	0c5b      	lsrs	r3, r3, #17
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d004      	beq.n	8004600 <HCD_RXQLVL_IRQHandler+0x46>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	f000 80a9 	beq.w	8004750 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045fe:	e0aa      	b.n	8004756 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80a6 	beq.w	8004754 <HCD_RXQLVL_IRQHandler+0x19a>
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3344      	adds	r3, #68	; 0x44
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 809b 	beq.w	8004754 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3350      	adds	r3, #80	; 0x50
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	441a      	add	r2, r3
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	202c      	movs	r0, #44	; 0x2c
 8004638:	fb00 f303 	mul.w	r3, r0, r3
 800463c:	440b      	add	r3, r1
 800463e:	334c      	adds	r3, #76	; 0x4c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d87a      	bhi.n	800473c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3344      	adds	r3, #68	; 0x44
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	b292      	uxth	r2, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f003 ff71 	bl	8008546 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3344      	adds	r3, #68	; 0x44
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	441a      	add	r2, r3
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	202c      	movs	r0, #44	; 0x2c
 800467e:	fb00 f303 	mul.w	r3, r0, r3
 8004682:	440b      	add	r3, r1
 8004684:	3344      	adds	r3, #68	; 0x44
 8004686:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3350      	adds	r3, #80	; 0x50
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	441a      	add	r2, r3
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	202c      	movs	r0, #44	; 0x2c
 80046a2:	fb00 f303 	mul.w	r3, r0, r3
 80046a6:	440b      	add	r3, r1
 80046a8:	3350      	adds	r3, #80	; 0x50
 80046aa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	0cdb      	lsrs	r3, r3, #19
 80046bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3340      	adds	r3, #64	; 0x40
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d13c      	bne.n	8004754 <HCD_RXQLVL_IRQHandler+0x19a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d039      	beq.n	8004754 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	4413      	add	r3, r2
 8004708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	3354      	adds	r3, #84	; 0x54
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f083 0301 	eor.w	r3, r3, #1
 8004726:	b2d8      	uxtb	r0, r3
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3354      	adds	r3, #84	; 0x54
 8004736:	4602      	mov	r2, r0
 8004738:	701a      	strb	r2, [r3, #0]
      break;
 800473a:	e00b      	b.n	8004754 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3360      	adds	r3, #96	; 0x60
 800474a:	2204      	movs	r2, #4
 800474c:	701a      	strb	r2, [r3, #0]
      break;
 800474e:	e001      	b.n	8004754 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004754:	bf00      	nop
  }
}
 8004756:	bf00      	nop
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800478a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d10b      	bne.n	80047ae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f009 fe9f 	bl	800e4e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d132      	bne.n	800481e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f043 0308 	orr.w	r3, r3, #8
 80047be:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d126      	bne.n	8004818 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d113      	bne.n	80047fa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047dc:	d106      	bne.n	80047ec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 ffe9 	bl	80087bc <USB_InitFSLSPClkSel>
 80047ea:	e011      	b.n	8004810 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2101      	movs	r1, #1
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 ffe2 	bl	80087bc <USB_InitFSLSPClkSel>
 80047f8:	e00a      	b.n	8004810 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d106      	bne.n	8004810 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004808:	461a      	mov	r2, r3
 800480a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800480e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f009 fe95 	bl	800e540 <HAL_HCD_PortEnabled_Callback>
 8004816:	e002      	b.n	800481e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f009 fe9f 	bl	800e55c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b20      	cmp	r3, #32
 8004826:	d103      	bne.n	8004830 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f043 0320 	orr.w	r3, r3, #32
 800482e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e12b      	b.n	8004aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fc4e 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a8:	f002 fb26 	bl	8006ef8 <HAL_RCC_GetPCLK1Freq>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4a81      	ldr	r2, [pc, #516]	; (8004ab8 <HAL_I2C_Init+0x274>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d807      	bhi.n	80048c8 <HAL_I2C_Init+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a80      	ldr	r2, [pc, #512]	; (8004abc <HAL_I2C_Init+0x278>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e006      	b.n	80048d6 <HAL_I2C_Init+0x92>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a7d      	ldr	r2, [pc, #500]	; (8004ac0 <HAL_I2C_Init+0x27c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf94      	ite	ls
 80048d0:	2301      	movls	r3, #1
 80048d2:	2300      	movhi	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0e7      	b.n	8004aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a78      	ldr	r2, [pc, #480]	; (8004ac4 <HAL_I2C_Init+0x280>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	0c9b      	lsrs	r3, r3, #18
 80048e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a6a      	ldr	r2, [pc, #424]	; (8004ab8 <HAL_I2C_Init+0x274>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d802      	bhi.n	8004918 <HAL_I2C_Init+0xd4>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3301      	adds	r3, #1
 8004916:	e009      	b.n	800492c <HAL_I2C_Init+0xe8>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	4a69      	ldr	r2, [pc, #420]	; (8004ac8 <HAL_I2C_Init+0x284>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	3301      	adds	r3, #1
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	430b      	orrs	r3, r1
 8004932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800493e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	495c      	ldr	r1, [pc, #368]	; (8004ab8 <HAL_I2C_Init+0x274>)
 8004948:	428b      	cmp	r3, r1
 800494a:	d819      	bhi.n	8004980 <HAL_I2C_Init+0x13c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1e59      	subs	r1, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fbb1 f3f3 	udiv	r3, r1, r3
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004960:	400b      	ands	r3, r1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_I2C_Init+0x138>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1e59      	subs	r1, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fbb1 f3f3 	udiv	r3, r1, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497a:	e051      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 800497c:	2304      	movs	r3, #4
 800497e:	e04f      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d111      	bne.n	80049ac <HAL_I2C_Init+0x168>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	440b      	add	r3, r1
 8004996:	fbb0 f3f3 	udiv	r3, r0, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e012      	b.n	80049d2 <HAL_I2C_Init+0x18e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e58      	subs	r0, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	0099      	lsls	r1, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Init+0x196>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e022      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10e      	bne.n	8004a00 <HAL_I2C_Init+0x1bc>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1e58      	subs	r0, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	440b      	add	r3, r1
 80049f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	e00f      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1e58      	subs	r0, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	0099      	lsls	r1, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	6809      	ldr	r1, [r1, #0]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6911      	ldr	r1, [r2, #16]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68d2      	ldr	r2, [r2, #12]
 8004a5a:	4311      	orrs	r1, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	000186a0 	.word	0x000186a0
 8004abc:	001e847f 	.word	0x001e847f
 8004ac0:	003d08ff 	.word	0x003d08ff
 8004ac4:	431bde83 	.word	0x431bde83
 8004ac8:	10624dd3 	.word	0x10624dd3

08004acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	460b      	mov	r3, r1
 8004ada:	817b      	strh	r3, [r7, #10]
 8004adc:	4613      	mov	r3, r2
 8004ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae0:	f7fd fdf2 	bl	80026c8 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	f040 80e0 	bne.w	8004cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2319      	movs	r3, #25
 8004afa:	2201      	movs	r2, #1
 8004afc:	4970      	ldr	r1, [pc, #448]	; (8004cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 ff30 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e0d3      	b.n	8004cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_I2C_Master_Transmit+0x50>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e0cc      	b.n	8004cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d007      	beq.n	8004b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2221      	movs	r2, #33	; 0x21
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	893a      	ldrh	r2, [r7, #8]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a50      	ldr	r2, [pc, #320]	; (8004cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b84:	8979      	ldrh	r1, [r7, #10]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fcea 	bl	8005564 <I2C_MasterRequestWrite>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e08d      	b.n	8004cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bb0:	e066      	b.n	8004c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	6a39      	ldr	r1, [r7, #32]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 ffaa 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d107      	bne.n	8004bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e06b      	b.n	8004cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d11b      	bne.n	8004c54 <HAL_I2C_Master_Transmit+0x188>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d017      	beq.n	8004c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	6a39      	ldr	r1, [r7, #32]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 ff9a 	bl	8005b92 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00d      	beq.n	8004c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d107      	bne.n	8004c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e01a      	b.n	8004cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d194      	bne.n	8004bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e000      	b.n	8004cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	00100002 	.word	0x00100002
 8004cc4:	ffff0000 	.word	0xffff0000

08004cc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	813b      	strh	r3, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ce2:	f7fd fcf1 	bl	80026c8 <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	f040 80d9 	bne.w	8004ea8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2319      	movs	r3, #25
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	496d      	ldr	r1, [pc, #436]	; (8004eb4 <HAL_I2C_Mem_Write+0x1ec>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fe2f 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0cc      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_I2C_Mem_Write+0x56>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0c5      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d007      	beq.n	8004d44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2221      	movs	r2, #33	; 0x21
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2240      	movs	r2, #64	; 0x40
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a4d      	ldr	r2, [pc, #308]	; (8004eb8 <HAL_I2C_Mem_Write+0x1f0>)
 8004d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d86:	88f8      	ldrh	r0, [r7, #6]
 8004d88:	893a      	ldrh	r2, [r7, #8]
 8004d8a:	8979      	ldrh	r1, [r7, #10]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4603      	mov	r3, r0
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fc66 	bl	8005668 <I2C_RequestMemoryWrite>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d052      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e081      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 feb0 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e06b      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d11b      	bne.n	8004e48 <HAL_I2C_Mem_Write+0x180>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d017      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1aa      	bne.n	8004da6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fe9c 	bl	8005b92 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d107      	bne.n	8004e78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e016      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	00100002 	.word	0x00100002
 8004eb8:	ffff0000 	.word	0xffff0000

08004ebc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	; 0x30
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	817b      	strh	r3, [r7, #10]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	813b      	strh	r3, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ed6:	f7fd fbf7 	bl	80026c8 <HAL_GetTick>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	f040 8208 	bne.w	80052fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2319      	movs	r3, #25
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	497b      	ldr	r1, [pc, #492]	; (80050e0 <HAL_I2C_Mem_Read+0x224>)
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fd35 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
 8004f02:	e1fb      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_I2C_Mem_Read+0x56>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e1f4      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d007      	beq.n	8004f38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2222      	movs	r2, #34	; 0x22
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2240      	movs	r2, #64	; 0x40
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a5b      	ldr	r2, [pc, #364]	; (80050e4 <HAL_I2C_Mem_Read+0x228>)
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f7a:	88f8      	ldrh	r0, [r7, #6]
 8004f7c:	893a      	ldrh	r2, [r7, #8]
 8004f7e:	8979      	ldrh	r1, [r7, #10]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4603      	mov	r3, r0
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fc02 	bl	8005794 <I2C_RequestMemoryRead>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1b0      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d113      	bne.n	8004fca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e184      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11b      	bne.n	800500a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e164      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	2b02      	cmp	r3, #2
 8005010:	d11b      	bne.n	800504a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005020:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	e144      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005060:	e138      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005066:	2b03      	cmp	r3, #3
 8005068:	f200 80f1 	bhi.w	800524e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	2b01      	cmp	r3, #1
 8005072:	d123      	bne.n	80050bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fdcb 	bl	8005c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e139      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ba:	e10b      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d14e      	bne.n	8005162 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	2200      	movs	r2, #0
 80050cc:	4906      	ldr	r1, [pc, #24]	; (80050e8 <HAL_I2C_Mem_Read+0x22c>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fc48 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e10e      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
 80050de:	bf00      	nop
 80050e0:	00100002 	.word	0x00100002
 80050e4:	ffff0000 	.word	0xffff0000
 80050e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005160:	e0b8      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	2200      	movs	r2, #0
 800516a:	4966      	ldr	r1, [pc, #408]	; (8005304 <HAL_I2C_Mem_Read+0x448>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fbf9 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0bf      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	2200      	movs	r2, #0
 80051c6:	494f      	ldr	r1, [pc, #316]	; (8005304 <HAL_I2C_Mem_Read+0x448>)
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fbcb 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e091      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800524c:	e042      	b.n	80052d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800524e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fcde 	bl	8005c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e04c      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d118      	bne.n	80052d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f47f aec2 	bne.w	8005062 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e000      	b.n	80052fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3728      	adds	r7, #40	; 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	00010004 	.word	0x00010004

08005308 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	460b      	mov	r3, r1
 8005316:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005318:	f7fd f9d6 	bl	80026c8 <HAL_GetTick>
 800531c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800531e:	2301      	movs	r3, #1
 8005320:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b20      	cmp	r3, #32
 800532c:	f040 8111 	bne.w	8005552 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2319      	movs	r3, #25
 8005336:	2201      	movs	r2, #1
 8005338:	4988      	ldr	r1, [pc, #544]	; (800555c <HAL_I2C_IsDeviceReady+0x254>)
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fb12 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005346:	2302      	movs	r3, #2
 8005348:	e104      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_I2C_IsDeviceReady+0x50>
 8005354:	2302      	movs	r3, #2
 8005356:	e0fd      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d007      	beq.n	800537e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800538c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2224      	movs	r2, #36	; 0x24
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a70      	ldr	r2, [pc, #448]	; (8005560 <HAL_I2C_IsDeviceReady+0x258>)
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fad0 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d8:	d103      	bne.n	80053e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0b6      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053e6:	897b      	ldrh	r3, [r7, #10]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fd f967 	bl	80026c8 <HAL_GetTick>
 80053fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800542a:	e025      	b.n	8005478 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fd f94c 	bl	80026c8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <HAL_I2C_IsDeviceReady+0x13a>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	22a0      	movs	r2, #160	; 0xa0
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b02      	cmp	r3, #2
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2ba0      	cmp	r3, #160	; 0xa0
 8005482:	d005      	beq.n	8005490 <HAL_I2C_IsDeviceReady+0x188>
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <HAL_I2C_IsDeviceReady+0x188>
 800548a:	7dbb      	ldrb	r3, [r7, #22]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0cd      	beq.n	800542c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d129      	bne.n	80054fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2319      	movs	r3, #25
 80054d2:	2201      	movs	r2, #1
 80054d4:	4921      	ldr	r1, [pc, #132]	; (800555c <HAL_I2C_IsDeviceReady+0x254>)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fa44 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e036      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e02c      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005512:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2319      	movs	r3, #25
 800551a:	2201      	movs	r2, #1
 800551c:	490f      	ldr	r1, [pc, #60]	; (800555c <HAL_I2C_IsDeviceReady+0x254>)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fa20 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e012      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	3301      	adds	r3, #1
 8005532:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	f4ff af32 	bcc.w	80053a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005552:	2302      	movs	r3, #2
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	00100002 	.word	0x00100002
 8005560:	ffff0000 	.word	0xffff0000

08005564 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	460b      	mov	r3, r1
 8005572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d006      	beq.n	800558e <I2C_MasterRequestWrite+0x2a>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d003      	beq.n	800558e <I2C_MasterRequestWrite+0x2a>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800558c:	d108      	bne.n	80055a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	e00b      	b.n	80055b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b12      	cmp	r3, #18
 80055a6:	d107      	bne.n	80055b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f9cd 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055de:	d103      	bne.n	80055e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e035      	b.n	8005658 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f4:	d108      	bne.n	8005608 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055f6:	897b      	ldrh	r3, [r7, #10]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005604:	611a      	str	r2, [r3, #16]
 8005606:	e01b      	b.n	8005640 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005608:	897b      	ldrh	r3, [r7, #10]
 800560a:	11db      	asrs	r3, r3, #7
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 0306 	and.w	r3, r3, #6
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f063 030f 	orn	r3, r3, #15
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	490e      	ldr	r1, [pc, #56]	; (8005660 <I2C_MasterRequestWrite+0xfc>)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f9f3 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e010      	b.n	8005658 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005636:	897b      	ldrh	r3, [r7, #10]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4907      	ldr	r1, [pc, #28]	; (8005664 <I2C_MasterRequestWrite+0x100>)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f9e3 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	00010008 	.word	0x00010008
 8005664:	00010002 	.word	0x00010002

08005668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4603      	mov	r3, r0
 8005678:	817b      	strh	r3, [r7, #10]
 800567a:	460b      	mov	r3, r1
 800567c:	813b      	strh	r3, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2200      	movs	r2, #0
 800569a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f960 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b8:	d103      	bne.n	80056c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e05f      	b.n	8005786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c6:	897b      	ldrh	r3, [r7, #10]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	6a3a      	ldr	r2, [r7, #32]
 80056da:	492d      	ldr	r1, [pc, #180]	; (8005790 <I2C_RequestMemoryWrite+0x128>)
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f998 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e04c      	b.n	8005786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005704:	6a39      	ldr	r1, [r7, #32]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fa02 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	2b04      	cmp	r3, #4
 8005718:	d107      	bne.n	800572a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e02b      	b.n	8005786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005734:	893b      	ldrh	r3, [r7, #8]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	611a      	str	r2, [r3, #16]
 800573e:	e021      	b.n	8005784 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005740:	893b      	ldrh	r3, [r7, #8]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	b29b      	uxth	r3, r3
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	6a39      	ldr	r1, [r7, #32]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f9dc 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b04      	cmp	r3, #4
 8005764:	d107      	bne.n	8005776 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e005      	b.n	8005786 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800577a:	893b      	ldrh	r3, [r7, #8]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	00010002 	.word	0x00010002

08005794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	4603      	mov	r3, r0
 80057a4:	817b      	strh	r3, [r7, #10]
 80057a6:	460b      	mov	r3, r1
 80057a8:	813b      	strh	r3, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f8c2 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f4:	d103      	bne.n	80057fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0aa      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005802:	897b      	ldrh	r3, [r7, #10]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	4952      	ldr	r1, [pc, #328]	; (8005960 <I2C_RequestMemoryRead+0x1cc>)
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f8fa 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e097      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	6a39      	ldr	r1, [r7, #32]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f964 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	2b04      	cmp	r3, #4
 8005854:	d107      	bne.n	8005866 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e076      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005870:	893b      	ldrh	r3, [r7, #8]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	611a      	str	r2, [r3, #16]
 800587a:	e021      	b.n	80058c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800587c:	893b      	ldrh	r3, [r7, #8]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	b29b      	uxth	r3, r3
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	6a39      	ldr	r1, [r7, #32]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f93e 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00d      	beq.n	80058b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d107      	bne.n	80058b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e050      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b6:	893b      	ldrh	r3, [r7, #8]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	6a39      	ldr	r1, [r7, #32]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f923 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00d      	beq.n	80058ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d107      	bne.n	80058e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e035      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2200      	movs	r2, #0
 8005904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f82b 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005922:	d103      	bne.n	800592c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e013      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005930:	897b      	ldrh	r3, [r7, #10]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	b2da      	uxtb	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	6a3a      	ldr	r2, [r7, #32]
 8005944:	4906      	ldr	r1, [pc, #24]	; (8005960 <I2C_RequestMemoryRead+0x1cc>)
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f863 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	00010002 	.word	0x00010002

08005964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005974:	e025      	b.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597c:	d021      	beq.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fc fea3 	bl	80026c8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d116      	bne.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e023      	b.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10d      	bne.n	80059e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	43da      	mvns	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf0c      	ite	eq
 80059de:	2301      	moveq	r3, #1
 80059e0:	2300      	movne	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	e00c      	b.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf0c      	ite	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	2300      	movne	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d0b6      	beq.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a20:	e051      	b.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d123      	bne.n	8005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f043 0204 	orr.w	r2, r3, #4
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e046      	b.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a80:	d021      	beq.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fc fe21 	bl	80026c8 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d116      	bne.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e020      	b.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10c      	bne.n	8005aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e00b      	b.n	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	43da      	mvns	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d18d      	bne.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b1c:	e02d      	b.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f8ce 	bl	8005cc0 <I2C_IsAcknowledgeFailed>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e02d      	b.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b34:	d021      	beq.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fc fdc7 	bl	80026c8 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d116      	bne.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e007      	b.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d1ca      	bne.n	8005b1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b9e:	e02d      	b.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f88d 	bl	8005cc0 <I2C_IsAcknowledgeFailed>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e02d      	b.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb6:	d021      	beq.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb8:	f7fc fd86 	bl	80026c8 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d116      	bne.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e007      	b.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d1ca      	bne.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c20:	e042      	b.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d119      	bne.n	8005c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0210 	mvn.w	r2, #16
 8005c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e029      	b.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c64:	f7fc fd30 	bl	80026c8 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d302      	bcc.n	8005c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d116      	bne.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e007      	b.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d1b5      	bne.n	8005c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd6:	d11b      	bne.n	8005d10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ce0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0204 	orr.w	r2, r3, #4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e128      	b.n	8005f84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a90      	ldr	r2, [pc, #576]	; (8005f8c <HAL_I2S_Init+0x26c>)
 8005d4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fc fa7d 	bl	800224c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d68:	f023 030f 	bic.w	r3, r3, #15
 8005d6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2202      	movs	r2, #2
 8005d74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d060      	beq.n	8005e40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d86:	2310      	movs	r3, #16
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e001      	b.n	8005d90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d8c:	2320      	movs	r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d802      	bhi.n	8005d9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d9e:	2001      	movs	r0, #1
 8005da0:	f001 f9e6 	bl	8007170 <HAL_RCCEx_GetPeriphCLKFreq>
 8005da4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dae:	d125      	bne.n	8005dfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d010      	beq.n	8005dda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	461a      	mov	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	3305      	adds	r3, #5
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e01f      	b.n	8005e1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	3305      	adds	r3, #5
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	e00e      	b.n	8005e1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	3305      	adds	r3, #5
 8005e18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4a5c      	ldr	r2, [pc, #368]	; (8005f90 <HAL_I2S_Init+0x270>)
 8005e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e22:	08db      	lsrs	r3, r3, #3
 8005e24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	e003      	b.n	8005e48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005e40:	2302      	movs	r3, #2
 8005e42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d902      	bls.n	8005e54 <HAL_I2S_Init+0x134>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2bff      	cmp	r3, #255	; 0xff
 8005e52:	d907      	bls.n	8005e64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	f043 0210 	orr.w	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e08f      	b.n	8005f84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	ea42 0103 	orr.w	r1, r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e82:	f023 030f 	bic.w	r3, r3, #15
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6851      	ldr	r1, [r2, #4]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6892      	ldr	r2, [r2, #8]
 8005e8e:	4311      	orrs	r1, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	68d2      	ldr	r2, [r2, #12]
 8005e94:	4311      	orrs	r1, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6992      	ldr	r2, [r2, #24]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d161      	bne.n	8005f74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a38      	ldr	r2, [pc, #224]	; (8005f94 <HAL_I2S_Init+0x274>)
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a37      	ldr	r2, [pc, #220]	; (8005f98 <HAL_I2S_Init+0x278>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d101      	bne.n	8005ec4 <HAL_I2S_Init+0x1a4>
 8005ec0:	4b36      	ldr	r3, [pc, #216]	; (8005f9c <HAL_I2S_Init+0x27c>)
 8005ec2:	e001      	b.n	8005ec8 <HAL_I2S_Init+0x1a8>
 8005ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	4932      	ldr	r1, [pc, #200]	; (8005f98 <HAL_I2S_Init+0x278>)
 8005ed0:	428a      	cmp	r2, r1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_I2S_Init+0x1b8>
 8005ed4:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <HAL_I2S_Init+0x27c>)
 8005ed6:	e001      	b.n	8005edc <HAL_I2S_Init+0x1bc>
 8005ed8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005edc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ee0:	f023 030f 	bic.w	r3, r3, #15
 8005ee4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <HAL_I2S_Init+0x278>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d101      	bne.n	8005ef4 <HAL_I2S_Init+0x1d4>
 8005ef0:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <HAL_I2S_Init+0x27c>)
 8005ef2:	e001      	b.n	8005ef8 <HAL_I2S_Init+0x1d8>
 8005ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef8:	2202      	movs	r2, #2
 8005efa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <HAL_I2S_Init+0x278>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d101      	bne.n	8005f0a <HAL_I2S_Init+0x1ea>
 8005f06:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <HAL_I2S_Init+0x27c>)
 8005f08:	e001      	b.n	8005f0e <HAL_I2S_Init+0x1ee>
 8005f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1a:	d003      	beq.n	8005f24 <HAL_I2S_Init+0x204>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	e001      	b.n	8005f30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f44:	4313      	orrs	r3, r2
 8005f46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	897b      	ldrh	r3, [r7, #10]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <HAL_I2S_Init+0x278>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d101      	bne.n	8005f6c <HAL_I2S_Init+0x24c>
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <HAL_I2S_Init+0x27c>)
 8005f6a:	e001      	b.n	8005f70 <HAL_I2S_Init+0x250>
 8005f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f70:	897a      	ldrh	r2, [r7, #10]
 8005f72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08006097 	.word	0x08006097
 8005f90:	cccccccd 	.word	0xcccccccd
 8005f94:	080061ad 	.word	0x080061ad
 8005f98:	40003800 	.word	0x40003800
 8005f9c:	40003400 	.word	0x40003400

08005fa0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	881a      	ldrh	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	1c9a      	adds	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10e      	bne.n	8006030 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006020:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffb8 	bl	8005fa0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	b292      	uxth	r2, r2
 800604c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10e      	bne.n	800608e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800607e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ff93 	bl	8005fb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d13a      	bne.n	8006128 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d109      	bne.n	80060d0 <I2S_IRQHandler+0x3a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d102      	bne.n	80060d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ffb4 	bl	8006038 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d126      	bne.n	8006128 <I2S_IRQHandler+0x92>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d11f      	bne.n	8006128 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ff50 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b03      	cmp	r3, #3
 8006132:	d136      	bne.n	80061a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d109      	bne.n	8006152 <I2S_IRQHandler+0xbc>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d102      	bne.n	8006152 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff ff45 	bl	8005fdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b08      	cmp	r3, #8
 800615a:	d122      	bne.n	80061a2 <I2S_IRQHandler+0x10c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d11b      	bne.n	80061a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006178:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	f043 0204 	orr.w	r2, r3, #4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff13 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4aa2      	ldr	r2, [pc, #648]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80061c6:	4ba2      	ldr	r3, [pc, #648]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061c8:	e001      	b.n	80061ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80061ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a9b      	ldr	r2, [pc, #620]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d101      	bne.n	80061e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80061e4:	4b9a      	ldr	r3, [pc, #616]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061e6:	e001      	b.n	80061ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80061e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f8:	d004      	beq.n	8006204 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 8099 	bne.w	8006336 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d107      	bne.n	800621e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f925 	bl	8006468 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9c8 	bl	80065c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d13a      	bne.n	80062b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d035      	beq.n	80062b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7e      	ldr	r2, [pc, #504]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006256:	4b7e      	ldr	r3, [pc, #504]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006258:	e001      	b.n	800625e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800625a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4979      	ldr	r1, [pc, #484]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006266:	428b      	cmp	r3, r1
 8006268:	d101      	bne.n	800626e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800626a:	4b79      	ldr	r3, [pc, #484]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800626c:	e001      	b.n	8006272 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800626e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006276:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006286:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	f043 0202 	orr.w	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fe88 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b08      	cmp	r3, #8
 80062c0:	f040 80be 	bne.w	8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80b8 	beq.w	8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a59      	ldr	r2, [pc, #356]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80062ea:	4b59      	ldr	r3, [pc, #356]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062ec:	e001      	b.n	80062f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80062ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4954      	ldr	r1, [pc, #336]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062fa:	428b      	cmp	r3, r1
 80062fc:	d101      	bne.n	8006302 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80062fe:	4b54      	ldr	r3, [pc, #336]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006300:	e001      	b.n	8006306 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006306:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800630a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800630c:	2300      	movs	r3, #0
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	60bb      	str	r3, [r7, #8]
 8006318:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	f043 0204 	orr.w	r2, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff fe4a 	bl	8005fc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006334:	e084      	b.n	8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d107      	bne.n	8006350 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8be 	bl	80064cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d107      	bne.n	800636a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8fd 	bl	8006564 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d12f      	bne.n	80063d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d02a      	beq.n	80063d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800638c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2e      	ldr	r2, [pc, #184]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d101      	bne.n	800639c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006398:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800639a:	e001      	b.n	80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800639c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4929      	ldr	r1, [pc, #164]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063a8:	428b      	cmp	r3, r1
 80063aa:	d101      	bne.n	80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80063ac:	4b28      	ldr	r3, [pc, #160]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063ae:	e001      	b.n	80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80063b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f043 0202 	orr.w	r2, r3, #2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fdfa 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d131      	bne.n	8006442 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02c      	beq.n	8006442 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a17      	ldr	r2, [pc, #92]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d101      	bne.n	80063f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063f4:	e001      	b.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80063f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4912      	ldr	r1, [pc, #72]	; (800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006402:	428b      	cmp	r3, r1
 8006404:	d101      	bne.n	800640a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006406:	4b12      	ldr	r3, [pc, #72]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006408:	e001      	b.n	800640e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800640a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800640e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006412:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006422:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	f043 0204 	orr.w	r2, r3, #4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fdc5 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800643e:	e000      	b.n	8006442 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006440:	bf00      	nop
}
 8006442:	bf00      	nop
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40003800 	.word	0x40003800
 8006450:	40003400 	.word	0x40003400

08006454 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c99      	adds	r1, r3, #2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6251      	str	r1, [r2, #36]	; 0x24
 800647a:	881a      	ldrh	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d113      	bne.n	80064c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ffc9 	bl	8006454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	1c99      	adds	r1, r3, #2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6251      	str	r1, [r2, #36]	; 0x24
 80064de:	8819      	ldrh	r1, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <I2SEx_TxISR_I2SExt+0x90>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <I2SEx_TxISR_I2SExt+0x22>
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <I2SEx_TxISR_I2SExt+0x94>)
 80064ec:	e001      	b.n	80064f2 <I2SEx_TxISR_I2SExt+0x26>
 80064ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f2:	460a      	mov	r2, r1
 80064f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d121      	bne.n	8006552 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a12      	ldr	r2, [pc, #72]	; (800655c <I2SEx_TxISR_I2SExt+0x90>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <I2SEx_TxISR_I2SExt+0x50>
 8006518:	4b11      	ldr	r3, [pc, #68]	; (8006560 <I2SEx_TxISR_I2SExt+0x94>)
 800651a:	e001      	b.n	8006520 <I2SEx_TxISR_I2SExt+0x54>
 800651c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	490d      	ldr	r1, [pc, #52]	; (800655c <I2SEx_TxISR_I2SExt+0x90>)
 8006528:	428b      	cmp	r3, r1
 800652a:	d101      	bne.n	8006530 <I2SEx_TxISR_I2SExt+0x64>
 800652c:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <I2SEx_TxISR_I2SExt+0x94>)
 800652e:	e001      	b.n	8006534 <I2SEx_TxISR_I2SExt+0x68>
 8006530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006538:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ff81 	bl	8006454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	40003800 	.word	0x40003800
 8006560:	40003400 	.word	0x40003400

08006564 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68d8      	ldr	r0, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	1c99      	adds	r1, r3, #2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800657c:	b282      	uxth	r2, r0
 800657e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d113      	bne.n	80065c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ff4a 	bl	8006454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <I2SEx_RxISR_I2SExt+0x90>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d101      	bne.n	80065de <I2SEx_RxISR_I2SExt+0x16>
 80065da:	4b20      	ldr	r3, [pc, #128]	; (800665c <I2SEx_RxISR_I2SExt+0x94>)
 80065dc:	e001      	b.n	80065e2 <I2SEx_RxISR_I2SExt+0x1a>
 80065de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e2:	68d8      	ldr	r0, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	1c99      	adds	r1, r3, #2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065ee:	b282      	uxth	r2, r0
 80065f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d121      	bne.n	800664e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a12      	ldr	r2, [pc, #72]	; (8006658 <I2SEx_RxISR_I2SExt+0x90>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <I2SEx_RxISR_I2SExt+0x50>
 8006614:	4b11      	ldr	r3, [pc, #68]	; (800665c <I2SEx_RxISR_I2SExt+0x94>)
 8006616:	e001      	b.n	800661c <I2SEx_RxISR_I2SExt+0x54>
 8006618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	490d      	ldr	r1, [pc, #52]	; (8006658 <I2SEx_RxISR_I2SExt+0x90>)
 8006624:	428b      	cmp	r3, r1
 8006626:	d101      	bne.n	800662c <I2SEx_RxISR_I2SExt+0x64>
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <I2SEx_RxISR_I2SExt+0x94>)
 800662a:	e001      	b.n	8006630 <I2SEx_RxISR_I2SExt+0x68>
 800662c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006634:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff ff03 	bl	8006454 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40003800 	.word	0x40003800
 800665c:	40003400 	.word	0x40003400

08006660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e264      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d075      	beq.n	800676a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800667e:	4ba3      	ldr	r3, [pc, #652]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
 8006686:	2b04      	cmp	r3, #4
 8006688:	d00c      	beq.n	80066a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668a:	4ba0      	ldr	r3, [pc, #640]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006692:	2b08      	cmp	r3, #8
 8006694:	d112      	bne.n	80066bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006696:	4b9d      	ldr	r3, [pc, #628]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a2:	d10b      	bne.n	80066bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a4:	4b99      	ldr	r3, [pc, #612]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d05b      	beq.n	8006768 <HAL_RCC_OscConfig+0x108>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d157      	bne.n	8006768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e23f      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c4:	d106      	bne.n	80066d4 <HAL_RCC_OscConfig+0x74>
 80066c6:	4b91      	ldr	r3, [pc, #580]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a90      	ldr	r2, [pc, #576]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	e01d      	b.n	8006710 <HAL_RCC_OscConfig+0xb0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066dc:	d10c      	bne.n	80066f8 <HAL_RCC_OscConfig+0x98>
 80066de:	4b8b      	ldr	r3, [pc, #556]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a8a      	ldr	r2, [pc, #552]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	4b88      	ldr	r3, [pc, #544]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a87      	ldr	r2, [pc, #540]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	e00b      	b.n	8006710 <HAL_RCC_OscConfig+0xb0>
 80066f8:	4b84      	ldr	r3, [pc, #528]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a83      	ldr	r2, [pc, #524]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80066fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b81      	ldr	r3, [pc, #516]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a80      	ldr	r2, [pc, #512]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 800670a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006718:	f7fb ffd6 	bl	80026c8 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006720:	f7fb ffd2 	bl	80026c8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	; 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e204      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006732:	4b76      	ldr	r3, [pc, #472]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0xc0>
 800673e:	e014      	b.n	800676a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006740:	f7fb ffc2 	bl	80026c8 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006748:	f7fb ffbe 	bl	80026c8 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	; 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e1f0      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675a:	4b6c      	ldr	r3, [pc, #432]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0xe8>
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d063      	beq.n	800683e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006776:	4b65      	ldr	r3, [pc, #404]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006782:	4b62      	ldr	r3, [pc, #392]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800678a:	2b08      	cmp	r3, #8
 800678c:	d11c      	bne.n	80067c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678e:	4b5f      	ldr	r3, [pc, #380]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d116      	bne.n	80067c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800679a:	4b5c      	ldr	r3, [pc, #368]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_RCC_OscConfig+0x152>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d001      	beq.n	80067b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e1c4      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b2:	4b56      	ldr	r3, [pc, #344]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4952      	ldr	r1, [pc, #328]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c6:	e03a      	b.n	800683e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d020      	beq.n	8006812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d0:	4b4f      	ldr	r3, [pc, #316]	; (8006910 <HAL_RCC_OscConfig+0x2b0>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d6:	f7fb ff77 	bl	80026c8 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067de:	f7fb ff73 	bl	80026c8 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e1a5      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f0:	4b46      	ldr	r3, [pc, #280]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067fc:	4b43      	ldr	r3, [pc, #268]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4940      	ldr	r1, [pc, #256]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 800680c:	4313      	orrs	r3, r2
 800680e:	600b      	str	r3, [r1, #0]
 8006810:	e015      	b.n	800683e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006812:	4b3f      	ldr	r3, [pc, #252]	; (8006910 <HAL_RCC_OscConfig+0x2b0>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fb ff56 	bl	80026c8 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006820:	f7fb ff52 	bl	80026c8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e184      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006832:	4b36      	ldr	r3, [pc, #216]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d030      	beq.n	80068ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006852:	4b30      	ldr	r3, [pc, #192]	; (8006914 <HAL_RCC_OscConfig+0x2b4>)
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fb ff36 	bl	80026c8 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006860:	f7fb ff32 	bl	80026c8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e164      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 8006874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x200>
 800687e:	e015      	b.n	80068ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006880:	4b24      	ldr	r3, [pc, #144]	; (8006914 <HAL_RCC_OscConfig+0x2b4>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006886:	f7fb ff1f 	bl	80026c8 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800688e:	f7fb ff1b 	bl	80026c8 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e14d      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a0:	4b1a      	ldr	r3, [pc, #104]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80068a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f0      	bne.n	800688e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80a0 	beq.w	80069fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	4a0e      	ldr	r2, [pc, #56]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80068d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6413      	str	r3, [r2, #64]	; 0x40
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCC_OscConfig+0x2b8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d121      	bne.n	800693a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <HAL_RCC_OscConfig+0x2b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a07      	ldr	r2, [pc, #28]	; (8006918 <HAL_RCC_OscConfig+0x2b8>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006902:	f7fb fee1 	bl	80026c8 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006908:	e011      	b.n	800692e <HAL_RCC_OscConfig+0x2ce>
 800690a:	bf00      	nop
 800690c:	40023800 	.word	0x40023800
 8006910:	42470000 	.word	0x42470000
 8006914:	42470e80 	.word	0x42470e80
 8006918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691c:	f7fb fed4 	bl	80026c8 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e106      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692e:	4b85      	ldr	r3, [pc, #532]	; (8006b44 <HAL_RCC_OscConfig+0x4e4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f0      	beq.n	800691c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x2f0>
 8006942:	4b81      	ldr	r3, [pc, #516]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a80      	ldr	r2, [pc, #512]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
 800694e:	e01c      	b.n	800698a <HAL_RCC_OscConfig+0x32a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d10c      	bne.n	8006972 <HAL_RCC_OscConfig+0x312>
 8006958:	4b7b      	ldr	r3, [pc, #492]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4a7a      	ldr	r2, [pc, #488]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 800695e:	f043 0304 	orr.w	r3, r3, #4
 8006962:	6713      	str	r3, [r2, #112]	; 0x70
 8006964:	4b78      	ldr	r3, [pc, #480]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4a77      	ldr	r2, [pc, #476]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 800696a:	f043 0301 	orr.w	r3, r3, #1
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	e00b      	b.n	800698a <HAL_RCC_OscConfig+0x32a>
 8006972:	4b75      	ldr	r3, [pc, #468]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	4a74      	ldr	r2, [pc, #464]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
 800697e:	4b72      	ldr	r3, [pc, #456]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a71      	ldr	r2, [pc, #452]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006984:	f023 0304 	bic.w	r3, r3, #4
 8006988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d015      	beq.n	80069be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006992:	f7fb fe99 	bl	80026c8 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006998:	e00a      	b.n	80069b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699a:	f7fb fe95 	bl	80026c8 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e0c5      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	4b65      	ldr	r3, [pc, #404]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0ee      	beq.n	800699a <HAL_RCC_OscConfig+0x33a>
 80069bc:	e014      	b.n	80069e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069be:	f7fb fe83 	bl	80026c8 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c4:	e00a      	b.n	80069dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c6:	f7fb fe7f 	bl	80026c8 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e0af      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069dc:	4b5a      	ldr	r3, [pc, #360]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1ee      	bne.n	80069c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d105      	bne.n	80069fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ee:	4b56      	ldr	r3, [pc, #344]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	4a55      	ldr	r2, [pc, #340]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 80069f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 809b 	beq.w	8006b3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a04:	4b50      	ldr	r3, [pc, #320]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f003 030c 	and.w	r3, r3, #12
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d05c      	beq.n	8006aca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d141      	bne.n	8006a9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a18:	4b4c      	ldr	r3, [pc, #304]	; (8006b4c <HAL_RCC_OscConfig+0x4ec>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1e:	f7fb fe53 	bl	80026c8 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a26:	f7fb fe4f 	bl	80026c8 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e081      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a38:	4b43      	ldr	r3, [pc, #268]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f0      	bne.n	8006a26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	019b      	lsls	r3, r3, #6
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	061b      	lsls	r3, r3, #24
 8006a68:	4937      	ldr	r1, [pc, #220]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a6e:	4b37      	ldr	r3, [pc, #220]	; (8006b4c <HAL_RCC_OscConfig+0x4ec>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a74:	f7fb fe28 	bl	80026c8 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a7c:	f7fb fe24 	bl	80026c8 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e056      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a8e:	4b2e      	ldr	r3, [pc, #184]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0x41c>
 8006a9a:	e04e      	b.n	8006b3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_RCC_OscConfig+0x4ec>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa2:	f7fb fe11 	bl	80026c8 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aaa:	f7fb fe0d 	bl	80026c8 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e03f      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006abc:	4b22      	ldr	r3, [pc, #136]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f0      	bne.n	8006aaa <HAL_RCC_OscConfig+0x44a>
 8006ac8:	e037      	b.n	8006b3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e032      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ad6:	4b1c      	ldr	r3, [pc, #112]	; (8006b48 <HAL_RCC_OscConfig+0x4e8>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d028      	beq.n	8006b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d121      	bne.n	8006b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d11a      	bne.n	8006b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b06:	4013      	ands	r3, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d111      	bne.n	8006b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d107      	bne.n	8006b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d001      	beq.n	8006b3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40007000 	.word	0x40007000
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	42470060 	.word	0x42470060

08006b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0cc      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b64:	4b68      	ldr	r3, [pc, #416]	; (8006d08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d90c      	bls.n	8006b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b72:	4b65      	ldr	r3, [pc, #404]	; (8006d08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b63      	ldr	r3, [pc, #396]	; (8006d08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0b8      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d020      	beq.n	8006bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba4:	4b59      	ldr	r3, [pc, #356]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	4a58      	ldr	r2, [pc, #352]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bbc:	4b53      	ldr	r3, [pc, #332]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4a52      	ldr	r2, [pc, #328]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc8:	4b50      	ldr	r3, [pc, #320]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	494d      	ldr	r1, [pc, #308]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d044      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d107      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	4b47      	ldr	r3, [pc, #284]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d119      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e07f      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d003      	beq.n	8006c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0e:	4b3f      	ldr	r3, [pc, #252]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e06f      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1e:	4b3b      	ldr	r3, [pc, #236]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e067      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c2e:	4b37      	ldr	r3, [pc, #220]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f023 0203 	bic.w	r2, r3, #3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4934      	ldr	r1, [pc, #208]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c40:	f7fb fd42 	bl	80026c8 <HAL_GetTick>
 8006c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c46:	e00a      	b.n	8006c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c48:	f7fb fd3e 	bl	80026c8 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e04f      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 020c 	and.w	r2, r3, #12
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d1eb      	bne.n	8006c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c70:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <HAL_RCC_ClockConfig+0x1b8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d20c      	bcs.n	8006c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7e:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <HAL_RCC_ClockConfig+0x1b8>)
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c86:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <HAL_RCC_ClockConfig+0x1b8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d001      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e032      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca4:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	4916      	ldr	r1, [pc, #88]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cc2:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	490e      	ldr	r1, [pc, #56]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cd6:	f000 f821 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	490a      	ldr	r1, [pc, #40]	; (8006d10 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce8:	5ccb      	ldrb	r3, [r1, r3]
 8006cea:	fa22 f303 	lsr.w	r3, r2, r3
 8006cee:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fb fba8 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40023c00 	.word	0x40023c00
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	0801052c 	.word	0x0801052c
 8006d14:	20000000 	.word	0x20000000
 8006d18:	20000004 	.word	0x20000004

08006d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d34:	4b67      	ldr	r3, [pc, #412]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d00d      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x40>
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	f200 80bd 	bhi.w	8006ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x34>
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d4e:	e0b7      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d50:	4b61      	ldr	r3, [pc, #388]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d52:	60bb      	str	r3, [r7, #8]
       break;
 8006d54:	e0b7      	b.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d56:	4b61      	ldr	r3, [pc, #388]	; (8006edc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d58:	60bb      	str	r3, [r7, #8]
      break;
 8006d5a:	e0b4      	b.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d5c:	4b5d      	ldr	r3, [pc, #372]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d66:	4b5b      	ldr	r3, [pc, #364]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d04d      	beq.n	8006e0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d72:	4b58      	ldr	r3, [pc, #352]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	099b      	lsrs	r3, r3, #6
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d82:	f04f 0100 	mov.w	r1, #0
 8006d86:	ea02 0800 	and.w	r8, r2, r0
 8006d8a:	ea03 0901 	and.w	r9, r3, r1
 8006d8e:	4640      	mov	r0, r8
 8006d90:	4649      	mov	r1, r9
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	014b      	lsls	r3, r1, #5
 8006d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006da0:	0142      	lsls	r2, r0, #5
 8006da2:	4610      	mov	r0, r2
 8006da4:	4619      	mov	r1, r3
 8006da6:	ebb0 0008 	subs.w	r0, r0, r8
 8006daa:	eb61 0109 	sbc.w	r1, r1, r9
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	018b      	lsls	r3, r1, #6
 8006db8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006dbc:	0182      	lsls	r2, r0, #6
 8006dbe:	1a12      	subs	r2, r2, r0
 8006dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8006dc4:	f04f 0000 	mov.w	r0, #0
 8006dc8:	f04f 0100 	mov.w	r1, #0
 8006dcc:	00d9      	lsls	r1, r3, #3
 8006dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dd2:	00d0      	lsls	r0, r2, #3
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	eb12 0208 	adds.w	r2, r2, r8
 8006ddc:	eb43 0309 	adc.w	r3, r3, r9
 8006de0:	f04f 0000 	mov.w	r0, #0
 8006de4:	f04f 0100 	mov.w	r1, #0
 8006de8:	0259      	lsls	r1, r3, #9
 8006dea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006dee:	0250      	lsls	r0, r2, #9
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	f7f9 feac 	bl	8000b5c <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4613      	mov	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e04a      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e0e:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	099b      	lsrs	r3, r3, #6
 8006e14:	461a      	mov	r2, r3
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e1e:	f04f 0100 	mov.w	r1, #0
 8006e22:	ea02 0400 	and.w	r4, r2, r0
 8006e26:	ea03 0501 	and.w	r5, r3, r1
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	014b      	lsls	r3, r1, #5
 8006e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e3c:	0142      	lsls	r2, r0, #5
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	1b00      	subs	r0, r0, r4
 8006e44:	eb61 0105 	sbc.w	r1, r1, r5
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	018b      	lsls	r3, r1, #6
 8006e52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e56:	0182      	lsls	r2, r0, #6
 8006e58:	1a12      	subs	r2, r2, r0
 8006e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5e:	f04f 0000 	mov.w	r0, #0
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	00d9      	lsls	r1, r3, #3
 8006e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e6c:	00d0      	lsls	r0, r2, #3
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	1912      	adds	r2, r2, r4
 8006e74:	eb45 0303 	adc.w	r3, r5, r3
 8006e78:	f04f 0000 	mov.w	r0, #0
 8006e7c:	f04f 0100 	mov.w	r1, #0
 8006e80:	0299      	lsls	r1, r3, #10
 8006e82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e86:	0290      	lsls	r0, r2, #10
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4619      	mov	r1, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	f7f9 fe60 	bl	8000b5c <__aeabi_uldivmod>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	3301      	adds	r3, #1
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	60bb      	str	r3, [r7, #8]
      break;
 8006ebe:	e002      	b.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ec2:	60bb      	str	r3, [r7, #8]
      break;
 8006ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	00f42400 	.word	0x00f42400
 8006edc:	007a1200 	.word	0x007a1200

08006ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ee4:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000000 	.word	0x20000000

08006ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006efc:	f7ff fff0 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 8006f00:	4602      	mov	r2, r0
 8006f02:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	0a9b      	lsrs	r3, r3, #10
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4903      	ldr	r1, [pc, #12]	; (8006f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f0e:	5ccb      	ldrb	r3, [r1, r3]
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	0801053c 	.word	0x0801053c

08006f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f24:	f7ff ffdc 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	0b5b      	lsrs	r3, r3, #13
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	4903      	ldr	r1, [pc, #12]	; (8006f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f36:	5ccb      	ldrb	r3, [r1, r3]
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40023800 	.word	0x40023800
 8006f44:	0801053c 	.word	0x0801053c

08006f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	220f      	movs	r2, #15
 8006f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f58:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0203 	and.w	r2, r3, #3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	08db      	lsrs	r3, r3, #3
 8006f82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <HAL_RCC_GetClockConfig+0x60>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0207 	and.w	r2, r3, #7
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	601a      	str	r2, [r3, #0]
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40023c00 	.word	0x40023c00

08006fac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d035      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fd4:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fda:	f7fb fb75 	bl	80026c8 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fe2:	f7fb fb71 	bl	80026c8 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e0b0      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	019a      	lsls	r2, r3, #6
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	071b      	lsls	r3, r3, #28
 800700c:	4955      	ldr	r1, [pc, #340]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007014:	4b52      	ldr	r3, [pc, #328]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800701a:	f7fb fb55 	bl	80026c8 <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007020:	e008      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007022:	f7fb fb51 	bl	80026c8 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e090      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007034:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8083 	beq.w	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	4b44      	ldr	r3, [pc, #272]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a43      	ldr	r2, [pc, #268]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b41      	ldr	r3, [pc, #260]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800706a:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a3e      	ldr	r2, [pc, #248]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007074:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007076:	f7fb fb27 	bl	80026c8 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800707e:	f7fb fb23 	bl	80026c8 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e062      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007090:	4b35      	ldr	r3, [pc, #212]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800709c:	4b31      	ldr	r3, [pc, #196]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02f      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d028      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ba:	4b2a      	ldr	r3, [pc, #168]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070c4:	4b29      	ldr	r3, [pc, #164]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070ca:	4b28      	ldr	r3, [pc, #160]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070d0:	4a24      	ldr	r2, [pc, #144]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070d6:	4b23      	ldr	r3, [pc, #140]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d114      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070e2:	f7fb faf1 	bl	80026c8 <HAL_GetTick>
 80070e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e8:	e00a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ea:	f7fb faed 	bl	80026c8 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d901      	bls.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e02a      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007100:	4b18      	ldr	r3, [pc, #96]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0ee      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007118:	d10d      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007130:	4313      	orrs	r3, r2
 8007132:	608b      	str	r3, [r1, #8]
 8007134:	e005      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800713c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007140:	6093      	str	r3, [r2, #8]
 8007142:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714e:	4905      	ldr	r1, [pc, #20]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007150:	4313      	orrs	r3, r2
 8007152:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	42470068 	.word	0x42470068
 8007164:	40023800 	.word	0x40023800
 8007168:	40007000 	.word	0x40007000
 800716c:	42470e40 	.word	0x42470e40

08007170 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d13e      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800718e:	4b23      	ldr	r3, [pc, #140]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d12f      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80071a4:	4b1e      	ldr	r3, [pc, #120]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071a6:	617b      	str	r3, [r7, #20]
          break;
 80071a8:	e02f      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071aa:	4b1c      	ldr	r3, [pc, #112]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b6:	d108      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071b8:	4b18      	ldr	r3, [pc, #96]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c0:	4a18      	ldr	r2, [pc, #96]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	e007      	b.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071ca:	4b14      	ldr	r3, [pc, #80]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e0:	099b      	lsrs	r3, r3, #6
 80071e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	fb02 f303 	mul.w	r3, r2, r3
 80071ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80071ee:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f4:	0f1b      	lsrs	r3, r3, #28
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]
          break;
 8007202:	e002      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
          break;
 8007208:	bf00      	nop
        }
      }
      break;
 800720a:	bf00      	nop
    }
  }
  return frequency;
 800720c:	697b      	ldr	r3, [r7, #20]
}
 800720e:	4618      	mov	r0, r3
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40023800 	.word	0x40023800
 8007220:	00bb8000 	.word	0x00bb8000
 8007224:	007a1200 	.word	0x007a1200
 8007228:	00f42400 	.word	0x00f42400

0800722c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e07b      	b.n	8007336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800724e:	d009      	beq.n	8007264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	61da      	str	r2, [r3, #28]
 8007256:	e005      	b.n	8007264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb f84c 	bl	800231c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e8:	ea42 0103 	orr.w	r1, r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f003 0104 	and.w	r1, r3, #4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f003 0210 	and.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e041      	b.n	80073d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f839 	bl	80073dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f000 f9d7 	bl	8007730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d001      	beq.n	8007408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e04e      	b.n	80074a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0201 	orr.w	r2, r2, #1
 800741e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a23      	ldr	r2, [pc, #140]	; (80074b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d01d      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1f      	ldr	r2, [pc, #124]	; (80074b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1e      	ldr	r2, [pc, #120]	; (80074bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1c      	ldr	r2, [pc, #112]	; (80074c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x80>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a18      	ldr	r2, [pc, #96]	; (80074cc <HAL_TIM_Base_Start_IT+0xdc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d111      	bne.n	8007494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d010      	beq.n	80074a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0201 	orr.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007492:	e007      	b.n	80074a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40010400 	.word	0x40010400
 80074c8:	40014000 	.word	0x40014000
 80074cc:	40001800 	.word	0x40001800

080074d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d122      	bne.n	800752c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d11b      	bne.n	800752c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0202 	mvn.w	r2, #2
 80074fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8ee 	bl	80076f4 <HAL_TIM_IC_CaptureCallback>
 8007518:	e005      	b.n	8007526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8e0 	bl	80076e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8f1 	bl	8007708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b04      	cmp	r3, #4
 8007538:	d122      	bne.n	8007580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b04      	cmp	r3, #4
 8007546:	d11b      	bne.n	8007580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0204 	mvn.w	r2, #4
 8007550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f8c4 	bl	80076f4 <HAL_TIM_IC_CaptureCallback>
 800756c:	e005      	b.n	800757a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8b6 	bl	80076e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8c7 	bl	8007708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b08      	cmp	r3, #8
 800758c:	d122      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b08      	cmp	r3, #8
 800759a:	d11b      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0208 	mvn.w	r2, #8
 80075a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2204      	movs	r2, #4
 80075aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f89a 	bl	80076f4 <HAL_TIM_IC_CaptureCallback>
 80075c0:	e005      	b.n	80075ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f88c 	bl	80076e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f89d 	bl	8007708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d122      	bne.n	8007628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d11b      	bne.n	8007628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0210 	mvn.w	r2, #16
 80075f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2208      	movs	r2, #8
 80075fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f870 	bl	80076f4 <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f862 	bl	80076e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f873 	bl	8007708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b01      	cmp	r3, #1
 8007634:	d10e      	bne.n	8007654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b01      	cmp	r3, #1
 8007642:	d107      	bne.n	8007654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0201 	mvn.w	r2, #1
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fa f88c 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765e:	2b80      	cmp	r3, #128	; 0x80
 8007660:	d10e      	bne.n	8007680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766c:	2b80      	cmp	r3, #128	; 0x80
 800766e:	d107      	bne.n	8007680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f902 	bl	8007884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d10e      	bne.n	80076ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d107      	bne.n	80076ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f838 	bl	800771c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d10e      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d107      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0220 	mvn.w	r2, #32
 80076d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8cc 	bl	8007870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a40      	ldr	r2, [pc, #256]	; (8007844 <TIM_Base_SetConfig+0x114>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d013      	beq.n	8007770 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d00f      	beq.n	8007770 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a3d      	ldr	r2, [pc, #244]	; (8007848 <TIM_Base_SetConfig+0x118>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00b      	beq.n	8007770 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a3c      	ldr	r2, [pc, #240]	; (800784c <TIM_Base_SetConfig+0x11c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d007      	beq.n	8007770 <TIM_Base_SetConfig+0x40>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a3b      	ldr	r2, [pc, #236]	; (8007850 <TIM_Base_SetConfig+0x120>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_Base_SetConfig+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a3a      	ldr	r2, [pc, #232]	; (8007854 <TIM_Base_SetConfig+0x124>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d108      	bne.n	8007782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2f      	ldr	r2, [pc, #188]	; (8007844 <TIM_Base_SetConfig+0x114>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d02b      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007790:	d027      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2c      	ldr	r2, [pc, #176]	; (8007848 <TIM_Base_SetConfig+0x118>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d023      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2b      	ldr	r2, [pc, #172]	; (800784c <TIM_Base_SetConfig+0x11c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01f      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2a      	ldr	r2, [pc, #168]	; (8007850 <TIM_Base_SetConfig+0x120>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01b      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a29      	ldr	r2, [pc, #164]	; (8007854 <TIM_Base_SetConfig+0x124>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d017      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a28      	ldr	r2, [pc, #160]	; (8007858 <TIM_Base_SetConfig+0x128>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d013      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a27      	ldr	r2, [pc, #156]	; (800785c <TIM_Base_SetConfig+0x12c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00f      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a26      	ldr	r2, [pc, #152]	; (8007860 <TIM_Base_SetConfig+0x130>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00b      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a25      	ldr	r2, [pc, #148]	; (8007864 <TIM_Base_SetConfig+0x134>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d007      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a24      	ldr	r2, [pc, #144]	; (8007868 <TIM_Base_SetConfig+0x138>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d003      	beq.n	80077e2 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a23      	ldr	r2, [pc, #140]	; (800786c <TIM_Base_SetConfig+0x13c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d108      	bne.n	80077f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a0a      	ldr	r2, [pc, #40]	; (8007844 <TIM_Base_SetConfig+0x114>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <TIM_Base_SetConfig+0xf8>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <TIM_Base_SetConfig+0x124>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d103      	bne.n	8007830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	615a      	str	r2, [r3, #20]
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40010000 	.word	0x40010000
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40010400 	.word	0x40010400
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800
 8007864:	40001800 	.word	0x40001800
 8007868:	40001c00 	.word	0x40001c00
 800786c:	40002000 	.word	0x40002000

08007870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e03f      	b.n	800792a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fa fd74 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2224      	movs	r2, #36	; 0x24
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb3f 	bl	8007f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695a      	ldr	r2, [r3, #20]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007954:	2300      	movs	r3, #0
 8007956:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10d      	bne.n	8007986 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x52>
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa57 	bl	8007e32 <UART_Receive_IT>
      return;
 8007984:	e17c      	b.n	8007c80 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80b1 	beq.w	8007af0 <HAL_UART_IRQHandler+0x1bc>
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_UART_IRQHandler+0x70>
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80a6 	beq.w	8007af0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <HAL_UART_IRQHandler+0x90>
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f043 0201 	orr.w	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_UART_IRQHandler+0xb0>
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	f043 0202 	orr.w	r2, r3, #2
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_UART_IRQHandler+0xd0>
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	f043 0204 	orr.w	r2, r3, #4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <HAL_UART_IRQHandler+0xfa>
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f003 0320 	and.w	r3, r3, #32
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <HAL_UART_IRQHandler+0xee>
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	f043 0208 	orr.w	r2, r3, #8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 811f 	beq.w	8007c76 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <HAL_UART_IRQHandler+0x11e>
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f9f0 	bl	8007e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f003 0308 	and.w	r3, r3, #8
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <HAL_UART_IRQHandler+0x146>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d031      	beq.n	8007ade <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f930 	bl	8007ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d123      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695a      	ldr	r2, [r3, #20]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d013      	beq.n	8007ace <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	4a77      	ldr	r2, [pc, #476]	; (8007c88 <HAL_UART_IRQHandler+0x354>)
 8007aac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fa ff8a 	bl	80029cc <HAL_DMA_Abort_IT>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007acc:	e00e      	b.n	8007aec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8f0 	bl	8007cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad4:	e00a      	b.n	8007aec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8ec 	bl	8007cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007adc:	e006      	b.n	8007aec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f8e8 	bl	8007cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007aea:	e0c4      	b.n	8007c76 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	bf00      	nop
    return;
 8007aee:	e0c2      	b.n	8007c76 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 80a2 	bne.w	8007c3e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 809c 	beq.w	8007c3e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8096 	beq.w	8007c3e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d14f      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007b40:	8a3b      	ldrh	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 8099 	beq.w	8007c7a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b4c:	8a3a      	ldrh	r2, [r7, #16]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	f080 8093 	bcs.w	8007c7a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8a3a      	ldrh	r2, [r7, #16]
 8007b58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b64:	d02b      	beq.n	8007bbe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b74:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0201 	bic.w	r2, r2, #1
 8007b84:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695a      	ldr	r2, [r3, #20]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b94:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0210 	bic.w	r2, r2, #16
 8007bb2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fa fe97 	bl	80028ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f87a 	bl	8007cc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007bd4:	e051      	b.n	8007c7a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d047      	beq.n	8007c7e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007bee:	8a7b      	ldrh	r3, [r7, #18]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d044      	beq.n	8007c7e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c02:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695a      	ldr	r2, [r3, #20]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0210 	bic.w	r2, r2, #16
 8007c30:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c32:	8a7b      	ldrh	r3, [r7, #18]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f846 	bl	8007cc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c3c:	e01f      	b.n	8007c7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_UART_IRQHandler+0x326>
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f885 	bl	8007d62 <UART_Transmit_IT>
    return;
 8007c58:	e012      	b.n	8007c80 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <HAL_UART_IRQHandler+0x34c>
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d008      	beq.n	8007c80 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c7 	bl	8007e02 <UART_EndTransmit_IT>
    return;
 8007c74:	e004      	b.n	8007c80 <HAL_UART_IRQHandler+0x34c>
    return;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <HAL_UART_IRQHandler+0x34c>
      return;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_UART_IRQHandler+0x34c>
      return;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	3728      	adds	r7, #40	; 0x28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	08007d3b 	.word	0x08007d3b

08007c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d107      	bne.n	8007d20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0210 	bic.w	r2, r2, #16
 8007d1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ffad 	bl	8007cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b21      	cmp	r3, #33	; 0x21
 8007d74:	d13e      	bne.n	8007df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	d114      	bne.n	8007daa <UART_Transmit_IT+0x48>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d110      	bne.n	8007daa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	1c9a      	adds	r2, r3, #2
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	621a      	str	r2, [r3, #32]
 8007da8:	e008      	b.n	8007dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6211      	str	r1, [r2, #32]
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10f      	bne.n	8007df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff32 	bl	8007c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b22      	cmp	r3, #34	; 0x22
 8007e44:	f040 8087 	bne.w	8007f56 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e50:	d117      	bne.n	8007e82 <UART_Receive_IT+0x50>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d113      	bne.n	8007e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e80:	e026      	b.n	8007ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e94:	d007      	beq.n	8007ea6 <UART_Receive_IT+0x74>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10a      	bne.n	8007eb4 <UART_Receive_IT+0x82>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e008      	b.n	8007ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	4619      	mov	r1, r3
 8007ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d136      	bne.n	8007f52 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0220 	bic.w	r2, r2, #32
 8007ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d10e      	bne.n	8007f42 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0210 	bic.w	r2, r2, #16
 8007f32:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fec4 	bl	8007cc8 <HAL_UARTEx_RxEventCallback>
 8007f40:	e002      	b.n	8007f48 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff feac 	bl	8007ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e002      	b.n	8007f58 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	b09f      	sub	sp, #124	; 0x7c
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f76:	68d9      	ldr	r1, [r3, #12]
 8007f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	ea40 0301 	orr.w	r3, r0, r1
 8007f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fa4:	f021 010c 	bic.w	r1, r1, #12
 8007fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbe:	6999      	ldr	r1, [r3, #24]
 8007fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	ea40 0301 	orr.w	r3, r0, r1
 8007fc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	4bc5      	ldr	r3, [pc, #788]	; (80082e4 <UART_SetConfig+0x384>)
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d004      	beq.n	8007fde <UART_SetConfig+0x7e>
 8007fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4bc3      	ldr	r3, [pc, #780]	; (80082e8 <UART_SetConfig+0x388>)
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d103      	bne.n	8007fe6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fde:	f7fe ff9f 	bl	8006f20 <HAL_RCC_GetPCLK2Freq>
 8007fe2:	6778      	str	r0, [r7, #116]	; 0x74
 8007fe4:	e002      	b.n	8007fec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fe ff87 	bl	8006ef8 <HAL_RCC_GetPCLK1Freq>
 8007fea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff4:	f040 80b6 	bne.w	8008164 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ffa:	461c      	mov	r4, r3
 8007ffc:	f04f 0500 	mov.w	r5, #0
 8008000:	4622      	mov	r2, r4
 8008002:	462b      	mov	r3, r5
 8008004:	1891      	adds	r1, r2, r2
 8008006:	6439      	str	r1, [r7, #64]	; 0x40
 8008008:	415b      	adcs	r3, r3
 800800a:	647b      	str	r3, [r7, #68]	; 0x44
 800800c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008010:	1912      	adds	r2, r2, r4
 8008012:	eb45 0303 	adc.w	r3, r5, r3
 8008016:	f04f 0000 	mov.w	r0, #0
 800801a:	f04f 0100 	mov.w	r1, #0
 800801e:	00d9      	lsls	r1, r3, #3
 8008020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008024:	00d0      	lsls	r0, r2, #3
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	1911      	adds	r1, r2, r4
 800802c:	6639      	str	r1, [r7, #96]	; 0x60
 800802e:	416b      	adcs	r3, r5
 8008030:	667b      	str	r3, [r7, #100]	; 0x64
 8008032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	461a      	mov	r2, r3
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	1891      	adds	r1, r2, r2
 800803e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008040:	415b      	adcs	r3, r3
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008048:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800804c:	f7f8 fd86 	bl	8000b5c <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4ba5      	ldr	r3, [pc, #660]	; (80082ec <UART_SetConfig+0x38c>)
 8008056:	fba3 2302 	umull	r2, r3, r3, r2
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	011e      	lsls	r6, r3, #4
 800805e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008060:	461c      	mov	r4, r3
 8008062:	f04f 0500 	mov.w	r5, #0
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	1891      	adds	r1, r2, r2
 800806c:	6339      	str	r1, [r7, #48]	; 0x30
 800806e:	415b      	adcs	r3, r3
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
 8008072:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008076:	1912      	adds	r2, r2, r4
 8008078:	eb45 0303 	adc.w	r3, r5, r3
 800807c:	f04f 0000 	mov.w	r0, #0
 8008080:	f04f 0100 	mov.w	r1, #0
 8008084:	00d9      	lsls	r1, r3, #3
 8008086:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800808a:	00d0      	lsls	r0, r2, #3
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	1911      	adds	r1, r2, r4
 8008092:	65b9      	str	r1, [r7, #88]	; 0x58
 8008094:	416b      	adcs	r3, r5
 8008096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	461a      	mov	r2, r3
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	1891      	adds	r1, r2, r2
 80080a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80080a6:	415b      	adcs	r3, r3
 80080a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80080b2:	f7f8 fd53 	bl	8000b5c <__aeabi_uldivmod>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4b8c      	ldr	r3, [pc, #560]	; (80082ec <UART_SetConfig+0x38c>)
 80080bc:	fba3 1302 	umull	r1, r3, r3, r2
 80080c0:	095b      	lsrs	r3, r3, #5
 80080c2:	2164      	movs	r1, #100	; 0x64
 80080c4:	fb01 f303 	mul.w	r3, r1, r3
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	3332      	adds	r3, #50	; 0x32
 80080ce:	4a87      	ldr	r2, [pc, #540]	; (80082ec <UART_SetConfig+0x38c>)
 80080d0:	fba2 2303 	umull	r2, r3, r2, r3
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080dc:	441e      	add	r6, r3
 80080de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e0:	4618      	mov	r0, r3
 80080e2:	f04f 0100 	mov.w	r1, #0
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	1894      	adds	r4, r2, r2
 80080ec:	623c      	str	r4, [r7, #32]
 80080ee:	415b      	adcs	r3, r3
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
 80080f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080f6:	1812      	adds	r2, r2, r0
 80080f8:	eb41 0303 	adc.w	r3, r1, r3
 80080fc:	f04f 0400 	mov.w	r4, #0
 8008100:	f04f 0500 	mov.w	r5, #0
 8008104:	00dd      	lsls	r5, r3, #3
 8008106:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800810a:	00d4      	lsls	r4, r2, #3
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	1814      	adds	r4, r2, r0
 8008112:	653c      	str	r4, [r7, #80]	; 0x50
 8008114:	414b      	adcs	r3, r1
 8008116:	657b      	str	r3, [r7, #84]	; 0x54
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	461a      	mov	r2, r3
 800811e:	f04f 0300 	mov.w	r3, #0
 8008122:	1891      	adds	r1, r2, r2
 8008124:	61b9      	str	r1, [r7, #24]
 8008126:	415b      	adcs	r3, r3
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800812e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008132:	f7f8 fd13 	bl	8000b5c <__aeabi_uldivmod>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4b6c      	ldr	r3, [pc, #432]	; (80082ec <UART_SetConfig+0x38c>)
 800813c:	fba3 1302 	umull	r1, r3, r3, r2
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	2164      	movs	r1, #100	; 0x64
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	3332      	adds	r3, #50	; 0x32
 800814e:	4a67      	ldr	r2, [pc, #412]	; (80082ec <UART_SetConfig+0x38c>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	f003 0207 	and.w	r2, r3, #7
 800815a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4432      	add	r2, r6
 8008160:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008162:	e0b9      	b.n	80082d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008166:	461c      	mov	r4, r3
 8008168:	f04f 0500 	mov.w	r5, #0
 800816c:	4622      	mov	r2, r4
 800816e:	462b      	mov	r3, r5
 8008170:	1891      	adds	r1, r2, r2
 8008172:	6139      	str	r1, [r7, #16]
 8008174:	415b      	adcs	r3, r3
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800817c:	1912      	adds	r2, r2, r4
 800817e:	eb45 0303 	adc.w	r3, r5, r3
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f04f 0100 	mov.w	r1, #0
 800818a:	00d9      	lsls	r1, r3, #3
 800818c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008190:	00d0      	lsls	r0, r2, #3
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	eb12 0804 	adds.w	r8, r2, r4
 800819a:	eb43 0905 	adc.w	r9, r3, r5
 800819e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f04f 0100 	mov.w	r1, #0
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	008b      	lsls	r3, r1, #2
 80081b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081b6:	0082      	lsls	r2, r0, #2
 80081b8:	4640      	mov	r0, r8
 80081ba:	4649      	mov	r1, r9
 80081bc:	f7f8 fcce 	bl	8000b5c <__aeabi_uldivmod>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4b49      	ldr	r3, [pc, #292]	; (80082ec <UART_SetConfig+0x38c>)
 80081c6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	011e      	lsls	r6, r3, #4
 80081ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d0:	4618      	mov	r0, r3
 80081d2:	f04f 0100 	mov.w	r1, #0
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	1894      	adds	r4, r2, r2
 80081dc:	60bc      	str	r4, [r7, #8]
 80081de:	415b      	adcs	r3, r3
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081e6:	1812      	adds	r2, r2, r0
 80081e8:	eb41 0303 	adc.w	r3, r1, r3
 80081ec:	f04f 0400 	mov.w	r4, #0
 80081f0:	f04f 0500 	mov.w	r5, #0
 80081f4:	00dd      	lsls	r5, r3, #3
 80081f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081fa:	00d4      	lsls	r4, r2, #3
 80081fc:	4622      	mov	r2, r4
 80081fe:	462b      	mov	r3, r5
 8008200:	1814      	adds	r4, r2, r0
 8008202:	64bc      	str	r4, [r7, #72]	; 0x48
 8008204:	414b      	adcs	r3, r1
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	f04f 0100 	mov.w	r1, #0
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	008b      	lsls	r3, r1, #2
 800821c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008220:	0082      	lsls	r2, r0, #2
 8008222:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008226:	f7f8 fc99 	bl	8000b5c <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4b2f      	ldr	r3, [pc, #188]	; (80082ec <UART_SetConfig+0x38c>)
 8008230:	fba3 1302 	umull	r1, r3, r3, r2
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	2164      	movs	r1, #100	; 0x64
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	3332      	adds	r3, #50	; 0x32
 8008242:	4a2a      	ldr	r2, [pc, #168]	; (80082ec <UART_SetConfig+0x38c>)
 8008244:	fba2 2303 	umull	r2, r3, r2, r3
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800824e:	441e      	add	r6, r3
 8008250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008252:	4618      	mov	r0, r3
 8008254:	f04f 0100 	mov.w	r1, #0
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	1894      	adds	r4, r2, r2
 800825e:	603c      	str	r4, [r7, #0]
 8008260:	415b      	adcs	r3, r3
 8008262:	607b      	str	r3, [r7, #4]
 8008264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008268:	1812      	adds	r2, r2, r0
 800826a:	eb41 0303 	adc.w	r3, r1, r3
 800826e:	f04f 0400 	mov.w	r4, #0
 8008272:	f04f 0500 	mov.w	r5, #0
 8008276:	00dd      	lsls	r5, r3, #3
 8008278:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800827c:	00d4      	lsls	r4, r2, #3
 800827e:	4622      	mov	r2, r4
 8008280:	462b      	mov	r3, r5
 8008282:	eb12 0a00 	adds.w	sl, r2, r0
 8008286:	eb43 0b01 	adc.w	fp, r3, r1
 800828a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	4618      	mov	r0, r3
 8008290:	f04f 0100 	mov.w	r1, #0
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	008b      	lsls	r3, r1, #2
 800829e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082a2:	0082      	lsls	r2, r0, #2
 80082a4:	4650      	mov	r0, sl
 80082a6:	4659      	mov	r1, fp
 80082a8:	f7f8 fc58 	bl	8000b5c <__aeabi_uldivmod>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <UART_SetConfig+0x38c>)
 80082b2:	fba3 1302 	umull	r1, r3, r3, r2
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	2164      	movs	r1, #100	; 0x64
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	3332      	adds	r3, #50	; 0x32
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <UART_SetConfig+0x38c>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	f003 020f 	and.w	r2, r3, #15
 80082d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4432      	add	r2, r6
 80082d6:	609a      	str	r2, [r3, #8]
}
 80082d8:	bf00      	nop
 80082da:	377c      	adds	r7, #124	; 0x7c
 80082dc:	46bd      	mov	sp, r7
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	bf00      	nop
 80082e4:	40011000 	.word	0x40011000
 80082e8:	40011400 	.word	0x40011400
 80082ec:	51eb851f 	.word	0x51eb851f

080082f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082f0:	b084      	sub	sp, #16
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	f107 001c 	add.w	r0, r7, #28
 80082fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	2b01      	cmp	r3, #1
 8008306:	d122      	bne.n	800834e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800831c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d105      	bne.n	8008342 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f94a 	bl	80085dc <USB_CoreReset>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e01a      	b.n	8008384 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f93e 	bl	80085dc <USB_CoreReset>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
 8008376:	e005      	b.n	8008384 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	2b01      	cmp	r3, #1
 8008388:	d10b      	bne.n	80083a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f043 0206 	orr.w	r2, r3, #6
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f043 0220 	orr.w	r2, r3, #32
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083ae:	b004      	add	sp, #16
 80083b0:	4770      	bx	lr

080083b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f043 0201 	orr.w	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f023 0201 	bic.w	r2, r3, #1
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d106      	bne.n	8008422 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60da      	str	r2, [r3, #12]
 8008420:	e00b      	b.n	800843a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60da      	str	r2, [r3, #12]
 8008434:	e001      	b.n	800843a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e003      	b.n	8008442 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800843a:	2032      	movs	r0, #50	; 0x32
 800843c:	f7fa f950 	bl	80026e0 <HAL_Delay>

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	019b      	lsls	r3, r3, #6
 800845e:	f043 0220 	orr.w	r2, r3, #32
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4a09      	ldr	r2, [pc, #36]	; (8008494 <USB_FlushTxFifo+0x48>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d901      	bls.n	8008478 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e006      	b.n	8008486 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b20      	cmp	r3, #32
 8008482:	d0f0      	beq.n	8008466 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	00030d40 	.word	0x00030d40

08008498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2210      	movs	r2, #16
 80084a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <USB_FlushRxFifo+0x40>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d901      	bls.n	80084bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e006      	b.n	80084ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d0f0      	beq.n	80084aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	00030d40 	.word	0x00030d40

080084dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b089      	sub	sp, #36	; 0x24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4611      	mov	r1, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	460b      	mov	r3, r1
 80084ec:	71fb      	strb	r3, [r7, #7]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80084fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d11a      	bne.n	8008538 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008502:	88bb      	ldrh	r3, [r7, #4]
 8008504:	3303      	adds	r3, #3
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	e00f      	b.n	8008530 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	031a      	lsls	r2, r3, #12
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4413      	add	r3, r2
 8008518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851c:	461a      	mov	r2, r3
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	3304      	adds	r3, #4
 8008528:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	3301      	adds	r3, #1
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	429a      	cmp	r2, r3
 8008536:	d3eb      	bcc.n	8008510 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3724      	adds	r7, #36	; 0x24
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008546:	b480      	push	{r7}
 8008548:	b089      	sub	sp, #36	; 0x24
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	4613      	mov	r3, r2
 8008552:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800855c:	88fb      	ldrh	r3, [r7, #6]
 800855e:	3303      	adds	r3, #3
 8008560:	089b      	lsrs	r3, r3, #2
 8008562:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008564:	2300      	movs	r3, #0
 8008566:	61bb      	str	r3, [r7, #24]
 8008568:	e00b      	b.n	8008582 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	601a      	str	r2, [r3, #0]
    pDest++;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	3304      	adds	r3, #4
 800857a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	3301      	adds	r3, #1
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	429a      	cmp	r2, r3
 8008588:	d3ef      	bcc.n	800856a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800858a:	69fb      	ldr	r3, [r7, #28]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3724      	adds	r7, #36	; 0x24
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4013      	ands	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085b0:	68fb      	ldr	r3, [r7, #12]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f003 0301 	and.w	r3, r3, #1
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a13      	ldr	r2, [pc, #76]	; (8008640 <USB_CoreReset+0x64>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e01b      	b.n	8008632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	daf2      	bge.n	80085e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f043 0201 	orr.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <USB_CoreReset+0x64>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d901      	bls.n	8008624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e006      	b.n	8008632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b01      	cmp	r3, #1
 800862e:	d0f0      	beq.n	8008612 <USB_CoreReset+0x36>

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	00030d40 	.word	0x00030d40

08008644 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008644:	b084      	sub	sp, #16
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	f107 001c 	add.w	r0, r7, #28
 8008652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008660:	461a      	mov	r2, r3
 8008662:	2300      	movs	r3, #0
 8008664:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008692:	2b00      	cmp	r3, #0
 8008694:	d018      	beq.n	80086c8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	2b01      	cmp	r3, #1
 800869a:	d10a      	bne.n	80086b2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086aa:	f043 0304 	orr.w	r3, r3, #4
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	e014      	b.n	80086dc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086c0:	f023 0304 	bic.w	r3, r3, #4
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e009      	b.n	80086dc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086d6:	f023 0304 	bic.w	r3, r3, #4
 80086da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80086dc:	2110      	movs	r1, #16
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff feb4 	bl	800844c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fed7 	bl	8008498 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e015      	b.n	800871c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fc:	461a      	mov	r2, r3
 80086fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008702:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4413      	add	r3, r2
 800870c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008710:	461a      	mov	r2, r3
 8008712:	2300      	movs	r3, #0
 8008714:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	429a      	cmp	r2, r3
 8008722:	d3e5      	bcc.n	80086f0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008724:	2101      	movs	r1, #1
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8ac 	bl	8008884 <USB_DriveVbus>

  HAL_Delay(200U);
 800872c:	20c8      	movs	r0, #200	; 0xc8
 800872e:	f7f9 ffd7 	bl	80026e0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800873e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008752:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <USB_HostInit+0x164>)
 8008758:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a13      	ldr	r2, [pc, #76]	; (80087ac <USB_HostInit+0x168>)
 800875e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008762:	e009      	b.n	8008778 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2280      	movs	r2, #128	; 0x80
 8008768:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a10      	ldr	r2, [pc, #64]	; (80087b0 <USB_HostInit+0x16c>)
 800876e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a10      	ldr	r2, [pc, #64]	; (80087b4 <USB_HostInit+0x170>)
 8008774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f043 0210 	orr.w	r2, r3, #16
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <USB_HostInit+0x174>)
 8008790:	4313      	orrs	r3, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087a2:	b004      	add	sp, #16
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	01000200 	.word	0x01000200
 80087ac:	00e00300 	.word	0x00e00300
 80087b0:	00600080 	.word	0x00600080
 80087b4:	004000e0 	.word	0x004000e0
 80087b8:	a3200008 	.word	0xa3200008

080087bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087da:	f023 0303 	bic.w	r3, r3, #3
 80087de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80087f4:	4313      	orrs	r3, r2
 80087f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d107      	bne.n	800880e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008804:	461a      	mov	r2, r3
 8008806:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800880a:	6053      	str	r3, [r2, #4]
 800880c:	e009      	b.n	8008822 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d106      	bne.n	8008822 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800881a:	461a      	mov	r2, r3
 800881c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008820:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008850:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800885a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800885e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008860:	2064      	movs	r0, #100	; 0x64
 8008862:	f7f9 ff3d 	bl	80026e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800886e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008872:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008874:	200a      	movs	r0, #10
 8008876:	f7f9 ff33 	bl	80026e0 <HAL_Delay>

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80088a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <USB_DriveVbus+0x44>
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d106      	bne.n	80088c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d2:	d109      	bne.n	80088e8 <USB_DriveVbus+0x64>
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	0c5b      	lsrs	r3, r3, #17
 8008914:	f003 0303 	and.w	r3, r3, #3
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	b29b      	uxth	r3, r3
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	4608      	mov	r0, r1
 8008952:	4611      	mov	r1, r2
 8008954:	461a      	mov	r2, r3
 8008956:	4603      	mov	r3, r0
 8008958:	70fb      	strb	r3, [r7, #3]
 800895a:	460b      	mov	r3, r1
 800895c:	70bb      	strb	r3, [r7, #2]
 800895e:	4613      	mov	r3, r2
 8008960:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4413      	add	r3, r2
 8008972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008976:	461a      	mov	r2, r3
 8008978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800897c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800897e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008982:	2b03      	cmp	r3, #3
 8008984:	d87e      	bhi.n	8008a84 <USB_HC_Init+0x13c>
 8008986:	a201      	add	r2, pc, #4	; (adr r2, 800898c <USB_HC_Init+0x44>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	0800899d 	.word	0x0800899d
 8008990:	08008a47 	.word	0x08008a47
 8008994:	0800899d 	.word	0x0800899d
 8008998:	08008a09 	.word	0x08008a09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a8:	461a      	mov	r2, r3
 80089aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80089ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80089b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da10      	bge.n	80089da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80089d8:	e057      	b.n	8008a8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d051      	beq.n	8008a8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80089e6:	78fb      	ldrb	r3, [r7, #3]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a04:	60d3      	str	r3, [r2, #12]
      break;
 8008a06:	e040      	b.n	8008a8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a08:	78fb      	ldrb	r3, [r7, #3]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a14:	461a      	mov	r2, r3
 8008a16:	f240 639d 	movw	r3, #1693	; 0x69d
 8008a1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da34      	bge.n	8008a8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	78fa      	ldrb	r2, [r7, #3]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008a44:	e023      	b.n	8008a8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	015a      	lsls	r2, r3, #5
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a52:	461a      	mov	r2, r3
 8008a54:	f240 2325 	movw	r3, #549	; 0x225
 8008a58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da17      	bge.n	8008a92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	78fa      	ldrb	r2, [r7, #3]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008a80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008a82:	e006      	b.n	8008a92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	77fb      	strb	r3, [r7, #31]
      break;
 8008a88:	e004      	b.n	8008a94 <USB_HC_Init+0x14c>
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e002      	b.n	8008a94 <USB_HC_Init+0x14c>
      break;
 8008a8e:	bf00      	nop
 8008a90:	e000      	b.n	8008a94 <USB_HC_Init+0x14c>
      break;
 8008a92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa8:	6939      	ldr	r1, [r7, #16]
 8008aaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008abe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	da03      	bge.n	8008ace <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	e001      	b.n	8008ad2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ff0f 	bl	80088f6 <USB_GetHostSpeed>
 8008ad8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008ada:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d106      	bne.n	8008af0 <USB_HC_Init+0x1a8>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d003      	beq.n	8008af0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e001      	b.n	8008af4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008af4:	787b      	ldrb	r3, [r7, #1]
 8008af6:	059b      	lsls	r3, r3, #22
 8008af8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008afc:	78bb      	ldrb	r3, [r7, #2]
 8008afe:	02db      	lsls	r3, r3, #11
 8008b00:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b04:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b0a:	049b      	lsls	r3, r3, #18
 8008b0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	0159      	lsls	r1, r3, #5
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	440b      	add	r3, r1
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b30:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008b32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d10f      	bne.n	8008b5a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008b5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3720      	adds	r7, #32
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d02d      	beq.n	8008bea <USB_HC_StartXfer+0x86>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	791b      	ldrb	r3, [r3, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d129      	bne.n	8008bea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d117      	bne.n	8008bcc <USB_HC_StartXfer+0x68>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	79db      	ldrb	r3, [r3, #7]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <USB_HC_StartXfer+0x48>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	79db      	ldrb	r3, [r3, #7]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d10f      	bne.n	8008bcc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	0151      	lsls	r1, r2, #5
 8008bbe:	6a3a      	ldr	r2, [r7, #32]
 8008bc0:	440a      	add	r2, r1
 8008bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10b      	bne.n	8008bea <USB_HC_StartXfer+0x86>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	795b      	ldrb	r3, [r3, #5]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d107      	bne.n	8008bea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	4619      	mov	r1, r3
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fa2f 	bl	8009044 <USB_DoPing>
      return HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e0f8      	b.n	8008ddc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d018      	beq.n	8008c24 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	8912      	ldrh	r2, [r2, #8]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	8912      	ldrh	r2, [r2, #8]
 8008c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c06:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008c08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c0a:	8b7b      	ldrh	r3, [r7, #26]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d90b      	bls.n	8008c28 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008c10:	8b7b      	ldrh	r3, [r7, #26]
 8008c12:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	8912      	ldrh	r2, [r2, #8]
 8008c1a:	fb02 f203 	mul.w	r2, r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	611a      	str	r2, [r3, #16]
 8008c22:	e001      	b.n	8008c28 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008c24:	2301      	movs	r3, #1
 8008c26:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	78db      	ldrb	r3, [r3, #3]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	8912      	ldrh	r2, [r2, #8]
 8008c36:	fb02 f203 	mul.w	r2, r2, r3
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	611a      	str	r2, [r3, #16]
 8008c3e:	e003      	b.n	8008c48 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c52:	04d9      	lsls	r1, r3, #19
 8008c54:	4b63      	ldr	r3, [pc, #396]	; (8008de4 <USB_HC_StartXfer+0x280>)
 8008c56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	7a9b      	ldrb	r3, [r3, #10]
 8008c5e:	075b      	lsls	r3, r3, #29
 8008c60:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c64:	69f9      	ldr	r1, [r7, #28]
 8008c66:	0148      	lsls	r0, r1, #5
 8008c68:	6a39      	ldr	r1, [r7, #32]
 8008c6a:	4401      	add	r1, r0
 8008c6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	68d9      	ldr	r1, [r3, #12]
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bf0c      	ite	eq
 8008c9e:	2301      	moveq	r3, #1
 8008ca0:	2300      	movne	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	6a3a      	ldr	r2, [r7, #32]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cc4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	7e7b      	ldrb	r3, [r7, #25]
 8008cd6:	075b      	lsls	r3, r3, #29
 8008cd8:	69f9      	ldr	r1, [r7, #28]
 8008cda:	0148      	lsls	r0, r1, #5
 8008cdc:	6a39      	ldr	r1, [r7, #32]
 8008cde:	4401      	add	r1, r0
 8008ce0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cfe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	78db      	ldrb	r3, [r3, #3]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	e003      	b.n	8008d1a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d18:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d20:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2e:	461a      	mov	r2, r3
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e04e      	b.n	8008ddc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	78db      	ldrb	r3, [r3, #3]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d149      	bne.n	8008dda <USB_HC_StartXfer+0x276>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d045      	beq.n	8008dda <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	79db      	ldrb	r3, [r3, #7]
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d830      	bhi.n	8008db8 <USB_HC_StartXfer+0x254>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USB_HC_StartXfer+0x1f8>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d91 	.word	0x08008d91
 8008d64:	08008d6d 	.word	0x08008d6d
 8008d68:	08008d91 	.word	0x08008d91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	3303      	adds	r3, #3
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008d76:	8afa      	ldrh	r2, [r7, #22]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d91c      	bls.n	8008dbc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f043 0220 	orr.w	r2, r3, #32
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008d8e:	e015      	b.n	8008dbc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	3303      	adds	r3, #3
 8008d96:	089b      	lsrs	r3, r3, #2
 8008d98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008d9a:	8afa      	ldrh	r2, [r7, #22]
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d90a      	bls.n	8008dc0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008db6:	e003      	b.n	8008dc0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008db8:	bf00      	nop
 8008dba:	e002      	b.n	8008dc2 <USB_HC_StartXfer+0x25e>
        break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <USB_HC_StartXfer+0x25e>
        break;
 8008dc0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	68d9      	ldr	r1, [r3, #12]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	785a      	ldrb	r2, [r3, #1]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	9000      	str	r0, [sp, #0]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff fb81 	bl	80084dc <USB_WritePacket>
  }

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3728      	adds	r7, #40	; 0x28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	1ff80000 	.word	0x1ff80000

08008de8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	b29b      	uxth	r3, r3
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b089      	sub	sp, #36	; 0x24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	0c9b      	lsrs	r3, r3, #18
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	0fdb      	lsrs	r3, r3, #31
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	d104      	bne.n	8008e64 <USB_HC_Halt+0x5a>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	e0e8      	b.n	8009036 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <USB_HC_Halt+0x66>
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d173      	bne.n	8008f58 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	0151      	lsls	r1, r2, #5
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	440a      	add	r2, r1
 8008e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f040 80cb 	bne.w	8009034 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d143      	bne.n	8008f32 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ec8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	0151      	lsls	r1, r2, #5
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	440a      	add	r2, r1
 8008ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ee8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	0151      	lsls	r1, r2, #5
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	440a      	add	r2, r1
 8008f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f08:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	61fb      	str	r3, [r7, #28]
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f16:	d81d      	bhi.n	8008f54 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f2e:	d0ec      	beq.n	8008f0a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f30:	e080      	b.n	8009034 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f50:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f52:	e06f      	b.n	8009034 <USB_HC_Halt+0x22a>
            break;
 8008f54:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f56:	e06d      	b.n	8009034 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	0151      	lsls	r1, r2, #5
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	440a      	add	r2, r1
 8008f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f76:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d143      	bne.n	8009010 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fa6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	0151      	lsls	r1, r2, #5
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fc6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fe6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	3301      	adds	r3, #1
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ff4:	d81d      	bhi.n	8009032 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900c:	d0ec      	beq.n	8008fe8 <USB_HC_Halt+0x1de>
 800900e:	e011      	b.n	8009034 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	4413      	add	r3, r2
 8009018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	0151      	lsls	r1, r2, #5
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	440a      	add	r2, r1
 8009026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800902a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	e000      	b.n	8009034 <USB_HC_Halt+0x22a>
          break;
 8009032:	bf00      	nop
    }
  }

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3724      	adds	r7, #36	; 0x24
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
	...

08009044 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009058:	2301      	movs	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	04da      	lsls	r2, r3, #19
 8009060:	4b15      	ldr	r3, [pc, #84]	; (80090b8 <USB_DoPing+0x74>)
 8009062:	4013      	ands	r3, r2
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	0151      	lsls	r1, r2, #5
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	440a      	add	r2, r1
 800906c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009074:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800908c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009094:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	1ff80000 	.word	0x1ff80000

080090bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff f981 	bl	80083d4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80090d2:	2110      	movs	r1, #16
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff f9b9 	bl	800844c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff f9dc 	bl	8008498 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	e01f      	b.n	8009126 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009104:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800910c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911a:	461a      	mov	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3301      	adds	r3, #1
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b0f      	cmp	r3, #15
 800912a:	d9dc      	bls.n	80090e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800912c:	2300      	movs	r3, #0
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	e034      	b.n	800919c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009148:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009150:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009158:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009166:	461a      	mov	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3301      	adds	r3, #1
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009178:	d80c      	bhi.n	8009194 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800918c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009190:	d0ec      	beq.n	800916c <USB_StopHost+0xb0>
 8009192:	e000      	b.n	8009196 <USB_StopHost+0xda>
        break;
 8009194:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	3301      	adds	r3, #1
 800919a:	613b      	str	r3, [r7, #16]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2b0f      	cmp	r3, #15
 80091a0:	d9c7      	bls.n	8009132 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a8:	461a      	mov	r2, r3
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff f8fa 	bl	80083b2 <USB_EnableGlobalInt>

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80091c8:	b590      	push	{r4, r7, lr}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80091d0:	2301      	movs	r3, #1
 80091d2:	2202      	movs	r2, #2
 80091d4:	2102      	movs	r1, #2
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fcb2 	bl	8009b40 <USBH_FindInterface>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2bff      	cmp	r3, #255	; 0xff
 80091e4:	d002      	beq.n	80091ec <USBH_CDC_InterfaceInit+0x24>
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d901      	bls.n	80091f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80091ec:	2302      	movs	r3, #2
 80091ee:	e13d      	b.n	800946c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fc87 	bl	8009b08 <USBH_SelectInterface>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009204:	2302      	movs	r3, #2
 8009206:	e131      	b.n	800946c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800920e:	2050      	movs	r0, #80	; 0x50
 8009210:	f005 fbd0 	bl	800e9b4 <malloc>
 8009214:	4603      	mov	r3, r0
 8009216:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009228:	2302      	movs	r3, #2
 800922a:	e11f      	b.n	800946c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800922c:	2250      	movs	r2, #80	; 0x50
 800922e:	2100      	movs	r1, #0
 8009230:	68b8      	ldr	r0, [r7, #8]
 8009232:	f005 fbdd 	bl	800e9f0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	211a      	movs	r1, #26
 800923c:	fb01 f303 	mul.w	r3, r1, r3
 8009240:	4413      	add	r3, r2
 8009242:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b25b      	sxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	da15      	bge.n	800927a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	211a      	movs	r1, #26
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	4413      	add	r3, r2
 800925a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	211a      	movs	r1, #26
 800926a:	fb01 f303 	mul.w	r3, r1, r3
 800926e:	4413      	add	r3, r2
 8009270:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009274:	881a      	ldrh	r2, [r3, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f002 f88c 	bl	800b39e <USBH_AllocPipe>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	7819      	ldrb	r1, [r3, #0]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	7858      	ldrb	r0, [r3, #1]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	8952      	ldrh	r2, [r2, #10]
 80092a6:	9202      	str	r2, [sp, #8]
 80092a8:	2203      	movs	r2, #3
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	4623      	mov	r3, r4
 80092b0:	4602      	mov	r2, r0
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f002 f844 	bl	800b340 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f005 fac9 	bl	800e858 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80092c6:	2300      	movs	r3, #0
 80092c8:	2200      	movs	r2, #0
 80092ca:	210a      	movs	r1, #10
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc37 	bl	8009b40 <USBH_FindInterface>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2bff      	cmp	r3, #255	; 0xff
 80092da:	d002      	beq.n	80092e2 <USBH_CDC_InterfaceInit+0x11a>
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d901      	bls.n	80092e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80092e2:	2302      	movs	r3, #2
 80092e4:	e0c2      	b.n	800946c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	211a      	movs	r1, #26
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	b25b      	sxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	da16      	bge.n	800932c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	211a      	movs	r1, #26
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	211a      	movs	r1, #26
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	4413      	add	r3, r2
 8009320:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009324:	881a      	ldrh	r2, [r3, #0]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	835a      	strh	r2, [r3, #26]
 800932a:	e015      	b.n	8009358 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	211a      	movs	r1, #26
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	4413      	add	r3, r2
 8009338:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	211a      	movs	r1, #26
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009352:	881a      	ldrh	r2, [r3, #0]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	211a      	movs	r1, #26
 800935e:	fb01 f303 	mul.w	r3, r1, r3
 8009362:	4413      	add	r3, r2
 8009364:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	b25b      	sxtb	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	da16      	bge.n	800939e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	211a      	movs	r1, #26
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	211a      	movs	r1, #26
 800938c:	fb01 f303 	mul.w	r3, r1, r3
 8009390:	4413      	add	r3, r2
 8009392:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009396:	881a      	ldrh	r2, [r3, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	835a      	strh	r2, [r3, #26]
 800939c:	e015      	b.n	80093ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	211a      	movs	r1, #26
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	4413      	add	r3, r2
 80093aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	211a      	movs	r1, #26
 80093ba:	fb01 f303 	mul.w	r3, r1, r3
 80093be:	4413      	add	r3, r2
 80093c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80093c4:	881a      	ldrh	r2, [r3, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	7b9b      	ldrb	r3, [r3, #14]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 ffe4 	bl	800b39e <USBH_AllocPipe>
 80093d6:	4603      	mov	r3, r0
 80093d8:	461a      	mov	r2, r3
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	7bdb      	ldrb	r3, [r3, #15]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 ffda 	bl	800b39e <USBH_AllocPipe>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	7b59      	ldrb	r1, [r3, #13]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	7b98      	ldrb	r0, [r3, #14]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	8b12      	ldrh	r2, [r2, #24]
 800940a:	9202      	str	r2, [sp, #8]
 800940c:	2202      	movs	r2, #2
 800940e:	9201      	str	r2, [sp, #4]
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	4623      	mov	r3, r4
 8009414:	4602      	mov	r2, r0
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 ff92 	bl	800b340 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	7b19      	ldrb	r1, [r3, #12]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	7bd8      	ldrb	r0, [r3, #15]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	8b52      	ldrh	r2, [r2, #26]
 8009434:	9202      	str	r2, [sp, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4623      	mov	r3, r4
 800943e:	4602      	mov	r2, r0
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 ff7d 	bl	800b340 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	7b5b      	ldrb	r3, [r3, #13]
 8009452:	2200      	movs	r2, #0
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f005 f9fe 	bl	800e858 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	7b1b      	ldrb	r3, [r3, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f005 f9f7 	bl	800e858 <USBH_LL_SetToggle>

  return USBH_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	bd90      	pop	{r4, r7, pc}

08009474 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00e      	beq.n	80094ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 ff72 	bl	800b37e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 ff9d 	bl	800b3e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7b1b      	ldrb	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00e      	beq.n	80094d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	7b1b      	ldrb	r3, [r3, #12]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 ff5f 	bl	800b37e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	7b1b      	ldrb	r3, [r3, #12]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 ff8a 	bl	800b3e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	7b5b      	ldrb	r3, [r3, #13]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00e      	beq.n	80094f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	7b5b      	ldrb	r3, [r3, #13]
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 ff4c 	bl	800b37e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7b5b      	ldrb	r3, [r3, #13]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 ff77 	bl	800b3e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	4618      	mov	r0, r3
 800950e:	f005 fa59 	bl	800e9c4 <free>
    phost->pActiveClass->pData = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009518:	2200      	movs	r2, #0
 800951a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3340      	adds	r3, #64	; 0x40
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f8b1 	bl	80096a6 <GetLineCoding>
 8009544:	4603      	mov	r3, r0
 8009546:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009548:	7afb      	ldrb	r3, [r7, #11]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d105      	bne.n	800955a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009554:	2102      	movs	r1, #2
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800955a:	7afb      	ldrb	r3, [r7, #11]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800956c:	2301      	movs	r3, #1
 800956e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009584:	2b04      	cmp	r3, #4
 8009586:	d877      	bhi.n	8009678 <USBH_CDC_Process+0x114>
 8009588:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <USBH_CDC_Process+0x2c>)
 800958a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958e:	bf00      	nop
 8009590:	080095a5 	.word	0x080095a5
 8009594:	080095ab 	.word	0x080095ab
 8009598:	080095db 	.word	0x080095db
 800959c:	0800964f 	.word	0x0800964f
 80095a0:	0800965d 	.word	0x0800965d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
      break;
 80095a8:	e06d      	b.n	8009686 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f897 	bl	80096e4 <SetLineCoding>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d104      	bne.n	80095ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80095c8:	e058      	b.n	800967c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d055      	beq.n	800967c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2204      	movs	r2, #4
 80095d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80095d8:	e050      	b.n	800967c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	3340      	adds	r3, #64	; 0x40
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f860 	bl	80096a6 <GetLineCoding>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d126      	bne.n	800963e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009602:	791b      	ldrb	r3, [r3, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d13b      	bne.n	8009680 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009612:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009614:	429a      	cmp	r2, r3
 8009616:	d133      	bne.n	8009680 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009622:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009624:	429a      	cmp	r2, r3
 8009626:	d12b      	bne.n	8009680 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009630:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009632:	429a      	cmp	r2, r3
 8009634:	d124      	bne.n	8009680 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f982 	bl	8009940 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800963c:	e020      	b.n	8009680 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d01d      	beq.n	8009680 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2204      	movs	r2, #4
 8009648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800964c:	e018      	b.n	8009680 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f867 	bl	8009722 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f8f6 	bl	8009846 <CDC_ProcessReception>
      break;
 800965a:	e014      	b.n	8009686 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800965c:	2100      	movs	r1, #0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 f94d 	bl	800a8fe <USBH_ClrFeature>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009676:	e005      	b.n	8009684 <USBH_CDC_Process+0x120>

    default:
      break;
 8009678:	bf00      	nop
 800967a:	e004      	b.n	8009686 <USBH_CDC_Process+0x122>
      break;
 800967c:	bf00      	nop
 800967e:	e002      	b.n	8009686 <USBH_CDC_Process+0x122>
      break;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <USBH_CDC_Process+0x122>
      break;
 8009684:	bf00      	nop

  }

  return status;
 8009686:	7bfb      	ldrb	r3, [r7, #15]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	22a1      	movs	r2, #161	; 0xa1
 80096b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2221      	movs	r2, #33	; 0x21
 80096ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2207      	movs	r2, #7
 80096cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2207      	movs	r2, #7
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 faf2 	bl	800acbe <USBH_CtlReq>
 80096da:	4603      	mov	r3, r0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2221      	movs	r2, #33	; 0x21
 80096f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2220      	movs	r2, #32
 80096f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2207      	movs	r2, #7
 800970a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2207      	movs	r2, #7
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fad3 	bl	800acbe <USBH_CtlReq>
 8009718:	4603      	mov	r3, r0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af02      	add	r7, sp, #8
 8009728:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009734:	2300      	movs	r3, #0
 8009736:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800973e:	2b01      	cmp	r3, #1
 8009740:	d002      	beq.n	8009748 <CDC_ProcessTransmission+0x26>
 8009742:	2b02      	cmp	r3, #2
 8009744:	d023      	beq.n	800978e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009746:	e07a      	b.n	800983e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	8b12      	ldrh	r2, [r2, #24]
 8009750:	4293      	cmp	r3, r2
 8009752:	d90b      	bls.n	800976c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	69d9      	ldr	r1, [r3, #28]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8b1a      	ldrh	r2, [r3, #24]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7b5b      	ldrb	r3, [r3, #13]
 8009760:	2001      	movs	r0, #1
 8009762:	9000      	str	r0, [sp, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 fda8 	bl	800b2ba <USBH_BulkSendData>
 800976a:	e00b      	b.n	8009784 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	7b5b      	ldrb	r3, [r3, #13]
 800977a:	2001      	movs	r0, #1
 800977c:	9000      	str	r0, [sp, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 fd9b 	bl	800b2ba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800978c:	e057      	b.n	800983e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	7b5b      	ldrb	r3, [r3, #13]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f005 f835 	bl	800e804 <USBH_LL_GetURBState>
 800979a:	4603      	mov	r3, r0
 800979c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d136      	bne.n	8009812 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	8b12      	ldrh	r2, [r2, #24]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d90e      	bls.n	80097ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	8b12      	ldrh	r2, [r2, #24]
 80097b8:	1a9a      	subs	r2, r3, r2
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	8b12      	ldrh	r2, [r2, #24]
 80097c6:	441a      	add	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	61da      	str	r2, [r3, #28]
 80097cc:	e002      	b.n	80097d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80097e4:	e006      	b.n	80097f4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f892 	bl	8009918 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2204      	movs	r2, #4
 80097f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009808:	2300      	movs	r3, #0
 800980a:	2200      	movs	r2, #0
 800980c:	f001 ffd8 	bl	800b7c0 <osMessageQueuePut>
      break;
 8009810:	e014      	b.n	800983c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	2b02      	cmp	r3, #2
 8009816:	d111      	bne.n	800983c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2204      	movs	r2, #4
 8009824:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009834:	2300      	movs	r3, #0
 8009836:	2200      	movs	r2, #0
 8009838:	f001 ffc2 	bl	800b7c0 <osMessageQueuePut>
      break;
 800983c:	bf00      	nop
  }
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b086      	sub	sp, #24
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009858:	2300      	movs	r3, #0
 800985a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009862:	2b03      	cmp	r3, #3
 8009864:	d002      	beq.n	800986c <CDC_ProcessReception+0x26>
 8009866:	2b04      	cmp	r3, #4
 8009868:	d00e      	beq.n	8009888 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800986a:	e051      	b.n	8009910 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	6a19      	ldr	r1, [r3, #32]
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	8b5a      	ldrh	r2, [r3, #26]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	7b1b      	ldrb	r3, [r3, #12]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f001 fd43 	bl	800b304 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2204      	movs	r2, #4
 8009882:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009886:	e043      	b.n	8009910 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	7b1b      	ldrb	r3, [r3, #12]
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f004 ffb8 	bl	800e804 <USBH_LL_GetURBState>
 8009894:	4603      	mov	r3, r0
 8009896:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009898:	7cfb      	ldrb	r3, [r7, #19]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d137      	bne.n	800990e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	7b1b      	ldrb	r3, [r3, #12]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f004 ff1b 	bl	800e6e0 <USBH_LL_GetLastXferSize>
 80098aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d016      	beq.n	80098e4 <CDC_ProcessReception+0x9e>
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	8b5b      	ldrh	r3, [r3, #26]
 80098ba:	461a      	mov	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4293      	cmp	r3, r2
 80098c0:	d910      	bls.n	80098e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	1ad2      	subs	r2, r2, r3
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6a1a      	ldr	r2, [r3, #32]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	441a      	add	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2203      	movs	r2, #3
 80098de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80098e2:	e006      	b.n	80098f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f81d 	bl	800992c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2204      	movs	r2, #4
 80098f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009906:	2300      	movs	r3, #0
 8009908:	2200      	movs	r2, #0
 800990a:	f001 ff59 	bl	800b7c0 <osMessageQueuePut>
      break;
 800990e:	bf00      	nop
  }
}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009968:	2302      	movs	r3, #2
 800996a:	e044      	b.n	80099f6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	79fa      	ldrb	r2, [r7, #7]
 8009970:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f841 	bl	8009a0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80099b8:	2200      	movs	r2, #0
 80099ba:	2104      	movs	r1, #4
 80099bc:	2010      	movs	r0, #16
 80099be:	f001 fe8c 	bl	800b6da <osMessageQueueNew>
 80099c2:	4602      	mov	r2, r0
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <USBH_Init+0xac>)
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <USBH_Init+0xb0>)
 80099ce:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <USBH_Init+0xac>)
 80099d2:	2280      	movs	r2, #128	; 0x80
 80099d4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <USBH_Init+0xac>)
 80099d8:	2218      	movs	r2, #24
 80099da:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80099dc:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <USBH_Init+0xac>)
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <USBH_Init+0xb4>)
 80099e2:	f001 fdcd 	bl	800b580 <osThreadNew>
 80099e6:	4602      	mov	r2, r0
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f004 fdc2 	bl	800e578 <USBH_LL_Init>

  return USBH_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20004fb8 	.word	0x20004fb8
 8009a04:	0800ece4 	.word	0x0800ece4
 8009a08:	0800a675 	.word	0x0800a675

08009a0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e009      	b.n	8009a32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	33e0      	adds	r3, #224	; 0xe0
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	2200      	movs	r2, #0
 8009a2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b0e      	cmp	r3, #14
 8009a36:	d9f2      	bls.n	8009a1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e009      	b.n	8009a52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a48:	2200      	movs	r2, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a58:	d3f1      	bcc.n	8009a3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2240      	movs	r2, #64	; 0x40
 8009a7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d016      	beq.n	8009af6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10e      	bne.n	8009af0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ad8:	1c59      	adds	r1, r3, #1
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	33de      	adds	r3, #222	; 0xde
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
 8009aee:	e004      	b.n	8009afa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009af0:	2302      	movs	r3, #2
 8009af2:	73fb      	strb	r3, [r7, #15]
 8009af4:	e001      	b.n	8009afa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009af6:	2302      	movs	r3, #2
 8009af8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009b1e:	78fa      	ldrb	r2, [r7, #3]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d204      	bcs.n	8009b2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009b2c:	e001      	b.n	8009b32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	70fb      	strb	r3, [r7, #3]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70bb      	strb	r3, [r7, #2]
 8009b56:	4613      	mov	r3, r2
 8009b58:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009b68:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b6a:	e025      	b.n	8009bb8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	221a      	movs	r2, #26
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	3308      	adds	r3, #8
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4413      	add	r3, r2
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	795b      	ldrb	r3, [r3, #5]
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d002      	beq.n	8009b8e <USBH_FindInterface+0x4e>
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	2bff      	cmp	r3, #255	; 0xff
 8009b8c:	d111      	bne.n	8009bb2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b92:	78ba      	ldrb	r2, [r7, #2]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d002      	beq.n	8009b9e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009b98:	78bb      	ldrb	r3, [r7, #2]
 8009b9a:	2bff      	cmp	r3, #255	; 0xff
 8009b9c:	d109      	bne.n	8009bb2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ba2:	787a      	ldrb	r2, [r7, #1]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d002      	beq.n	8009bae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ba8:	787b      	ldrb	r3, [r7, #1]
 8009baa:	2bff      	cmp	r3, #255	; 0xff
 8009bac:	d101      	bne.n	8009bb2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	e006      	b.n	8009bc0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d9d6      	bls.n	8009b6c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009bbe:	23ff      	movs	r3, #255	; 0xff
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f004 fd0b 	bl	800e5f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009bda:	2101      	movs	r1, #1
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f004 fe24 	bl	800e82a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af04      	add	r7, sp, #16
 8009bf2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d102      	bne.n	8009c0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b0b      	cmp	r3, #11
 8009c16:	f200 823c 	bhi.w	800a092 <USBH_Process+0x4a6>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <USBH_Process+0x34>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009c51 	.word	0x08009c51
 8009c24:	08009c9f 	.word	0x08009c9f
 8009c28:	08009d23 	.word	0x08009d23
 8009c2c:	0800a011 	.word	0x0800a011
 8009c30:	0800a093 	.word	0x0800a093
 8009c34:	08009de3 	.word	0x08009de3
 8009c38:	08009f9b 	.word	0x08009f9b
 8009c3c:	08009e35 	.word	0x08009e35
 8009c40:	08009e71 	.word	0x08009e71
 8009c44:	08009eab 	.word	0x08009eab
 8009c48:	08009ef3 	.word	0x08009ef3
 8009c4c:	08009ff9 	.word	0x08009ff9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 821c 	beq.w	800a096 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009c64:	20c8      	movs	r0, #200	; 0xc8
 8009c66:	f004 fe27 	bl	800e8b8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f004 fd1d 	bl	800e6aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c94:	2300      	movs	r3, #0
 8009c96:	2200      	movs	r2, #0
 8009c98:	f001 fd92 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009c9c:	e1fb      	b.n	800a096 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d107      	bne.n	8009cb8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	701a      	strb	r2, [r3, #0]
 8009cb6:	e025      	b.n	8009d04 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cc2:	d914      	bls.n	8009cee <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009cca:	3301      	adds	r3, #1
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d903      	bls.n	8009ce6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	220d      	movs	r2, #13
 8009ce2:	701a      	strb	r2, [r3, #0]
 8009ce4:	e00e      	b.n	8009d04 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e00a      	b.n	8009d04 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009cf4:	f103 020a 	add.w	r2, r3, #10
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009cfe:	200a      	movs	r0, #10
 8009d00:	f004 fdda 	bl	800e8b8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f001 fd50 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 8009d20:	e1c0      	b.n	800a0a4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d32:	2104      	movs	r1, #4
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009d38:	2064      	movs	r0, #100	; 0x64
 8009d3a:	f004 fdbd 	bl	800e8b8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f004 fc8c 	bl	800e65c <USBH_LL_GetSpeed>
 8009d44:	4603      	mov	r3, r0
 8009d46:	461a      	mov	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2205      	movs	r2, #5
 8009d52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009d54:	2100      	movs	r1, #0
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 fb21 	bl	800b39e <USBH_AllocPipe>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d64:	2180      	movs	r1, #128	; 0x80
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 fb19 	bl	800b39e <USBH_AllocPipe>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461a      	mov	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7919      	ldrb	r1, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d88:	b292      	uxth	r2, r2
 8009d8a:	9202      	str	r2, [sp, #8]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	9201      	str	r2, [sp, #4]
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4603      	mov	r3, r0
 8009d94:	2280      	movs	r2, #128	; 0x80
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 fad2 	bl	800b340 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7959      	ldrb	r1, [r3, #5]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009db0:	b292      	uxth	r2, r2
 8009db2:	9202      	str	r2, [sp, #8]
 8009db4:	2200      	movs	r2, #0
 8009db6:	9201      	str	r2, [sp, #4]
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 fabe 	bl	800b340 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009dd8:	2300      	movs	r3, #0
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f001 fcf0 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 8009de0:	e160      	b.n	800a0a4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f964 	bl	800a0b0 <USBH_HandleEnum>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f040 8152 	bne.w	800a09a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d103      	bne.n	8009e10 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2207      	movs	r2, #7
 8009e14:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f001 fcc7 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009e32:	e132      	b.n	800a09a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 812f 	beq.w	800a09e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e46:	2101      	movs	r1, #1
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2208      	movs	r2, #8
 8009e50:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2205      	movs	r2, #5
 8009e56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e66:	2300      	movs	r3, #0
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f001 fca9 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8009e6e:	e116      	b.n	800a09e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fcf8 	bl	800a870 <USBH_SetCfg>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2209      	movs	r2, #9
 8009e8a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f001 fc8c 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 8009ea8:	e0fc      	b.n	800a0a4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009eb0:	f003 0320 	and.w	r3, r3, #32
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009eb8:	2101      	movs	r1, #1
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fcfb 	bl	800a8b6 <USBH_SetFeature>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	220a      	movs	r2, #10
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e002      	b.n	8009ed4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	220a      	movs	r2, #10
 8009ed2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	2200      	movs	r2, #0
 8009eec:	f001 fc68 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 8009ef0:	e0d8      	b.n	800a0a4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d03f      	beq.n	8009f7c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]
 8009f08:	e016      	b.n	8009f38 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009f0a:	7bfa      	ldrb	r2, [r7, #15]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	32de      	adds	r2, #222	; 0xde
 8009f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f14:	791a      	ldrb	r2, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d108      	bne.n	8009f32 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009f20:	7bfa      	ldrb	r2, [r7, #15]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	32de      	adds	r2, #222	; 0xde
 8009f26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009f30:	e005      	b.n	8009f3e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	3301      	adds	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0e5      	beq.n	8009f0a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d016      	beq.n	8009f76 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2206      	movs	r2, #6
 8009f5e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f66:	2103      	movs	r1, #3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	4798      	blx	r3
 8009f6c:	e006      	b.n	8009f7c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	220d      	movs	r2, #13
 8009f72:	701a      	strb	r2, [r3, #0]
 8009f74:	e002      	b.n	8009f7c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	220d      	movs	r2, #13
 8009f7a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2205      	movs	r2, #5
 8009f80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f90:	2300      	movs	r3, #0
 8009f92:	2200      	movs	r2, #0
 8009f94:	f001 fc14 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 8009f98:	e084      	b.n	800a0a4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d017      	beq.n	8009fd4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	4798      	blx	r3
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d103      	bne.n	8009fc4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	220b      	movs	r2, #11
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	e00a      	b.n	8009fda <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d106      	bne.n	8009fda <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	220d      	movs	r2, #13
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	e002      	b.n	8009fda <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	220d      	movs	r2, #13
 8009fd8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2205      	movs	r2, #5
 8009fde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f001 fbe5 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 8009ff6:	e055      	b.n	800a0a4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d04f      	beq.n	800a0a2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	4798      	blx	r3
      }
      break;
 800a00e:	e048      	b.n	800a0a2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff fcf7 	bl	8009a0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d009      	beq.n	800a03c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a04c:	2105      	movs	r1, #5
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d107      	bne.n	800a06e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff fdb0 	bl	8009bcc <USBH_Start>
 800a06c:	e002      	b.n	800a074 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f004 fabe 	bl	800e5f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a088:	2300      	movs	r3, #0
 800a08a:	2200      	movs	r2, #0
 800a08c:	f001 fb98 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      break;
 800a090:	e008      	b.n	800a0a4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a092:	bf00      	nop
 800a094:	e006      	b.n	800a0a4 <USBH_Process+0x4b8>
      break;
 800a096:	bf00      	nop
 800a098:	e004      	b.n	800a0a4 <USBH_Process+0x4b8>
      break;
 800a09a:	bf00      	nop
 800a09c:	e002      	b.n	800a0a4 <USBH_Process+0x4b8>
    break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <USBH_Process+0x4b8>
      break;
 800a0a2:	bf00      	nop
  }
  return USBH_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop

0800a0b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af04      	add	r7, sp, #16
 800a0b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	785b      	ldrb	r3, [r3, #1]
 800a0c4:	2b07      	cmp	r3, #7
 800a0c6:	f200 8208 	bhi.w	800a4da <USBH_HandleEnum+0x42a>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <USBH_HandleEnum+0x20>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a1af 	.word	0x0800a1af
 800a0d8:	0800a219 	.word	0x0800a219
 800a0dc:	0800a2a7 	.word	0x0800a2a7
 800a0e0:	0800a311 	.word	0x0800a311
 800a0e4:	0800a381 	.word	0x0800a381
 800a0e8:	0800a41d 	.word	0x0800a41d
 800a0ec:	0800a49b 	.word	0x0800a49b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a0f0:	2108      	movs	r1, #8
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 faec 	bl	800a6d0 <USBH_Get_DevDesc>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d130      	bne.n	800a164 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	7919      	ldrb	r1, [r3, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a126:	b292      	uxth	r2, r2
 800a128:	9202      	str	r2, [sp, #8]
 800a12a:	2200      	movs	r2, #0
 800a12c:	9201      	str	r2, [sp, #4]
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	4603      	mov	r3, r0
 800a132:	2280      	movs	r2, #128	; 0x80
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 f903 	bl	800b340 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	7959      	ldrb	r1, [r3, #5]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a14e:	b292      	uxth	r2, r2
 800a150:	9202      	str	r2, [sp, #8]
 800a152:	2200      	movs	r2, #0
 800a154:	9201      	str	r2, [sp, #4]
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	4603      	mov	r3, r0
 800a15a:	2200      	movs	r2, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f001 f8ef 	bl	800b340 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a162:	e1bc      	b.n	800a4de <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	2b03      	cmp	r3, #3
 800a168:	f040 81b9 	bne.w	800a4de <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a172:	3301      	adds	r3, #1
 800a174:	b2da      	uxtb	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a182:	2b03      	cmp	r3, #3
 800a184:	d903      	bls.n	800a18e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	220d      	movs	r2, #13
 800a18a:	701a      	strb	r2, [r3, #0]
      break;
 800a18c:	e1a7      	b.n	800a4de <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	795b      	ldrb	r3, [r3, #5]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f923 	bl	800b3e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 f91d 	bl	800b3e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
      break;
 800a1ac:	e197      	b.n	800a4de <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a1ae:	2112      	movs	r1, #18
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fa8d 	bl	800a6d0 <USBH_Get_DevDesc>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d103      	bne.n	800a1c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1c6:	e18c      	b.n	800a4e2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	f040 8189 	bne.w	800a4e2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d903      	bls.n	800a1f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	220d      	movs	r2, #13
 800a1ee:	701a      	strb	r2, [r3, #0]
      break;
 800a1f0:	e177      	b.n	800a4e2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	795b      	ldrb	r3, [r3, #5]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 f8f1 	bl	800b3e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	791b      	ldrb	r3, [r3, #4]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 f8eb 	bl	800b3e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	701a      	strb	r2, [r3, #0]
      break;
 800a216:	e164      	b.n	800a4e2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a218:	2101      	movs	r1, #1
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fb04 	bl	800a828 <USBH_SetAddress>
 800a220:	4603      	mov	r3, r0
 800a222:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d132      	bne.n	800a290 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a22a:	2002      	movs	r0, #2
 800a22c:	f004 fb44 	bl	800e8b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2203      	movs	r2, #3
 800a23c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7919      	ldrb	r1, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a252:	b292      	uxth	r2, r2
 800a254:	9202      	str	r2, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	9201      	str	r2, [sp, #4]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4603      	mov	r3, r0
 800a25e:	2280      	movs	r2, #128	; 0x80
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f86d 	bl	800b340 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7959      	ldrb	r1, [r3, #5]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a27a:	b292      	uxth	r2, r2
 800a27c:	9202      	str	r2, [sp, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	4603      	mov	r3, r0
 800a286:	2200      	movs	r2, #0
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f859 	bl	800b340 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a28e:	e12a      	b.n	800a4e6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	2b03      	cmp	r3, #3
 800a294:	f040 8127 	bne.w	800a4e6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	220d      	movs	r2, #13
 800a29c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	705a      	strb	r2, [r3, #1]
      break;
 800a2a4:	e11f      	b.n	800a4e6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a2a6:	2109      	movs	r1, #9
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fa39 	bl	800a720 <USBH_Get_CfgDesc>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2be:	e114      	b.n	800a4ea <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	f040 8111 	bne.w	800a4ea <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d903      	bls.n	800a2ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	220d      	movs	r2, #13
 800a2e6:	701a      	strb	r2, [r3, #0]
      break;
 800a2e8:	e0ff      	b.n	800a4ea <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	795b      	ldrb	r3, [r3, #5]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f875 	bl	800b3e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	791b      	ldrb	r3, [r3, #4]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 f86f 	bl	800b3e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
      break;
 800a30e:	e0ec      	b.n	800a4ea <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa01 	bl	800a720 <USBH_Get_CfgDesc>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d103      	bne.n	800a330 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2205      	movs	r2, #5
 800a32c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a32e:	e0de      	b.n	800a4ee <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	2b03      	cmp	r3, #3
 800a334:	f040 80db 	bne.w	800a4ee <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a33e:	3301      	adds	r3, #1
 800a340:	b2da      	uxtb	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d903      	bls.n	800a35a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	220d      	movs	r2, #13
 800a356:	701a      	strb	r2, [r3, #0]
      break;
 800a358:	e0c9      	b.n	800a4ee <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	795b      	ldrb	r3, [r3, #5]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 f83d 	bl	800b3e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	791b      	ldrb	r3, [r3, #4]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 f837 	bl	800b3e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
      break;
 800a37e:	e0b6      	b.n	800a4ee <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a386:	2b00      	cmp	r3, #0
 800a388:	d036      	beq.n	800a3f8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a396:	23ff      	movs	r3, #255	; 0xff
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9e5 	bl	800a768 <USBH_Get_StringDesc>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d111      	bne.n	800a3cc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f001 f9fb 	bl	800b7c0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a3ca:	e092      	b.n	800a4f2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	f040 808f 	bne.w	800a4f2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2206      	movs	r2, #6
 800a3d8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2205      	movs	r2, #5
 800a3de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f001 f9e5 	bl	800b7c0 <osMessageQueuePut>
      break;
 800a3f6:	e07c      	b.n	800a4f2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2206      	movs	r2, #6
 800a3fc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2205      	movs	r2, #5
 800a402:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a412:	2300      	movs	r3, #0
 800a414:	2200      	movs	r2, #0
 800a416:	f001 f9d3 	bl	800b7c0 <osMessageQueuePut>
      break;
 800a41a:	e06a      	b.n	800a4f2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a422:	2b00      	cmp	r3, #0
 800a424:	d027      	beq.n	800a476 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a432:	23ff      	movs	r3, #255	; 0xff
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f997 	bl	800a768 <USBH_Get_StringDesc>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2207      	movs	r2, #7
 800a448:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a44a:	e054      	b.n	800a4f6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d151      	bne.n	800a4f6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2207      	movs	r2, #7
 800a456:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2205      	movs	r2, #5
 800a45c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a46c:	2300      	movs	r3, #0
 800a46e:	2200      	movs	r2, #0
 800a470:	f001 f9a6 	bl	800b7c0 <osMessageQueuePut>
      break;
 800a474:	e03f      	b.n	800a4f6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2207      	movs	r2, #7
 800a47a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2205      	movs	r2, #5
 800a480:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a490:	2300      	movs	r3, #0
 800a492:	2200      	movs	r2, #0
 800a494:	f001 f994 	bl	800b7c0 <osMessageQueuePut>
      break;
 800a498:	e02d      	b.n	800a4f6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d017      	beq.n	800a4d4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4b0:	23ff      	movs	r3, #255	; 0xff
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f958 	bl	800a768 <USBH_Get_StringDesc>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4c6:	e018      	b.n	800a4fa <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d115      	bne.n	800a4fa <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d2:	e012      	b.n	800a4fa <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d8:	e00f      	b.n	800a4fa <USBH_HandleEnum+0x44a>

    default:
      break;
 800a4da:	bf00      	nop
 800a4dc:	e00e      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4de:	bf00      	nop
 800a4e0:	e00c      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4e2:	bf00      	nop
 800a4e4:	e00a      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4e6:	bf00      	nop
 800a4e8:	e008      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4ea:	bf00      	nop
 800a4ec:	e006      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4ee:	bf00      	nop
 800a4f0:	e004      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4f2:	bf00      	nop
 800a4f4:	e002      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4f6:	bf00      	nop
 800a4f8:	e000      	b.n	800a4fc <USBH_HandleEnum+0x44c>
      break;
 800a4fa:	bf00      	nop
  }
  return Status;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop

0800a508 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f804 	bl	800a54a <USBH_HandleSof>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b0b      	cmp	r3, #11
 800a55a:	d10a      	bne.n	800a572 <USBH_HandleSof+0x28>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
  }
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f001 f90d 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif

  return;
 800a5a6:	bf00      	nop
}
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a5be:	bf00      	nop
}
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5fe:	2300      	movs	r3, #0
 800a600:	2200      	movs	r2, #0
 800a602:	f001 f8dd 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f003 fff8 	bl	800e626 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	791b      	ldrb	r3, [r3, #4]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fecf 	bl	800b3e0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	795b      	ldrb	r3, [r3, #5]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fec9 	bl	800b3e0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a662:	2300      	movs	r3, #0
 800a664:	2200      	movs	r2, #0
 800a666:	f001 f8ab 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a68c:	2200      	movs	r2, #0
 800a68e:	f001 f8f7 	bl	800b880 <osMessageQueueGet>
 800a692:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1f0      	bne.n	800a67c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff faa6 	bl	8009bec <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a6a0:	e7ec      	b.n	800a67c <USBH_Process_OS+0x8>

0800a6a2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f001 f87d 	bl	800b7c0 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af02      	add	r7, sp, #8
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f864 	bl	800a7be <USBH_GetDescriptor>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	73fb      	strb	r3, [r7, #15]
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10a      	bne.n	800a716 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a70c:	78fa      	ldrb	r2, [r7, #3]
 800a70e:	b292      	uxth	r2, r2
 800a710:	4619      	mov	r1, r3
 800a712:	f000 f918 	bl	800a946 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	331c      	adds	r3, #28
 800a730:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a732:	887b      	ldrh	r3, [r7, #2]
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a73c:	2100      	movs	r1, #0
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f83d 	bl	800a7be <USBH_GetDescriptor>
 800a744:	4603      	mov	r3, r0
 800a746:	72fb      	strb	r3, [r7, #11]
 800a748:	7afb      	ldrb	r3, [r7, #11]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d107      	bne.n	800a75e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a754:	887a      	ldrh	r2, [r7, #2]
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 f964 	bl	800aa26 <USBH_ParseCfgDesc>
  }

  return status;
 800a75e:	7afb      	ldrb	r3, [r7, #11]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	607a      	str	r2, [r7, #4]
 800a772:	461a      	mov	r2, r3
 800a774:	460b      	mov	r3, r1
 800a776:	72fb      	strb	r3, [r7, #11]
 800a778:	4613      	mov	r3, r2
 800a77a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a77c:	7afb      	ldrb	r3, [r7, #11]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a784:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a78c:	893b      	ldrh	r3, [r7, #8]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	460b      	mov	r3, r1
 800a792:	2100      	movs	r1, #0
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f812 	bl	800a7be <USBH_GetDescriptor>
 800a79a:	4603      	mov	r3, r0
 800a79c:	75fb      	strb	r3, [r7, #23]
 800a79e:	7dfb      	ldrb	r3, [r7, #23]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d107      	bne.n	800a7b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7aa:	893a      	ldrh	r2, [r7, #8]
 800a7ac:	6879      	ldr	r1, [r7, #4]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fa37 	bl	800ac22 <USBH_ParseStringDesc>
  }

  return status;
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	607b      	str	r3, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	72fb      	strb	r3, [r7, #11]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	789b      	ldrb	r3, [r3, #2]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d11c      	bne.n	800a812 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7d8:	7afb      	ldrb	r3, [r7, #11]
 800a7da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2206      	movs	r2, #6
 800a7e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	893a      	ldrh	r2, [r7, #8]
 800a7ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a7f0:	893b      	ldrh	r3, [r7, #8]
 800a7f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a7f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7fa:	d104      	bne.n	800a806 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f240 4209 	movw	r2, #1033	; 0x409
 800a802:	829a      	strh	r2, [r3, #20]
 800a804:	e002      	b.n	800a80c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	8b3a      	ldrh	r2, [r7, #24]
 800a810:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a812:	8b3b      	ldrh	r3, [r7, #24]
 800a814:	461a      	mov	r2, r3
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 fa50 	bl	800acbe <USBH_CtlReq>
 800a81e:	4603      	mov	r3, r0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	789b      	ldrb	r3, [r3, #2]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d10f      	bne.n	800a85c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2205      	movs	r2, #5
 800a846:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a85c:	2200      	movs	r2, #0
 800a85e:	2100      	movs	r1, #0
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fa2c 	bl	800acbe <USBH_CtlReq>
 800a866:	4603      	mov	r3, r0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	789b      	ldrb	r3, [r3, #2]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d10e      	bne.n	800a8a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2209      	movs	r2, #9
 800a88e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	887a      	ldrh	r2, [r7, #2]
 800a894:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa09 	bl	800acbe <USBH_CtlReq>
 800a8ac:	4603      	mov	r3, r0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	789b      	ldrb	r3, [r3, #2]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10f      	bne.n	800a8ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2203      	movs	r2, #3
 800a8d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f9e5 	bl	800acbe <USBH_CtlReq>
 800a8f4:	4603      	mov	r3, r0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	460b      	mov	r3, r1
 800a908:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	789b      	ldrb	r3, [r3, #2]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10f      	bne.n	800a932 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2202      	movs	r2, #2
 800a916:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	b29a      	uxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f9c1 	bl	800acbe <USBH_CtlReq>
 800a93c:	4603      	mov	r3, r0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	4613      	mov	r3, r2
 800a952:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	785a      	ldrb	r2, [r3, #1]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	3302      	adds	r3, #2
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	3303      	adds	r3, #3
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	b29b      	uxth	r3, r3
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	b29b      	uxth	r3, r3
 800a978:	4313      	orrs	r3, r2
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	791a      	ldrb	r2, [r3, #4]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	795a      	ldrb	r2, [r3, #5]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	799a      	ldrb	r2, [r3, #6]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	79da      	ldrb	r2, [r3, #7]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	2b08      	cmp	r3, #8
 800a9a4:	d939      	bls.n	800aa1a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	3309      	adds	r3, #9
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	330a      	adds	r3, #10
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	330b      	adds	r3, #11
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	021b      	lsls	r3, r3, #8
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	330c      	adds	r3, #12
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	330d      	adds	r3, #13
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	7b9a      	ldrb	r2, [r3, #14]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	7bda      	ldrb	r2, [r3, #15]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	7c1a      	ldrb	r2, [r3, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	7c5a      	ldrb	r2, [r3, #17]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	745a      	strb	r2, [r3, #17]
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b08a      	sub	sp, #40	; 0x28
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	4613      	mov	r3, r2
 800aa32:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	785a      	ldrb	r2, [r3, #1]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	3303      	adds	r3, #3
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	791a      	ldrb	r2, [r3, #4]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	795a      	ldrb	r2, [r3, #5]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	799a      	ldrb	r2, [r3, #6]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	79da      	ldrb	r2, [r3, #7]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	7a1a      	ldrb	r2, [r3, #8]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aa9c:	88fb      	ldrh	r3, [r7, #6]
 800aa9e:	2b09      	cmp	r3, #9
 800aaa0:	d95f      	bls.n	800ab62 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aaa2:	2309      	movs	r3, #9
 800aaa4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aaaa:	e051      	b.n	800ab50 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aaac:	f107 0316 	add.w	r3, r7, #22
 800aab0:	4619      	mov	r1, r3
 800aab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aab4:	f000 f8e8 	bl	800ac88 <USBH_GetNextDesc>
 800aab8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	785b      	ldrb	r3, [r3, #1]
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d146      	bne.n	800ab50 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aac6:	221a      	movs	r2, #26
 800aac8:	fb02 f303 	mul.w	r3, r2, r3
 800aacc:	3308      	adds	r3, #8
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	3302      	adds	r3, #2
 800aad4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aad8:	69f8      	ldr	r0, [r7, #28]
 800aada:	f000 f846 	bl	800ab6a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aae8:	e022      	b.n	800ab30 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aaea:	f107 0316 	add.w	r3, r7, #22
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaf2:	f000 f8c9 	bl	800ac88 <USBH_GetNextDesc>
 800aaf6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	785b      	ldrb	r3, [r3, #1]
 800aafc:	2b05      	cmp	r3, #5
 800aafe:	d117      	bne.n	800ab30 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab04:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab08:	3201      	adds	r2, #1
 800ab0a:	00d2      	lsls	r2, r2, #3
 800ab0c:	211a      	movs	r1, #26
 800ab0e:	fb01 f303 	mul.w	r3, r1, r3
 800ab12:	4413      	add	r3, r2
 800ab14:	3308      	adds	r3, #8
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4413      	add	r3, r2
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ab1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab20:	69b8      	ldr	r0, [r7, #24]
 800ab22:	f000 f851 	bl	800abc8 <USBH_ParseEPDesc>
            ep_ix++;
 800ab26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	791b      	ldrb	r3, [r3, #4]
 800ab34:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d204      	bcs.n	800ab46 <USBH_ParseCfgDesc+0x120>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	885a      	ldrh	r2, [r3, #2]
 800ab40:	8afb      	ldrh	r3, [r7, #22]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d8d1      	bhi.n	800aaea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ab46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d804      	bhi.n	800ab62 <USBH_ParseCfgDesc+0x13c>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	885a      	ldrh	r2, [r3, #2]
 800ab5c:	8afb      	ldrh	r3, [r7, #22]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d8a4      	bhi.n	800aaac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ab62:	bf00      	nop
 800ab64:	3728      	adds	r7, #40	; 0x28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781a      	ldrb	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	785a      	ldrb	r2, [r3, #1]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	789a      	ldrb	r2, [r3, #2]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	78da      	ldrb	r2, [r3, #3]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	791a      	ldrb	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	795a      	ldrb	r2, [r3, #5]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	799a      	ldrb	r2, [r3, #6]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	79da      	ldrb	r2, [r3, #7]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	7a1a      	ldrb	r2, [r3, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	721a      	strb	r2, [r3, #8]
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781a      	ldrb	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	785a      	ldrb	r2, [r3, #1]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	789a      	ldrb	r2, [r3, #2]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	78da      	ldrb	r2, [r3, #3]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	3304      	adds	r3, #4
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	3305      	adds	r3, #5
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	021b      	lsls	r3, r3, #8
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	4313      	orrs	r3, r2
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	799a      	ldrb	r2, [r3, #6]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	719a      	strb	r2, [r3, #6]
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b087      	sub	sp, #28
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	60f8      	str	r0, [r7, #12]
 800ac2a:	60b9      	str	r1, [r7, #8]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3301      	adds	r3, #1
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d120      	bne.n	800ac7c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	1e9a      	subs	r2, r3, #2
 800ac40:	88fb      	ldrh	r3, [r7, #6]
 800ac42:	4293      	cmp	r3, r2
 800ac44:	bf28      	it	cs
 800ac46:	4613      	movcs	r3, r2
 800ac48:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac50:	2300      	movs	r3, #0
 800ac52:	82fb      	strh	r3, [r7, #22]
 800ac54:	e00b      	b.n	800ac6e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac56:	8afb      	ldrh	r3, [r7, #22]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	781a      	ldrb	r2, [r3, #0]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	3301      	adds	r3, #1
 800ac66:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac68:	8afb      	ldrh	r3, [r7, #22]
 800ac6a:	3302      	adds	r3, #2
 800ac6c:	82fb      	strh	r3, [r7, #22]
 800ac6e:	8afa      	ldrh	r2, [r7, #22]
 800ac70:	8abb      	ldrh	r3, [r7, #20]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d3ef      	bcc.n	800ac56 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	701a      	strb	r2, [r3, #0]
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	881a      	ldrh	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	4413      	add	r3, r2
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4413      	add	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acb0:	68fb      	ldr	r3, [r7, #12]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b086      	sub	sp, #24
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	60f8      	str	r0, [r7, #12]
 800acc6:	60b9      	str	r1, [r7, #8]
 800acc8:	4613      	mov	r3, r2
 800acca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800accc:	2301      	movs	r3, #1
 800acce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	789b      	ldrb	r3, [r3, #2]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d002      	beq.n	800acde <USBH_CtlReq+0x20>
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d01d      	beq.n	800ad18 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800acdc:	e043      	b.n	800ad66 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	88fa      	ldrh	r2, [r7, #6]
 800ace8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2202      	movs	r2, #2
 800acf4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2203      	movs	r2, #3
 800acfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2200      	movs	r2, #0
 800ad12:	f000 fd55 	bl	800b7c0 <osMessageQueuePut>
      break;
 800ad16:	e026      	b.n	800ad66 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 f829 	bl	800ad70 <USBH_HandleControl>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <USBH_CtlReq+0x70>
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	d106      	bne.n	800ad3c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	761a      	strb	r2, [r3, #24]
 800ad3a:	e005      	b.n	800ad48 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d102      	bne.n	800ad48 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2203      	movs	r2, #3
 800ad4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f000 fd2e 	bl	800b7c0 <osMessageQueuePut>
      break;
 800ad64:	bf00      	nop
  }
  return status;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7e1b      	ldrb	r3, [r3, #24]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	2b0a      	cmp	r3, #10
 800ad88:	f200 8229 	bhi.w	800b1de <USBH_HandleControl+0x46e>
 800ad8c:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <USBH_HandleControl+0x24>)
 800ad8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad92:	bf00      	nop
 800ad94:	0800adc1 	.word	0x0800adc1
 800ad98:	0800addb 	.word	0x0800addb
 800ad9c:	0800ae7d 	.word	0x0800ae7d
 800ada0:	0800aea3 	.word	0x0800aea3
 800ada4:	0800af2f 	.word	0x0800af2f
 800ada8:	0800af59 	.word	0x0800af59
 800adac:	0800b01b 	.word	0x0800b01b
 800adb0:	0800b03d 	.word	0x0800b03d
 800adb4:	0800b0cf 	.word	0x0800b0cf
 800adb8:	0800b0f5 	.word	0x0800b0f5
 800adbc:	0800b187 	.word	0x0800b187
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f103 0110 	add.w	r1, r3, #16
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	795b      	ldrb	r3, [r3, #5]
 800adca:	461a      	mov	r2, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fa17 	bl	800b200 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2202      	movs	r2, #2
 800add6:	761a      	strb	r2, [r3, #24]
      break;
 800add8:	e20c      	b.n	800b1f4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	795b      	ldrb	r3, [r3, #5]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f003 fd0f 	bl	800e804 <USBH_LL_GetURBState>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d12c      	bne.n	800ae4a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	7c1b      	ldrb	r3, [r3, #16]
 800adf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adf8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	8adb      	ldrh	r3, [r3, #22]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae02:	7b7b      	ldrb	r3, [r7, #13]
 800ae04:	2b80      	cmp	r3, #128	; 0x80
 800ae06:	d103      	bne.n	800ae10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	761a      	strb	r2, [r3, #24]
 800ae0e:	e00d      	b.n	800ae2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2205      	movs	r2, #5
 800ae14:	761a      	strb	r2, [r3, #24]
 800ae16:	e009      	b.n	800ae2c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ae18:	7b7b      	ldrb	r3, [r7, #13]
 800ae1a:	2b80      	cmp	r3, #128	; 0x80
 800ae1c:	d103      	bne.n	800ae26 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2209      	movs	r2, #9
 800ae22:	761a      	strb	r2, [r3, #24]
 800ae24:	e002      	b.n	800ae2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2207      	movs	r2, #7
 800ae2a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2203      	movs	r2, #3
 800ae30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae40:	2300      	movs	r3, #0
 800ae42:	2200      	movs	r2, #0
 800ae44:	f000 fcbc 	bl	800b7c0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae48:	e1cb      	b.n	800b1e2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d003      	beq.n	800ae58 <USBH_HandleControl+0xe8>
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	f040 81c5 	bne.w	800b1e2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	220b      	movs	r2, #11
 800ae5c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2203      	movs	r2, #3
 800ae62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae72:	2300      	movs	r3, #0
 800ae74:	2200      	movs	r2, #0
 800ae76:	f000 fca3 	bl	800b7c0 <osMessageQueuePut>
      break;
 800ae7a:	e1b2      	b.n	800b1e2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6899      	ldr	r1, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	899a      	ldrh	r2, [r3, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	791b      	ldrb	r3, [r3, #4]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f9f2 	bl	800b27e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2204      	movs	r2, #4
 800ae9e:	761a      	strb	r2, [r3, #24]
      break;
 800aea0:	e1a8      	b.n	800b1f4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	791b      	ldrb	r3, [r3, #4]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f003 fcab 	bl	800e804 <USBH_LL_GetURBState>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d110      	bne.n	800aeda <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2209      	movs	r2, #9
 800aebc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2203      	movs	r2, #3
 800aec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aed2:	2300      	movs	r3, #0
 800aed4:	2200      	movs	r2, #0
 800aed6:	f000 fc73 	bl	800b7c0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b05      	cmp	r3, #5
 800aede:	d110      	bne.n	800af02 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aee0:	2303      	movs	r3, #3
 800aee2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2203      	movs	r2, #3
 800aee8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aef8:	2300      	movs	r3, #0
 800aefa:	2200      	movs	r2, #0
 800aefc:	f000 fc60 	bl	800b7c0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af00:	e171      	b.n	800b1e6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b04      	cmp	r3, #4
 800af06:	f040 816e 	bne.w	800b1e6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	220b      	movs	r2, #11
 800af0e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2203      	movs	r2, #3
 800af14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af24:	2300      	movs	r3, #0
 800af26:	2200      	movs	r2, #0
 800af28:	f000 fc4a 	bl	800b7c0 <osMessageQueuePut>
      break;
 800af2c:	e15b      	b.n	800b1e6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6899      	ldr	r1, [r3, #8]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	899a      	ldrh	r2, [r3, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	795b      	ldrb	r3, [r3, #5]
 800af3a:	2001      	movs	r0, #1
 800af3c:	9000      	str	r0, [sp, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f978 	bl	800b234 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2206      	movs	r2, #6
 800af54:	761a      	strb	r2, [r3, #24]
      break;
 800af56:	e14d      	b.n	800b1f4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	795b      	ldrb	r3, [r3, #5]
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f003 fc50 	bl	800e804 <USBH_LL_GetURBState>
 800af64:	4603      	mov	r3, r0
 800af66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d111      	bne.n	800af92 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2207      	movs	r2, #7
 800af72:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2203      	movs	r2, #3
 800af78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af88:	2300      	movs	r3, #0
 800af8a:	2200      	movs	r2, #0
 800af8c:	f000 fc18 	bl	800b7c0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af90:	e12b      	b.n	800b1ea <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	2b05      	cmp	r3, #5
 800af96:	d113      	bne.n	800afc0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	220c      	movs	r2, #12
 800af9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af9e:	2303      	movs	r3, #3
 800afa0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2203      	movs	r2, #3
 800afa6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afb6:	2300      	movs	r3, #0
 800afb8:	2200      	movs	r2, #0
 800afba:	f000 fc01 	bl	800b7c0 <osMessageQueuePut>
      break;
 800afbe:	e114      	b.n	800b1ea <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d111      	bne.n	800afea <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2205      	movs	r2, #5
 800afca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2203      	movs	r2, #3
 800afd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afe0:	2300      	movs	r3, #0
 800afe2:	2200      	movs	r2, #0
 800afe4:	f000 fbec 	bl	800b7c0 <osMessageQueuePut>
      break;
 800afe8:	e0ff      	b.n	800b1ea <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b04      	cmp	r3, #4
 800afee:	f040 80fc 	bne.w	800b1ea <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	220b      	movs	r2, #11
 800aff6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aff8:	2302      	movs	r3, #2
 800affa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2203      	movs	r2, #3
 800b000:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b010:	2300      	movs	r3, #0
 800b012:	2200      	movs	r2, #0
 800b014:	f000 fbd4 	bl	800b7c0 <osMessageQueuePut>
      break;
 800b018:	e0e7      	b.n	800b1ea <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	791b      	ldrb	r3, [r3, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f92b 	bl	800b27e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b02e:	b29a      	uxth	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2208      	movs	r2, #8
 800b038:	761a      	strb	r2, [r3, #24]

      break;
 800b03a:	e0db      	b.n	800b1f4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	791b      	ldrb	r3, [r3, #4]
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f003 fbde 	bl	800e804 <USBH_LL_GetURBState>
 800b048:	4603      	mov	r3, r0
 800b04a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d113      	bne.n	800b07a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	220d      	movs	r2, #13
 800b056:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2203      	movs	r2, #3
 800b060:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b070:	2300      	movs	r3, #0
 800b072:	2200      	movs	r2, #0
 800b074:	f000 fba4 	bl	800b7c0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b078:	e0b9      	b.n	800b1ee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d111      	bne.n	800b0a4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	220b      	movs	r2, #11
 800b084:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2203      	movs	r2, #3
 800b08a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b09a:	2300      	movs	r3, #0
 800b09c:	2200      	movs	r2, #0
 800b09e:	f000 fb8f 	bl	800b7c0 <osMessageQueuePut>
      break;
 800b0a2:	e0a4      	b.n	800b1ee <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b05      	cmp	r3, #5
 800b0a8:	f040 80a1 	bne.w	800b1ee <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f000 fb7a 	bl	800b7c0 <osMessageQueuePut>
      break;
 800b0cc:	e08f      	b.n	800b1ee <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	795b      	ldrb	r3, [r3, #5]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	9200      	str	r2, [sp, #0]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2100      	movs	r1, #0
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f8aa 	bl	800b234 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	220a      	movs	r2, #10
 800b0f0:	761a      	strb	r2, [r3, #24]
      break;
 800b0f2:	e07f      	b.n	800b1f4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	795b      	ldrb	r3, [r3, #5]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f003 fb82 	bl	800e804 <USBH_LL_GetURBState>
 800b100:	4603      	mov	r3, r0
 800b102:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b104:	7bbb      	ldrb	r3, [r7, #14]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d113      	bne.n	800b132 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	220d      	movs	r2, #13
 800b112:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2203      	movs	r2, #3
 800b118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	f000 fb48 	bl	800b7c0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b130:	e05f      	b.n	800b1f2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d111      	bne.n	800b15c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2209      	movs	r2, #9
 800b13c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2203      	movs	r2, #3
 800b142:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b152:	2300      	movs	r3, #0
 800b154:	2200      	movs	r2, #0
 800b156:	f000 fb33 	bl	800b7c0 <osMessageQueuePut>
      break;
 800b15a:	e04a      	b.n	800b1f2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d147      	bne.n	800b1f2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	220b      	movs	r2, #11
 800b166:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2203      	movs	r2, #3
 800b16c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b17c:	2300      	movs	r3, #0
 800b17e:	2200      	movs	r2, #0
 800b180:	f000 fb1e 	bl	800b7c0 <osMessageQueuePut>
      break;
 800b184:	e035      	b.n	800b1f2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7e5b      	ldrb	r3, [r3, #25]
 800b18a:	3301      	adds	r3, #1
 800b18c:	b2da      	uxtb	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	765a      	strb	r2, [r3, #25]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	7e5b      	ldrb	r3, [r3, #25]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d806      	bhi.n	800b1a8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b1a6:	e025      	b.n	800b1f4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1ae:	2106      	movs	r1, #6
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	795b      	ldrb	r3, [r3, #5]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f90d 	bl	800b3e0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	791b      	ldrb	r3, [r3, #4]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f907 	bl	800b3e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	73fb      	strb	r3, [r7, #15]
      break;
 800b1dc:	e00a      	b.n	800b1f4 <USBH_HandleControl+0x484>

    default:
      break;
 800b1de:	bf00      	nop
 800b1e0:	e008      	b.n	800b1f4 <USBH_HandleControl+0x484>
      break;
 800b1e2:	bf00      	nop
 800b1e4:	e006      	b.n	800b1f4 <USBH_HandleControl+0x484>
      break;
 800b1e6:	bf00      	nop
 800b1e8:	e004      	b.n	800b1f4 <USBH_HandleControl+0x484>
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e002      	b.n	800b1f4 <USBH_HandleControl+0x484>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <USBH_HandleControl+0x484>
      break;
 800b1f2:	bf00      	nop
  }

  return status;
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop

0800b200 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af04      	add	r7, sp, #16
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	4613      	mov	r3, r2
 800b20c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b20e:	79f9      	ldrb	r1, [r7, #7]
 800b210:	2300      	movs	r3, #0
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	2308      	movs	r3, #8
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	2300      	movs	r3, #0
 800b222:	2200      	movs	r2, #0
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f003 fabc 	bl	800e7a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af04      	add	r7, sp, #16
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4611      	mov	r1, r2
 800b240:	461a      	mov	r2, r3
 800b242:	460b      	mov	r3, r1
 800b244:	80fb      	strh	r3, [r7, #6]
 800b246:	4613      	mov	r3, r2
 800b248:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b258:	7979      	ldrb	r1, [r7, #5]
 800b25a:	7e3b      	ldrb	r3, [r7, #24]
 800b25c:	9303      	str	r3, [sp, #12]
 800b25e:	88fb      	ldrh	r3, [r7, #6]
 800b260:	9302      	str	r3, [sp, #8]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	2301      	movs	r3, #1
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	2300      	movs	r3, #0
 800b26c:	2200      	movs	r2, #0
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f003 fa97 	bl	800e7a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b088      	sub	sp, #32
 800b282:	af04      	add	r7, sp, #16
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	4611      	mov	r1, r2
 800b28a:	461a      	mov	r2, r3
 800b28c:	460b      	mov	r3, r1
 800b28e:	80fb      	strh	r3, [r7, #6]
 800b290:	4613      	mov	r3, r2
 800b292:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b294:	7979      	ldrb	r1, [r7, #5]
 800b296:	2300      	movs	r3, #0
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f003 fa79 	bl	800e7a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b2b0:	2300      	movs	r3, #0

}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b088      	sub	sp, #32
 800b2be:	af04      	add	r7, sp, #16
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	80fb      	strh	r3, [r7, #6]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2de:	7979      	ldrb	r1, [r7, #5]
 800b2e0:	7e3b      	ldrb	r3, [r7, #24]
 800b2e2:	9303      	str	r3, [sp, #12]
 800b2e4:	88fb      	ldrh	r3, [r7, #6]
 800b2e6:	9302      	str	r3, [sp, #8]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f003 fa54 	bl	800e7a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af04      	add	r7, sp, #16
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	4611      	mov	r1, r2
 800b310:	461a      	mov	r2, r3
 800b312:	460b      	mov	r3, r1
 800b314:	80fb      	strh	r3, [r7, #6]
 800b316:	4613      	mov	r3, r2
 800b318:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b31a:	7979      	ldrb	r1, [r7, #5]
 800b31c:	2300      	movs	r3, #0
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	2301      	movs	r3, #1
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2302      	movs	r3, #2
 800b32e:	2201      	movs	r2, #1
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f003 fa36 	bl	800e7a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af04      	add	r7, sp, #16
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	4608      	mov	r0, r1
 800b34a:	4611      	mov	r1, r2
 800b34c:	461a      	mov	r2, r3
 800b34e:	4603      	mov	r3, r0
 800b350:	70fb      	strb	r3, [r7, #3]
 800b352:	460b      	mov	r3, r1
 800b354:	70bb      	strb	r3, [r7, #2]
 800b356:	4613      	mov	r3, r2
 800b358:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b35a:	7878      	ldrb	r0, [r7, #1]
 800b35c:	78ba      	ldrb	r2, [r7, #2]
 800b35e:	78f9      	ldrb	r1, [r7, #3]
 800b360:	8b3b      	ldrh	r3, [r7, #24]
 800b362:	9302      	str	r3, [sp, #8]
 800b364:	7d3b      	ldrb	r3, [r7, #20]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	7c3b      	ldrb	r3, [r7, #16]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4603      	mov	r3, r0
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f003 f9c9 	bl	800e706 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	460b      	mov	r3, r1
 800b388:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f003 f9e8 	bl	800e764 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f836 	bl	800b41c <USBH_GetFreePipe>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b3b4:	89fb      	ldrh	r3, [r7, #14]
 800b3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d00a      	beq.n	800b3d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	89fb      	ldrh	r3, [r7, #14]
 800b3c2:	f003 030f 	and.w	r3, r3, #15
 800b3c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	33e0      	adds	r3, #224	; 0xe0
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	440b      	add	r3, r1
 800b3d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b3d4:	89fb      	ldrh	r3, [r7, #14]
 800b3d6:	b2db      	uxtb	r3, r3
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	2b0a      	cmp	r3, #10
 800b3f0:	d80d      	bhi.n	800b40e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b3f2:	78fb      	ldrb	r3, [r7, #3]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	33e0      	adds	r3, #224	; 0xe0
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b404:	6879      	ldr	r1, [r7, #4]
 800b406:	33e0      	adds	r3, #224	; 0xe0
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	440b      	add	r3, r1
 800b40c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]
 800b42c:	e00f      	b.n	800b44e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	33e0      	adds	r3, #224	; 0xe0
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d102      	bne.n	800b448 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	b29b      	uxth	r3, r3
 800b446:	e007      	b.n	800b458 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	3301      	adds	r3, #1
 800b44c:	73fb      	strb	r3, [r7, #15]
 800b44e:	7bfb      	ldrb	r3, [r7, #15]
 800b450:	2b0a      	cmp	r3, #10
 800b452:	d9ec      	bls.n	800b42e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b454:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <__NVIC_SetPriority>:
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b474:	2b00      	cmp	r3, #0
 800b476:	db0a      	blt.n	800b48e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	490c      	ldr	r1, [pc, #48]	; (800b4b0 <__NVIC_SetPriority+0x4c>)
 800b47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b482:	0112      	lsls	r2, r2, #4
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	440b      	add	r3, r1
 800b488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b48c:	e00a      	b.n	800b4a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4908      	ldr	r1, [pc, #32]	; (800b4b4 <__NVIC_SetPriority+0x50>)
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	3b04      	subs	r3, #4
 800b49c:	0112      	lsls	r2, r2, #4
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	761a      	strb	r2, [r3, #24]
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	e000e100 	.word	0xe000e100
 800b4b4:	e000ed00 	.word	0xe000ed00

0800b4b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <SysTick_Handler+0x1c>)
 800b4be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b4c0:	f001 fee8 	bl	800d294 <xTaskGetSchedulerState>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d001      	beq.n	800b4ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b4ca:	f002 fccd 	bl	800de68 <xPortSysTickHandler>
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	e000e010 	.word	0xe000e010

0800b4d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b4dc:	2100      	movs	r1, #0
 800b4de:	f06f 0004 	mvn.w	r0, #4
 800b4e2:	f7ff ffbf 	bl	800b464 <__NVIC_SetPriority>
#endif
}
 800b4e6:	bf00      	nop
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4f2:	f3ef 8305 	mrs	r3, IPSR
 800b4f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b4f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4fe:	f06f 0305 	mvn.w	r3, #5
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	e00c      	b.n	800b520 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b506:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <osKernelInitialize+0x44>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <osKernelInitialize+0x44>)
 800b510:	2201      	movs	r2, #1
 800b512:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b514:	2300      	movs	r3, #0
 800b516:	607b      	str	r3, [r7, #4]
 800b518:	e002      	b.n	800b520 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b51e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b520:	687b      	ldr	r3, [r7, #4]
}
 800b522:	4618      	mov	r0, r3
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	200004bc 	.word	0x200004bc

0800b534 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b53a:	f3ef 8305 	mrs	r3, IPSR
 800b53e:	603b      	str	r3, [r7, #0]
  return(result);
 800b540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b546:	f06f 0305 	mvn.w	r3, #5
 800b54a:	607b      	str	r3, [r7, #4]
 800b54c:	e010      	b.n	800b570 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b54e:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <osKernelStart+0x48>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d109      	bne.n	800b56a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b556:	f7ff ffbf 	bl	800b4d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b55a:	4b08      	ldr	r3, [pc, #32]	; (800b57c <osKernelStart+0x48>)
 800b55c:	2202      	movs	r2, #2
 800b55e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b560:	f001 fa50 	bl	800ca04 <vTaskStartScheduler>
      stat = osOK;
 800b564:	2300      	movs	r3, #0
 800b566:	607b      	str	r3, [r7, #4]
 800b568:	e002      	b.n	800b570 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b56e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b570:	687b      	ldr	r3, [r7, #4]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	200004bc 	.word	0x200004bc

0800b580 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b580:	b580      	push	{r7, lr}
 800b582:	b08e      	sub	sp, #56	; 0x38
 800b584:	af04      	add	r7, sp, #16
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b590:	f3ef 8305 	mrs	r3, IPSR
 800b594:	617b      	str	r3, [r7, #20]
  return(result);
 800b596:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d17e      	bne.n	800b69a <osThreadNew+0x11a>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d07b      	beq.n	800b69a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b5a2:	2380      	movs	r3, #128	; 0x80
 800b5a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b5a6:	2318      	movs	r3, #24
 800b5a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d045      	beq.n	800b646 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <osThreadNew+0x48>
        name = attr->name;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <osThreadNew+0x6e>
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	2b38      	cmp	r3, #56	; 0x38
 800b5e0:	d805      	bhi.n	800b5ee <osThreadNew+0x6e>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <osThreadNew+0x72>
        return (NULL);
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	e054      	b.n	800b69c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	089b      	lsrs	r3, r3, #2
 800b600:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00e      	beq.n	800b628 <osThreadNew+0xa8>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b5b      	cmp	r3, #91	; 0x5b
 800b610:	d90a      	bls.n	800b628 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b616:	2b00      	cmp	r3, #0
 800b618:	d006      	beq.n	800b628 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <osThreadNew+0xa8>
        mem = 1;
 800b622:	2301      	movs	r3, #1
 800b624:	61bb      	str	r3, [r7, #24]
 800b626:	e010      	b.n	800b64a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10c      	bne.n	800b64a <osThreadNew+0xca>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <osThreadNew+0xca>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d104      	bne.n	800b64a <osThreadNew+0xca>
          mem = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	61bb      	str	r3, [r7, #24]
 800b644:	e001      	b.n	800b64a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d110      	bne.n	800b672 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b658:	9202      	str	r2, [sp, #8]
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	6a3a      	ldr	r2, [r7, #32]
 800b664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 fff6 	bl	800c658 <xTaskCreateStatic>
 800b66c:	4603      	mov	r3, r0
 800b66e:	613b      	str	r3, [r7, #16]
 800b670:	e013      	b.n	800b69a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d110      	bne.n	800b69a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	f107 0310 	add.w	r3, r7, #16
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f001 f841 	bl	800c712 <xTaskCreate>
 800b690:	4603      	mov	r3, r0
 800b692:	2b01      	cmp	r3, #1
 800b694:	d001      	beq.n	800b69a <osThreadNew+0x11a>
            hTask = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b69a:	693b      	ldr	r3, [r7, #16]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3728      	adds	r7, #40	; 0x28
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ac:	f3ef 8305 	mrs	r3, IPSR
 800b6b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <osDelay+0x1c>
    stat = osErrorISR;
 800b6b8:	f06f 0305 	mvn.w	r3, #5
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	e007      	b.n	800b6d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f001 f966 	bl	800c99c <vTaskDelay>
    }
  }

  return (stat);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b08a      	sub	sp, #40	; 0x28
 800b6de:	af02      	add	r7, sp, #8
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ea:	f3ef 8305 	mrs	r3, IPSR
 800b6ee:	613b      	str	r3, [r7, #16]
  return(result);
 800b6f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d15f      	bne.n	800b7b6 <osMessageQueueNew+0xdc>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d05c      	beq.n	800b7b6 <osMessageQueueNew+0xdc>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d059      	beq.n	800b7b6 <osMessageQueueNew+0xdc>
    mem = -1;
 800b702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b706:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d029      	beq.n	800b762 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d012      	beq.n	800b73c <osMessageQueueNew+0x62>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	2b4f      	cmp	r3, #79	; 0x4f
 800b71c:	d90e      	bls.n	800b73c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	695a      	ldr	r2, [r3, #20]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	fb01 f303 	mul.w	r3, r1, r3
 800b732:	429a      	cmp	r2, r3
 800b734:	d302      	bcc.n	800b73c <osMessageQueueNew+0x62>
        mem = 1;
 800b736:	2301      	movs	r3, #1
 800b738:	61bb      	str	r3, [r7, #24]
 800b73a:	e014      	b.n	800b766 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d110      	bne.n	800b766 <osMessageQueueNew+0x8c>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10c      	bne.n	800b766 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b750:	2b00      	cmp	r3, #0
 800b752:	d108      	bne.n	800b766 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d104      	bne.n	800b766 <osMessageQueueNew+0x8c>
          mem = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	61bb      	str	r3, [r7, #24]
 800b760:	e001      	b.n	800b766 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d10b      	bne.n	800b784 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	2100      	movs	r1, #0
 800b776:	9100      	str	r1, [sp, #0]
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 fa2e 	bl	800bbdc <xQueueGenericCreateStatic>
 800b780:	61f8      	str	r0, [r7, #28]
 800b782:	e008      	b.n	800b796 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b78a:	2200      	movs	r2, #0
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fa9c 	bl	800bccc <xQueueGenericCreate>
 800b794:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00c      	beq.n	800b7b6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <osMessageQueueNew+0xd0>
        name = attr->name;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e001      	b.n	800b7ae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b7ae:	6979      	ldr	r1, [r7, #20]
 800b7b0:	69f8      	ldr	r0, [r7, #28]
 800b7b2:	f000 fef3 	bl	800c59c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b7b6:	69fb      	ldr	r3, [r7, #28]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d8:	f3ef 8305 	mrs	r3, IPSR
 800b7dc:	617b      	str	r3, [r7, #20]
  return(result);
 800b7de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d028      	beq.n	800b836 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <osMessageQueuePut+0x36>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <osMessageQueuePut+0x36>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b7f6:	f06f 0303 	mvn.w	r3, #3
 800b7fa:	61fb      	str	r3, [r7, #28]
 800b7fc:	e038      	b.n	800b870 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b802:	f107 0210 	add.w	r2, r7, #16
 800b806:	2300      	movs	r3, #0
 800b808:	68b9      	ldr	r1, [r7, #8]
 800b80a:	69b8      	ldr	r0, [r7, #24]
 800b80c:	f000 fbba 	bl	800bf84 <xQueueGenericSendFromISR>
 800b810:	4603      	mov	r3, r0
 800b812:	2b01      	cmp	r3, #1
 800b814:	d003      	beq.n	800b81e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b816:	f06f 0302 	mvn.w	r3, #2
 800b81a:	61fb      	str	r3, [r7, #28]
 800b81c:	e028      	b.n	800b870 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d025      	beq.n	800b870 <osMessageQueuePut+0xb0>
 800b824:	4b15      	ldr	r3, [pc, #84]	; (800b87c <osMessageQueuePut+0xbc>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	e01c      	b.n	800b870 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <osMessageQueuePut+0x82>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d103      	bne.n	800b84a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b842:	f06f 0303 	mvn.w	r3, #3
 800b846:	61fb      	str	r3, [r7, #28]
 800b848:	e012      	b.n	800b870 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b84a:	2300      	movs	r3, #0
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	69b8      	ldr	r0, [r7, #24]
 800b852:	f000 fa99 	bl	800bd88 <xQueueGenericSend>
 800b856:	4603      	mov	r3, r0
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d009      	beq.n	800b870 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b862:	f06f 0301 	mvn.w	r3, #1
 800b866:	61fb      	str	r3, [r7, #28]
 800b868:	e002      	b.n	800b870 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b86a:	f06f 0302 	mvn.w	r3, #2
 800b86e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b870:	69fb      	ldr	r3, [r7, #28]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3720      	adds	r7, #32
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b896:	f3ef 8305 	mrs	r3, IPSR
 800b89a:	617b      	str	r3, [r7, #20]
  return(result);
 800b89c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d028      	beq.n	800b8f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <osMessageQueueGet+0x34>
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <osMessageQueueGet+0x34>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b8b4:	f06f 0303 	mvn.w	r3, #3
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	e037      	b.n	800b92c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b8c0:	f107 0310 	add.w	r3, r7, #16
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	68b9      	ldr	r1, [r7, #8]
 800b8c8:	69b8      	ldr	r0, [r7, #24]
 800b8ca:	f000 fcd7 	bl	800c27c <xQueueReceiveFromISR>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d003      	beq.n	800b8dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b8d4:	f06f 0302 	mvn.w	r3, #2
 800b8d8:	61fb      	str	r3, [r7, #28]
 800b8da:	e027      	b.n	800b92c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d024      	beq.n	800b92c <osMessageQueueGet+0xac>
 800b8e2:	4b15      	ldr	r3, [pc, #84]	; (800b938 <osMessageQueueGet+0xb8>)
 800b8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	e01b      	b.n	800b92c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <osMessageQueueGet+0x80>
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d103      	bne.n	800b908 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b900:	f06f 0303 	mvn.w	r3, #3
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	e011      	b.n	800b92c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	69b8      	ldr	r0, [r7, #24]
 800b90e:	f000 fbd5 	bl	800c0bc <xQueueReceive>
 800b912:	4603      	mov	r3, r0
 800b914:	2b01      	cmp	r3, #1
 800b916:	d009      	beq.n	800b92c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b91e:	f06f 0301 	mvn.w	r3, #1
 800b922:	61fb      	str	r3, [r7, #28]
 800b924:	e002      	b.n	800b92c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b926:	f06f 0302 	mvn.w	r3, #2
 800b92a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b92c:	69fb      	ldr	r3, [r7, #28]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4a07      	ldr	r2, [pc, #28]	; (800b968 <vApplicationGetIdleTaskMemory+0x2c>)
 800b94c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	4a06      	ldr	r2, [pc, #24]	; (800b96c <vApplicationGetIdleTaskMemory+0x30>)
 800b952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2280      	movs	r2, #128	; 0x80
 800b958:	601a      	str	r2, [r3, #0]
}
 800b95a:	bf00      	nop
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	200004c0 	.word	0x200004c0
 800b96c:	2000051c 	.word	0x2000051c

0800b970 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4a07      	ldr	r2, [pc, #28]	; (800b99c <vApplicationGetTimerTaskMemory+0x2c>)
 800b980:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	4a06      	ldr	r2, [pc, #24]	; (800b9a0 <vApplicationGetTimerTaskMemory+0x30>)
 800b986:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b98e:	601a      	str	r2, [r3, #0]
}
 800b990:	bf00      	nop
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	2000071c 	.word	0x2000071c
 800b9a0:	20000778 	.word	0x20000778

0800b9a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f103 0208 	add.w	r2, r3, #8
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f103 0208 	add.w	r2, r3, #8
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f103 0208 	add.w	r2, r3, #8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	601a      	str	r2, [r3, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba46:	b480      	push	{r7}
 800ba48:	b085      	sub	sp, #20
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5c:	d103      	bne.n	800ba66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e00c      	b.n	800ba80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3308      	adds	r3, #8
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	e002      	b.n	800ba74 <vListInsert+0x2e>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d2f6      	bcs.n	800ba6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	685a      	ldr	r2, [r3, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	601a      	str	r2, [r3, #0]
}
 800baac:	bf00      	nop
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6892      	ldr	r2, [r2, #8]
 800bace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	6852      	ldr	r2, [r2, #4]
 800bad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d103      	bne.n	800baec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	1e5a      	subs	r2, r3, #1
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb36:	f002 f905 	bl	800dd44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	68f9      	ldr	r1, [r7, #12]
 800bb44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb46:	fb01 f303 	mul.w	r3, r1, r3
 800bb4a:	441a      	add	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb66:	3b01      	subs	r3, #1
 800bb68:	68f9      	ldr	r1, [r7, #12]
 800bb6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb6c:	fb01 f303 	mul.w	r3, r1, r3
 800bb70:	441a      	add	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	22ff      	movs	r2, #255	; 0xff
 800bb7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	22ff      	movs	r2, #255	; 0xff
 800bb82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d114      	bne.n	800bbb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01a      	beq.n	800bbca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3310      	adds	r3, #16
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 f9bd 	bl	800cf18 <xTaskRemoveFromEventList>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d012      	beq.n	800bbca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bba4:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <xQueueGenericReset+0xcc>)
 800bba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	e009      	b.n	800bbca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3310      	adds	r3, #16
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fef2 	bl	800b9a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3324      	adds	r3, #36	; 0x24
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff feed 	bl	800b9a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbca:	f002 f8eb 	bl	800dda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbce:	2301      	movs	r3, #1
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	e000ed04 	.word	0xe000ed04

0800bbdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10a      	bne.n	800bc22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <xQueueGenericCreateStatic+0x52>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <xQueueGenericCreateStatic+0x56>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e000      	b.n	800bc34 <xQueueGenericCreateStatic+0x58>
 800bc32:	2300      	movs	r3, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10a      	bne.n	800bc4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	623b      	str	r3, [r7, #32]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xQueueGenericCreateStatic+0x7e>
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d101      	bne.n	800bc5e <xQueueGenericCreateStatic+0x82>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e000      	b.n	800bc60 <xQueueGenericCreateStatic+0x84>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	61fb      	str	r3, [r7, #28]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc7a:	2350      	movs	r3, #80	; 0x50
 800bc7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b50      	cmp	r3, #80	; 0x50
 800bc82:	d00a      	beq.n	800bc9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	61bb      	str	r3, [r7, #24]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00d      	beq.n	800bcc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f83f 	bl	800bd40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3730      	adds	r7, #48	; 0x30
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08a      	sub	sp, #40	; 0x28
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	fb02 f303 	mul.w	r3, r2, r3
 800bcfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	3350      	adds	r3, #80	; 0x50
 800bd04:	4618      	mov	r0, r3
 800bd06:	f002 f93f 	bl	800df88 <pvPortMalloc>
 800bd0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d011      	beq.n	800bd36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	3350      	adds	r3, #80	; 0x50
 800bd1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd24:	79fa      	ldrb	r2, [r7, #7]
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	68b9      	ldr	r1, [r7, #8]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f805 	bl	800bd40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd36:	69bb      	ldr	r3, [r7, #24]
	}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3720      	adds	r7, #32
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e002      	b.n	800bd62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd6e:	2101      	movs	r1, #1
 800bd70:	69b8      	ldr	r0, [r7, #24]
 800bd72:	f7ff fecb 	bl	800bb0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	78fa      	ldrb	r2, [r7, #3]
 800bd7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08e      	sub	sp, #56	; 0x38
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
 800bd94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd96:	2300      	movs	r3, #0
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueGenericSend+0x32>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d103      	bne.n	800bdc8 <xQueueGenericSend+0x40>
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <xQueueGenericSend+0x44>
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e000      	b.n	800bdce <xQueueGenericSend+0x46>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10a      	bne.n	800bde8 <xQueueGenericSend+0x60>
	__asm volatile
 800bdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd6:	f383 8811 	msr	BASEPRI, r3
 800bdda:	f3bf 8f6f 	isb	sy
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bde4:	bf00      	nop
 800bde6:	e7fe      	b.n	800bde6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d103      	bne.n	800bdf6 <xQueueGenericSend+0x6e>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d101      	bne.n	800bdfa <xQueueGenericSend+0x72>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e000      	b.n	800bdfc <xQueueGenericSend+0x74>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10a      	bne.n	800be16 <xQueueGenericSend+0x8e>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	623b      	str	r3, [r7, #32]
}
 800be12:	bf00      	nop
 800be14:	e7fe      	b.n	800be14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be16:	f001 fa3d 	bl	800d294 <xTaskGetSchedulerState>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d102      	bne.n	800be26 <xQueueGenericSend+0x9e>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d101      	bne.n	800be2a <xQueueGenericSend+0xa2>
 800be26:	2301      	movs	r3, #1
 800be28:	e000      	b.n	800be2c <xQueueGenericSend+0xa4>
 800be2a:	2300      	movs	r3, #0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10a      	bne.n	800be46 <xQueueGenericSend+0xbe>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	61fb      	str	r3, [r7, #28]
}
 800be42:	bf00      	nop
 800be44:	e7fe      	b.n	800be44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be46:	f001 ff7d 	bl	800dd44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be52:	429a      	cmp	r2, r3
 800be54:	d302      	bcc.n	800be5c <xQueueGenericSend+0xd4>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d129      	bne.n	800beb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be62:	f000 fa8b 	bl	800c37c <prvCopyDataToQueue>
 800be66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d010      	beq.n	800be92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	3324      	adds	r3, #36	; 0x24
 800be74:	4618      	mov	r0, r3
 800be76:	f001 f84f 	bl	800cf18 <xTaskRemoveFromEventList>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d013      	beq.n	800bea8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be80:	4b3f      	ldr	r3, [pc, #252]	; (800bf80 <xQueueGenericSend+0x1f8>)
 800be82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	e00a      	b.n	800bea8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	2b00      	cmp	r3, #0
 800be96:	d007      	beq.n	800bea8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be98:	4b39      	ldr	r3, [pc, #228]	; (800bf80 <xQueueGenericSend+0x1f8>)
 800be9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bea8:	f001 ff7c 	bl	800dda4 <vPortExitCritical>
				return pdPASS;
 800beac:	2301      	movs	r3, #1
 800beae:	e063      	b.n	800bf78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d103      	bne.n	800bebe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800beb6:	f001 ff75 	bl	800dda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	e05c      	b.n	800bf78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d106      	bne.n	800bed2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bec4:	f107 0314 	add.w	r3, r7, #20
 800bec8:	4618      	mov	r0, r3
 800beca:	f001 f889 	bl	800cfe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bece:	2301      	movs	r3, #1
 800bed0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bed2:	f001 ff67 	bl	800dda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bed6:	f000 fdfb 	bl	800cad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800beda:	f001 ff33 	bl	800dd44 <vPortEnterCritical>
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bee4:	b25b      	sxtb	r3, r3
 800bee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beea:	d103      	bne.n	800bef4 <xQueueGenericSend+0x16c>
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800befa:	b25b      	sxtb	r3, r3
 800befc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf00:	d103      	bne.n	800bf0a <xQueueGenericSend+0x182>
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf0a:	f001 ff4b 	bl	800dda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf0e:	1d3a      	adds	r2, r7, #4
 800bf10:	f107 0314 	add.w	r3, r7, #20
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 f878 	bl	800d00c <xTaskCheckForTimeOut>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d124      	bne.n	800bf6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf24:	f000 fb22 	bl	800c56c <prvIsQueueFull>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d018      	beq.n	800bf60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	3310      	adds	r3, #16
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	4611      	mov	r1, r2
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 ff9e 	bl	800ce78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf3e:	f000 faad 	bl	800c49c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf42:	f000 fdd3 	bl	800caec <xTaskResumeAll>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f47f af7c 	bne.w	800be46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	; (800bf80 <xQueueGenericSend+0x1f8>)
 800bf50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	e772      	b.n	800be46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf62:	f000 fa9b 	bl	800c49c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf66:	f000 fdc1 	bl	800caec <xTaskResumeAll>
 800bf6a:	e76c      	b.n	800be46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf6e:	f000 fa95 	bl	800c49c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf72:	f000 fdbb 	bl	800caec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3738      	adds	r7, #56	; 0x38
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	e000ed04 	.word	0xe000ed04

0800bf84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b090      	sub	sp, #64	; 0x40
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfae:	bf00      	nop
 800bfb0:	e7fe      	b.n	800bfb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d103      	bne.n	800bfc0 <xQueueGenericSendFromISR+0x3c>
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <xQueueGenericSendFromISR+0x40>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e000      	b.n	800bfc6 <xQueueGenericSendFromISR+0x42>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10a      	bne.n	800bfe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfdc:	bf00      	nop
 800bfde:	e7fe      	b.n	800bfde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d103      	bne.n	800bfee <xQueueGenericSendFromISR+0x6a>
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d101      	bne.n	800bff2 <xQueueGenericSendFromISR+0x6e>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e000      	b.n	800bff4 <xQueueGenericSendFromISR+0x70>
 800bff2:	2300      	movs	r3, #0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	623b      	str	r3, [r7, #32]
}
 800c00a:	bf00      	nop
 800c00c:	e7fe      	b.n	800c00c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c00e:	f001 ff7b 	bl	800df08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c012:	f3ef 8211 	mrs	r2, BASEPRI
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	61fa      	str	r2, [r7, #28]
 800c028:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c02a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c02c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c036:	429a      	cmp	r2, r3
 800c038:	d302      	bcc.n	800c040 <xQueueGenericSendFromISR+0xbc>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d12f      	bne.n	800c0a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c056:	f000 f991 	bl	800c37c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c05a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c05e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c062:	d112      	bne.n	800c08a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d016      	beq.n	800c09a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	3324      	adds	r3, #36	; 0x24
 800c070:	4618      	mov	r0, r3
 800c072:	f000 ff51 	bl	800cf18 <xTaskRemoveFromEventList>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00e      	beq.n	800c09a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	e007      	b.n	800c09a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c08a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c08e:	3301      	adds	r3, #1
 800c090:	b2db      	uxtb	r3, r3
 800c092:	b25a      	sxtb	r2, r3
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c09a:	2301      	movs	r3, #1
 800c09c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c09e:	e001      	b.n	800c0a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c0ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3740      	adds	r7, #64	; 0x40
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	; 0x30
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10a      	bne.n	800c0ec <xQueueReceive+0x30>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	623b      	str	r3, [r7, #32]
}
 800c0e8:	bf00      	nop
 800c0ea:	e7fe      	b.n	800c0ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d103      	bne.n	800c0fa <xQueueReceive+0x3e>
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d101      	bne.n	800c0fe <xQueueReceive+0x42>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e000      	b.n	800c100 <xQueueReceive+0x44>
 800c0fe:	2300      	movs	r3, #0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <xQueueReceive+0x5e>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	61fb      	str	r3, [r7, #28]
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c11a:	f001 f8bb 	bl	800d294 <xTaskGetSchedulerState>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d102      	bne.n	800c12a <xQueueReceive+0x6e>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <xQueueReceive+0x72>
 800c12a:	2301      	movs	r3, #1
 800c12c:	e000      	b.n	800c130 <xQueueReceive+0x74>
 800c12e:	2300      	movs	r3, #0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <xQueueReceive+0x8e>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	61bb      	str	r3, [r7, #24]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c14a:	f001 fdfb 	bl	800dd44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01f      	beq.n	800c19a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c15e:	f000 f977 	bl	800c450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	1e5a      	subs	r2, r3, #1
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00f      	beq.n	800c192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	3310      	adds	r3, #16
 800c176:	4618      	mov	r0, r3
 800c178:	f000 fece 	bl	800cf18 <xTaskRemoveFromEventList>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d007      	beq.n	800c192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c182:	4b3d      	ldr	r3, [pc, #244]	; (800c278 <xQueueReceive+0x1bc>)
 800c184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c192:	f001 fe07 	bl	800dda4 <vPortExitCritical>
				return pdPASS;
 800c196:	2301      	movs	r3, #1
 800c198:	e069      	b.n	800c26e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1a0:	f001 fe00 	bl	800dda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	e062      	b.n	800c26e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1ae:	f107 0310 	add.w	r3, r7, #16
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 ff14 	bl	800cfe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1bc:	f001 fdf2 	bl	800dda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1c0:	f000 fc86 	bl	800cad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1c4:	f001 fdbe 	bl	800dd44 <vPortEnterCritical>
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ce:	b25b      	sxtb	r3, r3
 800c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1d4:	d103      	bne.n	800c1de <xQueueReceive+0x122>
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e4:	b25b      	sxtb	r3, r3
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ea:	d103      	bne.n	800c1f4 <xQueueReceive+0x138>
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f4:	f001 fdd6 	bl	800dda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1f8:	1d3a      	adds	r2, r7, #4
 800c1fa:	f107 0310 	add.w	r3, r7, #16
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f000 ff03 	bl	800d00c <xTaskCheckForTimeOut>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d123      	bne.n	800c254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c20e:	f000 f997 	bl	800c540 <prvIsQueueEmpty>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d017      	beq.n	800c248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	3324      	adds	r3, #36	; 0x24
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	4611      	mov	r1, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fe29 	bl	800ce78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c228:	f000 f938 	bl	800c49c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c22c:	f000 fc5e 	bl	800caec <xTaskResumeAll>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d189      	bne.n	800c14a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c236:	4b10      	ldr	r3, [pc, #64]	; (800c278 <xQueueReceive+0x1bc>)
 800c238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	e780      	b.n	800c14a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24a:	f000 f927 	bl	800c49c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c24e:	f000 fc4d 	bl	800caec <xTaskResumeAll>
 800c252:	e77a      	b.n	800c14a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c256:	f000 f921 	bl	800c49c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c25a:	f000 fc47 	bl	800caec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c260:	f000 f96e 	bl	800c540 <prvIsQueueEmpty>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	f43f af6f 	beq.w	800c14a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c26c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3730      	adds	r7, #48	; 0x30
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	e000ed04 	.word	0xe000ed04

0800c27c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08e      	sub	sp, #56	; 0x38
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10a      	bne.n	800c2a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	623b      	str	r3, [r7, #32]
}
 800c2a4:	bf00      	nop
 800c2a6:	e7fe      	b.n	800c2a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d103      	bne.n	800c2b6 <xQueueReceiveFromISR+0x3a>
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <xQueueReceiveFromISR+0x3e>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <xQueueReceiveFromISR+0x40>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	61fb      	str	r3, [r7, #28]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2d6:	f001 fe17 	bl	800df08 <vPortValidateInterruptPriority>
	__asm volatile
 800c2da:	f3ef 8211 	mrs	r2, BASEPRI
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	61ba      	str	r2, [r7, #24]
 800c2f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c2f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d02f      	beq.n	800c362 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c30c:	68b9      	ldr	r1, [r7, #8]
 800c30e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c310:	f000 f89e 	bl	800c450 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	1e5a      	subs	r2, r3, #1
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c31c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c324:	d112      	bne.n	800c34c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d016      	beq.n	800c35c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	3310      	adds	r3, #16
 800c332:	4618      	mov	r0, r3
 800c334:	f000 fdf0 	bl	800cf18 <xTaskRemoveFromEventList>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00e      	beq.n	800c35c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	e007      	b.n	800c35c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c350:	3301      	adds	r3, #1
 800c352:	b2db      	uxtb	r3, r3
 800c354:	b25a      	sxtb	r2, r3
 800c356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c35c:	2301      	movs	r3, #1
 800c35e:	637b      	str	r3, [r7, #52]	; 0x34
 800c360:	e001      	b.n	800c366 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c362:	2300      	movs	r3, #0
 800c364:	637b      	str	r3, [r7, #52]	; 0x34
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f383 8811 	msr	BASEPRI, r3
}
 800c370:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c374:	4618      	mov	r0, r3
 800c376:	3738      	adds	r7, #56	; 0x38
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10d      	bne.n	800c3b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d14d      	bne.n	800c43e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 ff92 	bl	800d2d0 <xTaskPriorityDisinherit>
 800c3ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	609a      	str	r2, [r3, #8]
 800c3b4:	e043      	b.n	800c43e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d119      	bne.n	800c3f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6858      	ldr	r0, [r3, #4]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	68b9      	ldr	r1, [r7, #8]
 800c3c8:	f002 fb04 	bl	800e9d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	685a      	ldr	r2, [r3, #4]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d4:	441a      	add	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d32b      	bcc.n	800c43e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	605a      	str	r2, [r3, #4]
 800c3ee:	e026      	b.n	800c43e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68d8      	ldr	r0, [r3, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	f002 faea 	bl	800e9d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	68da      	ldr	r2, [r3, #12]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c408:	425b      	negs	r3, r3
 800c40a:	441a      	add	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	68da      	ldr	r2, [r3, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d207      	bcs.n	800c42c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	689a      	ldr	r2, [r3, #8]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	425b      	negs	r3, r3
 800c426:	441a      	add	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d105      	bne.n	800c43e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c446:	697b      	ldr	r3, [r7, #20]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d018      	beq.n	800c494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46a:	441a      	add	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68da      	ldr	r2, [r3, #12]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d303      	bcc.n	800c484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68d9      	ldr	r1, [r3, #12]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48c:	461a      	mov	r2, r3
 800c48e:	6838      	ldr	r0, [r7, #0]
 800c490:	f002 faa0 	bl	800e9d4 <memcpy>
	}
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4a4:	f001 fc4e 	bl	800dd44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4b0:	e011      	b.n	800c4d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d012      	beq.n	800c4e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	3324      	adds	r3, #36	; 0x24
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fd2a 	bl	800cf18 <xTaskRemoveFromEventList>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4ca:	f000 fe01 	bl	800d0d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dce9      	bgt.n	800c4b2 <prvUnlockQueue+0x16>
 800c4de:	e000      	b.n	800c4e2 <prvUnlockQueue+0x46>
					break;
 800c4e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	22ff      	movs	r2, #255	; 0xff
 800c4e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4ea:	f001 fc5b 	bl	800dda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4ee:	f001 fc29 	bl	800dd44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4fa:	e011      	b.n	800c520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d012      	beq.n	800c52a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3310      	adds	r3, #16
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 fd05 	bl	800cf18 <xTaskRemoveFromEventList>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c514:	f000 fddc 	bl	800d0d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	3b01      	subs	r3, #1
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c524:	2b00      	cmp	r3, #0
 800c526:	dce9      	bgt.n	800c4fc <prvUnlockQueue+0x60>
 800c528:	e000      	b.n	800c52c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c52a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	22ff      	movs	r2, #255	; 0xff
 800c530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c534:	f001 fc36 	bl	800dda4 <vPortExitCritical>
}
 800c538:	bf00      	nop
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c548:	f001 fbfc 	bl	800dd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c550:	2b00      	cmp	r3, #0
 800c552:	d102      	bne.n	800c55a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c554:	2301      	movs	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	e001      	b.n	800c55e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c55a:	2300      	movs	r3, #0
 800c55c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c55e:	f001 fc21 	bl	800dda4 <vPortExitCritical>

	return xReturn;
 800c562:	68fb      	ldr	r3, [r7, #12]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c574:	f001 fbe6 	bl	800dd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c580:	429a      	cmp	r2, r3
 800c582:	d102      	bne.n	800c58a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c584:	2301      	movs	r3, #1
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	e001      	b.n	800c58e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c58e:	f001 fc09 	bl	800dda4 <vPortExitCritical>

	return xReturn;
 800c592:	68fb      	ldr	r3, [r7, #12]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	e014      	b.n	800c5d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c5ac:	4a0f      	ldr	r2, [pc, #60]	; (800c5ec <vQueueAddToRegistry+0x50>)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10b      	bne.n	800c5d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c5b8:	490c      	ldr	r1, [pc, #48]	; (800c5ec <vQueueAddToRegistry+0x50>)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c5c2:	4a0a      	ldr	r2, [pc, #40]	; (800c5ec <vQueueAddToRegistry+0x50>)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	00db      	lsls	r3, r3, #3
 800c5c8:	4413      	add	r3, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c5ce:	e006      	b.n	800c5de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b07      	cmp	r3, #7
 800c5da:	d9e7      	bls.n	800c5ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5dc:	bf00      	nop
 800c5de:	bf00      	nop
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	20004fdc 	.word	0x20004fdc

0800c5f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c600:	f001 fba0 	bl	800dd44 <vPortEnterCritical>
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c60a:	b25b      	sxtb	r3, r3
 800c60c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c610:	d103      	bne.n	800c61a <vQueueWaitForMessageRestricted+0x2a>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c620:	b25b      	sxtb	r3, r3
 800c622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c626:	d103      	bne.n	800c630 <vQueueWaitForMessageRestricted+0x40>
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c630:	f001 fbb8 	bl	800dda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d106      	bne.n	800c64a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	3324      	adds	r3, #36	; 0x24
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	68b9      	ldr	r1, [r7, #8]
 800c644:	4618      	mov	r0, r3
 800c646:	f000 fc3b 	bl	800cec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c64a:	6978      	ldr	r0, [r7, #20]
 800c64c:	f7ff ff26 	bl	800c49c <prvUnlockQueue>
	}
 800c650:	bf00      	nop
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08e      	sub	sp, #56	; 0x38
 800c65c:	af04      	add	r7, sp, #16
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	623b      	str	r3, [r7, #32]
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <xTaskCreateStatic+0x46>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	61fb      	str	r3, [r7, #28]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c69e:	235c      	movs	r3, #92	; 0x5c
 800c6a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	2b5c      	cmp	r3, #92	; 0x5c
 800c6a6:	d00a      	beq.n	800c6be <xTaskCreateStatic+0x66>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	61bb      	str	r3, [r7, #24]
}
 800c6ba:	bf00      	nop
 800c6bc:	e7fe      	b.n	800c6bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01e      	beq.n	800c704 <xTaskCreateStatic+0xac>
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d01b      	beq.n	800c704 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	2202      	movs	r2, #2
 800c6da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6de:	2300      	movs	r3, #0
 800c6e0:	9303      	str	r3, [sp, #12]
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e4:	9302      	str	r3, [sp, #8]
 800c6e6:	f107 0314 	add.w	r3, r7, #20
 800c6ea:	9301      	str	r3, [sp, #4]
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	68b9      	ldr	r1, [r7, #8]
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 f850 	bl	800c79c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6fe:	f000 f8dd 	bl	800c8bc <prvAddNewTaskToReadyList>
 800c702:	e001      	b.n	800c708 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c708:	697b      	ldr	r3, [r7, #20]
	}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3728      	adds	r7, #40	; 0x28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c712:	b580      	push	{r7, lr}
 800c714:	b08c      	sub	sp, #48	; 0x30
 800c716:	af04      	add	r7, sp, #16
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	60b9      	str	r1, [r7, #8]
 800c71c:	603b      	str	r3, [r7, #0]
 800c71e:	4613      	mov	r3, r2
 800c720:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c722:	88fb      	ldrh	r3, [r7, #6]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4618      	mov	r0, r3
 800c728:	f001 fc2e 	bl	800df88 <pvPortMalloc>
 800c72c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00e      	beq.n	800c752 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c734:	205c      	movs	r0, #92	; 0x5c
 800c736:	f001 fc27 	bl	800df88 <pvPortMalloc>
 800c73a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	631a      	str	r2, [r3, #48]	; 0x30
 800c748:	e005      	b.n	800c756 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c74a:	6978      	ldr	r0, [r7, #20]
 800c74c:	f001 fce8 	bl	800e120 <vPortFree>
 800c750:	e001      	b.n	800c756 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c752:	2300      	movs	r3, #0
 800c754:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d017      	beq.n	800c78c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c764:	88fa      	ldrh	r2, [r7, #6]
 800c766:	2300      	movs	r3, #0
 800c768:	9303      	str	r3, [sp, #12]
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	9302      	str	r3, [sp, #8]
 800c76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	68b9      	ldr	r1, [r7, #8]
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f000 f80e 	bl	800c79c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c780:	69f8      	ldr	r0, [r7, #28]
 800c782:	f000 f89b 	bl	800c8bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c786:	2301      	movs	r3, #1
 800c788:	61bb      	str	r3, [r7, #24]
 800c78a:	e002      	b.n	800c792 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c78c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c790:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c792:	69bb      	ldr	r3, [r7, #24]
	}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	21a5      	movs	r1, #165	; 0xa5
 800c7b6:	f002 f91b 	bl	800e9f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	f023 0307 	bic.w	r3, r3, #7
 800c7d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	617b      	str	r3, [r7, #20]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d01f      	beq.n	800c83a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	61fb      	str	r3, [r7, #28]
 800c7fe:	e012      	b.n	800c826 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	4413      	add	r3, r2
 800c806:	7819      	ldrb	r1, [r3, #0]
 800c808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	4413      	add	r3, r2
 800c80e:	3334      	adds	r3, #52	; 0x34
 800c810:	460a      	mov	r2, r1
 800c812:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	4413      	add	r3, r2
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d006      	beq.n	800c82e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	3301      	adds	r3, #1
 800c824:	61fb      	str	r3, [r7, #28]
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2b0f      	cmp	r3, #15
 800c82a:	d9e9      	bls.n	800c800 <prvInitialiseNewTask+0x64>
 800c82c:	e000      	b.n	800c830 <prvInitialiseNewTask+0x94>
			{
				break;
 800c82e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c838:	e003      	b.n	800c842 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	2b37      	cmp	r3, #55	; 0x37
 800c846:	d901      	bls.n	800c84c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c848:	2337      	movs	r3, #55	; 0x37
 800c84a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c850:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c856:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	2200      	movs	r2, #0
 800c85c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	3304      	adds	r3, #4
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff f8be 	bl	800b9e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	3318      	adds	r3, #24
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff f8b9 	bl	800b9e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c876:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c886:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	2200      	movs	r2, #0
 800c88c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	68f9      	ldr	r1, [r7, #12]
 800c89a:	69b8      	ldr	r0, [r7, #24]
 800c89c:	f001 f928 	bl	800daf0 <pxPortInitialiseStack>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8b2:	bf00      	nop
 800c8b4:	3720      	adds	r7, #32
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8c4:	f001 fa3e 	bl	800dd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8c8:	4b2d      	ldr	r3, [pc, #180]	; (800c980 <prvAddNewTaskToReadyList+0xc4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	4a2c      	ldr	r2, [pc, #176]	; (800c980 <prvAddNewTaskToReadyList+0xc4>)
 800c8d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8d2:	4b2c      	ldr	r3, [pc, #176]	; (800c984 <prvAddNewTaskToReadyList+0xc8>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d109      	bne.n	800c8ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8da:	4a2a      	ldr	r2, [pc, #168]	; (800c984 <prvAddNewTaskToReadyList+0xc8>)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8e0:	4b27      	ldr	r3, [pc, #156]	; (800c980 <prvAddNewTaskToReadyList+0xc4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d110      	bne.n	800c90a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8e8:	f000 fc16 	bl	800d118 <prvInitialiseTaskLists>
 800c8ec:	e00d      	b.n	800c90a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8ee:	4b26      	ldr	r3, [pc, #152]	; (800c988 <prvAddNewTaskToReadyList+0xcc>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d109      	bne.n	800c90a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8f6:	4b23      	ldr	r3, [pc, #140]	; (800c984 <prvAddNewTaskToReadyList+0xc8>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c900:	429a      	cmp	r2, r3
 800c902:	d802      	bhi.n	800c90a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c904:	4a1f      	ldr	r2, [pc, #124]	; (800c984 <prvAddNewTaskToReadyList+0xc8>)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c90a:	4b20      	ldr	r3, [pc, #128]	; (800c98c <prvAddNewTaskToReadyList+0xd0>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3301      	adds	r3, #1
 800c910:	4a1e      	ldr	r2, [pc, #120]	; (800c98c <prvAddNewTaskToReadyList+0xd0>)
 800c912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c914:	4b1d      	ldr	r3, [pc, #116]	; (800c98c <prvAddNewTaskToReadyList+0xd0>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c920:	4b1b      	ldr	r3, [pc, #108]	; (800c990 <prvAddNewTaskToReadyList+0xd4>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d903      	bls.n	800c930 <prvAddNewTaskToReadyList+0x74>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92c:	4a18      	ldr	r2, [pc, #96]	; (800c990 <prvAddNewTaskToReadyList+0xd4>)
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c934:	4613      	mov	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4a15      	ldr	r2, [pc, #84]	; (800c994 <prvAddNewTaskToReadyList+0xd8>)
 800c93e:	441a      	add	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3304      	adds	r3, #4
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7ff f859 	bl	800b9fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c94c:	f001 fa2a 	bl	800dda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c950:	4b0d      	ldr	r3, [pc, #52]	; (800c988 <prvAddNewTaskToReadyList+0xcc>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00e      	beq.n	800c976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c958:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <prvAddNewTaskToReadyList+0xc8>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c962:	429a      	cmp	r2, r3
 800c964:	d207      	bcs.n	800c976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c966:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <prvAddNewTaskToReadyList+0xdc>)
 800c968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c976:	bf00      	nop
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	2000104c 	.word	0x2000104c
 800c984:	20000b78 	.word	0x20000b78
 800c988:	20001058 	.word	0x20001058
 800c98c:	20001068 	.word	0x20001068
 800c990:	20001054 	.word	0x20001054
 800c994:	20000b7c 	.word	0x20000b7c
 800c998:	e000ed04 	.word	0xe000ed04

0800c99c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d017      	beq.n	800c9de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <vTaskDelay+0x60>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00a      	beq.n	800c9cc <vTaskDelay+0x30>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60bb      	str	r3, [r7, #8]
}
 800c9c8:	bf00      	nop
 800c9ca:	e7fe      	b.n	800c9ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c9cc:	f000 f880 	bl	800cad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fcea 	bl	800d3ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c9d8:	f000 f888 	bl	800caec <xTaskResumeAll>
 800c9dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d107      	bne.n	800c9f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c9e4:	4b06      	ldr	r3, [pc, #24]	; (800ca00 <vTaskDelay+0x64>)
 800c9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9f4:	bf00      	nop
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	20001074 	.word	0x20001074
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08a      	sub	sp, #40	; 0x28
 800ca08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca12:	463a      	mov	r2, r7
 800ca14:	1d39      	adds	r1, r7, #4
 800ca16:	f107 0308 	add.w	r3, r7, #8
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe ff8e 	bl	800b93c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	9202      	str	r2, [sp, #8]
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	2300      	movs	r3, #0
 800ca30:	460a      	mov	r2, r1
 800ca32:	4921      	ldr	r1, [pc, #132]	; (800cab8 <vTaskStartScheduler+0xb4>)
 800ca34:	4821      	ldr	r0, [pc, #132]	; (800cabc <vTaskStartScheduler+0xb8>)
 800ca36:	f7ff fe0f 	bl	800c658 <xTaskCreateStatic>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	4a20      	ldr	r2, [pc, #128]	; (800cac0 <vTaskStartScheduler+0xbc>)
 800ca3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca40:	4b1f      	ldr	r3, [pc, #124]	; (800cac0 <vTaskStartScheduler+0xbc>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	e001      	b.n	800ca52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d102      	bne.n	800ca5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca58:	f000 fcfc 	bl	800d454 <xTimerCreateTimerTask>
 800ca5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d116      	bne.n	800ca92 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	613b      	str	r3, [r7, #16]
}
 800ca76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca78:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <vTaskStartScheduler+0xc0>)
 800ca7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca80:	4b11      	ldr	r3, [pc, #68]	; (800cac8 <vTaskStartScheduler+0xc4>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <vTaskStartScheduler+0xc8>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca8c:	f001 f8b8 	bl	800dc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca90:	e00e      	b.n	800cab0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca98:	d10a      	bne.n	800cab0 <vTaskStartScheduler+0xac>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	60fb      	str	r3, [r7, #12]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <vTaskStartScheduler+0xaa>
}
 800cab0:	bf00      	nop
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	0800ecf0 	.word	0x0800ecf0
 800cabc:	0800d0e9 	.word	0x0800d0e9
 800cac0:	20001070 	.word	0x20001070
 800cac4:	2000106c 	.word	0x2000106c
 800cac8:	20001058 	.word	0x20001058
 800cacc:	20001050 	.word	0x20001050

0800cad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cad4:	4b04      	ldr	r3, [pc, #16]	; (800cae8 <vTaskSuspendAll+0x18>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3301      	adds	r3, #1
 800cada:	4a03      	ldr	r2, [pc, #12]	; (800cae8 <vTaskSuspendAll+0x18>)
 800cadc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cade:	bf00      	nop
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	20001074 	.word	0x20001074

0800caec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cafa:	4b42      	ldr	r3, [pc, #264]	; (800cc04 <xTaskResumeAll+0x118>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10a      	bne.n	800cb18 <xTaskResumeAll+0x2c>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	603b      	str	r3, [r7, #0]
}
 800cb14:	bf00      	nop
 800cb16:	e7fe      	b.n	800cb16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb18:	f001 f914 	bl	800dd44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb1c:	4b39      	ldr	r3, [pc, #228]	; (800cc04 <xTaskResumeAll+0x118>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	4a38      	ldr	r2, [pc, #224]	; (800cc04 <xTaskResumeAll+0x118>)
 800cb24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb26:	4b37      	ldr	r3, [pc, #220]	; (800cc04 <xTaskResumeAll+0x118>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d162      	bne.n	800cbf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb2e:	4b36      	ldr	r3, [pc, #216]	; (800cc08 <xTaskResumeAll+0x11c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d05e      	beq.n	800cbf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb36:	e02f      	b.n	800cb98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb38:	4b34      	ldr	r3, [pc, #208]	; (800cc0c <xTaskResumeAll+0x120>)
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	3318      	adds	r3, #24
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe ffb7 	bl	800bab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe ffb2 	bl	800bab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb58:	4b2d      	ldr	r3, [pc, #180]	; (800cc10 <xTaskResumeAll+0x124>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d903      	bls.n	800cb68 <xTaskResumeAll+0x7c>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a2a      	ldr	r2, [pc, #168]	; (800cc10 <xTaskResumeAll+0x124>)
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4a27      	ldr	r2, [pc, #156]	; (800cc14 <xTaskResumeAll+0x128>)
 800cb76:	441a      	add	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f7fe ff3d 	bl	800b9fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb88:	4b23      	ldr	r3, [pc, #140]	; (800cc18 <xTaskResumeAll+0x12c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d302      	bcc.n	800cb98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb92:	4b22      	ldr	r3, [pc, #136]	; (800cc1c <xTaskResumeAll+0x130>)
 800cb94:	2201      	movs	r2, #1
 800cb96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb98:	4b1c      	ldr	r3, [pc, #112]	; (800cc0c <xTaskResumeAll+0x120>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1cb      	bne.n	800cb38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cba6:	f000 fb55 	bl	800d254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cbaa:	4b1d      	ldr	r3, [pc, #116]	; (800cc20 <xTaskResumeAll+0x134>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d010      	beq.n	800cbd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbb6:	f000 f847 	bl	800cc48 <xTaskIncrementTick>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cbc0:	4b16      	ldr	r3, [pc, #88]	; (800cc1c <xTaskResumeAll+0x130>)
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1f1      	bne.n	800cbb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cbd2:	4b13      	ldr	r3, [pc, #76]	; (800cc20 <xTaskResumeAll+0x134>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbd8:	4b10      	ldr	r3, [pc, #64]	; (800cc1c <xTaskResumeAll+0x130>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbe4:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <xTaskResumeAll+0x138>)
 800cbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbf4:	f001 f8d6 	bl	800dda4 <vPortExitCritical>

	return xAlreadyYielded;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20001074 	.word	0x20001074
 800cc08:	2000104c 	.word	0x2000104c
 800cc0c:	2000100c 	.word	0x2000100c
 800cc10:	20001054 	.word	0x20001054
 800cc14:	20000b7c 	.word	0x20000b7c
 800cc18:	20000b78 	.word	0x20000b78
 800cc1c:	20001060 	.word	0x20001060
 800cc20:	2000105c 	.word	0x2000105c
 800cc24:	e000ed04 	.word	0xe000ed04

0800cc28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <xTaskGetTickCount+0x1c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc34:	687b      	ldr	r3, [r7, #4]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	20001050 	.word	0x20001050

0800cc48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc52:	4b4f      	ldr	r3, [pc, #316]	; (800cd90 <xTaskIncrementTick+0x148>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f040 808f 	bne.w	800cd7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc5c:	4b4d      	ldr	r3, [pc, #308]	; (800cd94 <xTaskIncrementTick+0x14c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3301      	adds	r3, #1
 800cc62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc64:	4a4b      	ldr	r2, [pc, #300]	; (800cd94 <xTaskIncrementTick+0x14c>)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d120      	bne.n	800ccb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc70:	4b49      	ldr	r3, [pc, #292]	; (800cd98 <xTaskIncrementTick+0x150>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	603b      	str	r3, [r7, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <xTaskIncrementTick+0x46>
 800cc90:	4b41      	ldr	r3, [pc, #260]	; (800cd98 <xTaskIncrementTick+0x150>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	60fb      	str	r3, [r7, #12]
 800cc96:	4b41      	ldr	r3, [pc, #260]	; (800cd9c <xTaskIncrementTick+0x154>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a3f      	ldr	r2, [pc, #252]	; (800cd98 <xTaskIncrementTick+0x150>)
 800cc9c:	6013      	str	r3, [r2, #0]
 800cc9e:	4a3f      	ldr	r2, [pc, #252]	; (800cd9c <xTaskIncrementTick+0x154>)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	4b3e      	ldr	r3, [pc, #248]	; (800cda0 <xTaskIncrementTick+0x158>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	4a3d      	ldr	r2, [pc, #244]	; (800cda0 <xTaskIncrementTick+0x158>)
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	f000 fad1 	bl	800d254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccb2:	4b3c      	ldr	r3, [pc, #240]	; (800cda4 <xTaskIncrementTick+0x15c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d349      	bcc.n	800cd50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccbc:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <xTaskIncrementTick+0x150>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d104      	bne.n	800ccd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc6:	4b37      	ldr	r3, [pc, #220]	; (800cda4 <xTaskIncrementTick+0x15c>)
 800ccc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cccc:	601a      	str	r2, [r3, #0]
					break;
 800ccce:	e03f      	b.n	800cd50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd0:	4b31      	ldr	r3, [pc, #196]	; (800cd98 <xTaskIncrementTick+0x150>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d203      	bcs.n	800ccf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cce8:	4a2e      	ldr	r2, [pc, #184]	; (800cda4 <xTaskIncrementTick+0x15c>)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccee:	e02f      	b.n	800cd50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fe fedf 	bl	800bab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d004      	beq.n	800cd0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	3318      	adds	r3, #24
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fe fed6 	bl	800bab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd10:	4b25      	ldr	r3, [pc, #148]	; (800cda8 <xTaskIncrementTick+0x160>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d903      	bls.n	800cd20 <xTaskIncrementTick+0xd8>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	4a22      	ldr	r2, [pc, #136]	; (800cda8 <xTaskIncrementTick+0x160>)
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd24:	4613      	mov	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4a1f      	ldr	r2, [pc, #124]	; (800cdac <xTaskIncrementTick+0x164>)
 800cd2e:	441a      	add	r2, r3
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	3304      	adds	r3, #4
 800cd34:	4619      	mov	r1, r3
 800cd36:	4610      	mov	r0, r2
 800cd38:	f7fe fe61 	bl	800b9fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd40:	4b1b      	ldr	r3, [pc, #108]	; (800cdb0 <xTaskIncrementTick+0x168>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d3b8      	bcc.n	800ccbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd4e:	e7b5      	b.n	800ccbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd50:	4b17      	ldr	r3, [pc, #92]	; (800cdb0 <xTaskIncrementTick+0x168>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd56:	4915      	ldr	r1, [pc, #84]	; (800cdac <xTaskIncrementTick+0x164>)
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	440b      	add	r3, r1
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d901      	bls.n	800cd6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd6c:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <xTaskIncrementTick+0x16c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cd74:	2301      	movs	r3, #1
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e004      	b.n	800cd84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd7a:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <xTaskIncrementTick+0x170>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	4a0d      	ldr	r2, [pc, #52]	; (800cdb8 <xTaskIncrementTick+0x170>)
 800cd82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd84:	697b      	ldr	r3, [r7, #20]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	20001074 	.word	0x20001074
 800cd94:	20001050 	.word	0x20001050
 800cd98:	20001004 	.word	0x20001004
 800cd9c:	20001008 	.word	0x20001008
 800cda0:	20001064 	.word	0x20001064
 800cda4:	2000106c 	.word	0x2000106c
 800cda8:	20001054 	.word	0x20001054
 800cdac:	20000b7c 	.word	0x20000b7c
 800cdb0:	20000b78 	.word	0x20000b78
 800cdb4:	20001060 	.word	0x20001060
 800cdb8:	2000105c 	.word	0x2000105c

0800cdbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdc2:	4b28      	ldr	r3, [pc, #160]	; (800ce64 <vTaskSwitchContext+0xa8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d003      	beq.n	800cdd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdca:	4b27      	ldr	r3, [pc, #156]	; (800ce68 <vTaskSwitchContext+0xac>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdd0:	e041      	b.n	800ce56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cdd2:	4b25      	ldr	r3, [pc, #148]	; (800ce68 <vTaskSwitchContext+0xac>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd8:	4b24      	ldr	r3, [pc, #144]	; (800ce6c <vTaskSwitchContext+0xb0>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	e010      	b.n	800ce02 <vTaskSwitchContext+0x46>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10a      	bne.n	800cdfc <vTaskSwitchContext+0x40>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	607b      	str	r3, [r7, #4]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <vTaskSwitchContext+0x3e>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	491b      	ldr	r1, [pc, #108]	; (800ce70 <vTaskSwitchContext+0xb4>)
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	4613      	mov	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	440b      	add	r3, r1
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0e4      	beq.n	800cde0 <vTaskSwitchContext+0x24>
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <vTaskSwitchContext+0xb4>)
 800ce22:	4413      	add	r3, r2
 800ce24:	60bb      	str	r3, [r7, #8]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	605a      	str	r2, [r3, #4]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	3308      	adds	r3, #8
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d104      	bne.n	800ce46 <vTaskSwitchContext+0x8a>
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	605a      	str	r2, [r3, #4]
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	4a09      	ldr	r2, [pc, #36]	; (800ce74 <vTaskSwitchContext+0xb8>)
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	4a06      	ldr	r2, [pc, #24]	; (800ce6c <vTaskSwitchContext+0xb0>)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6013      	str	r3, [r2, #0]
}
 800ce56:	bf00      	nop
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	20001074 	.word	0x20001074
 800ce68:	20001060 	.word	0x20001060
 800ce6c:	20001054 	.word	0x20001054
 800ce70:	20000b7c 	.word	0x20000b7c
 800ce74:	20000b78 	.word	0x20000b78

0800ce78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10a      	bne.n	800ce9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	60fb      	str	r3, [r7, #12]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce9e:	4b07      	ldr	r3, [pc, #28]	; (800cebc <vTaskPlaceOnEventList+0x44>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3318      	adds	r3, #24
 800cea4:	4619      	mov	r1, r3
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7fe fdcd 	bl	800ba46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ceac:	2101      	movs	r1, #1
 800ceae:	6838      	ldr	r0, [r7, #0]
 800ceb0:	f000 fa7c 	bl	800d3ac <prvAddCurrentTaskToDelayedList>
}
 800ceb4:	bf00      	nop
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20000b78 	.word	0x20000b78

0800cec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	617b      	str	r3, [r7, #20]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cee8:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <vTaskPlaceOnEventListRestricted+0x54>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3318      	adds	r3, #24
 800ceee:	4619      	mov	r1, r3
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f7fe fd84 	bl	800b9fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	68b8      	ldr	r0, [r7, #8]
 800cf06:	f000 fa51 	bl	800d3ac <prvAddCurrentTaskToDelayedList>
	}
 800cf0a:	bf00      	nop
 800cf0c:	3718      	adds	r7, #24
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20000b78 	.word	0x20000b78

0800cf18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10a      	bne.n	800cf44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	60fb      	str	r3, [r7, #12]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	3318      	adds	r3, #24
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe fdb5 	bl	800bab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf4e:	4b1e      	ldr	r3, [pc, #120]	; (800cfc8 <xTaskRemoveFromEventList+0xb0>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d11d      	bne.n	800cf92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fdac 	bl	800bab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf64:	4b19      	ldr	r3, [pc, #100]	; (800cfcc <xTaskRemoveFromEventList+0xb4>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d903      	bls.n	800cf74 <xTaskRemoveFromEventList+0x5c>
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	4a16      	ldr	r2, [pc, #88]	; (800cfcc <xTaskRemoveFromEventList+0xb4>)
 800cf72:	6013      	str	r3, [r2, #0]
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4a13      	ldr	r2, [pc, #76]	; (800cfd0 <xTaskRemoveFromEventList+0xb8>)
 800cf82:	441a      	add	r2, r3
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	3304      	adds	r3, #4
 800cf88:	4619      	mov	r1, r3
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	f7fe fd37 	bl	800b9fe <vListInsertEnd>
 800cf90:	e005      	b.n	800cf9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	3318      	adds	r3, #24
 800cf96:	4619      	mov	r1, r3
 800cf98:	480e      	ldr	r0, [pc, #56]	; (800cfd4 <xTaskRemoveFromEventList+0xbc>)
 800cf9a:	f7fe fd30 	bl	800b9fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <xTaskRemoveFromEventList+0xc0>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d905      	bls.n	800cfb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfac:	2301      	movs	r3, #1
 800cfae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfb0:	4b0a      	ldr	r3, [pc, #40]	; (800cfdc <xTaskRemoveFromEventList+0xc4>)
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]
 800cfb6:	e001      	b.n	800cfbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfbc:	697b      	ldr	r3, [r7, #20]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20001074 	.word	0x20001074
 800cfcc:	20001054 	.word	0x20001054
 800cfd0:	20000b7c 	.word	0x20000b7c
 800cfd4:	2000100c 	.word	0x2000100c
 800cfd8:	20000b78 	.word	0x20000b78
 800cfdc:	20001060 	.word	0x20001060

0800cfe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfe8:	4b06      	ldr	r3, [pc, #24]	; (800d004 <vTaskInternalSetTimeOutState+0x24>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cff0:	4b05      	ldr	r3, [pc, #20]	; (800d008 <vTaskInternalSetTimeOutState+0x28>)
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	605a      	str	r2, [r3, #4]
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr
 800d004:	20001064 	.word	0x20001064
 800d008:	20001050 	.word	0x20001050

0800d00c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10a      	bne.n	800d032 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	613b      	str	r3, [r7, #16]
}
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10a      	bne.n	800d04e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	60fb      	str	r3, [r7, #12]
}
 800d04a:	bf00      	nop
 800d04c:	e7fe      	b.n	800d04c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d04e:	f000 fe79 	bl	800dd44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d052:	4b1d      	ldr	r3, [pc, #116]	; (800d0c8 <xTaskCheckForTimeOut+0xbc>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	69ba      	ldr	r2, [r7, #24]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d06a:	d102      	bne.n	800d072 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d06c:	2300      	movs	r3, #0
 800d06e:	61fb      	str	r3, [r7, #28]
 800d070:	e023      	b.n	800d0ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	4b15      	ldr	r3, [pc, #84]	; (800d0cc <xTaskCheckForTimeOut+0xc0>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d007      	beq.n	800d08e <xTaskCheckForTimeOut+0x82>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	69ba      	ldr	r2, [r7, #24]
 800d084:	429a      	cmp	r2, r3
 800d086:	d302      	bcc.n	800d08e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d088:	2301      	movs	r3, #1
 800d08a:	61fb      	str	r3, [r7, #28]
 800d08c:	e015      	b.n	800d0ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	429a      	cmp	r2, r3
 800d096:	d20b      	bcs.n	800d0b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	1ad2      	subs	r2, r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff ff9b 	bl	800cfe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	61fb      	str	r3, [r7, #28]
 800d0ae:	e004      	b.n	800d0ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0ba:	f000 fe73 	bl	800dda4 <vPortExitCritical>

	return xReturn;
 800d0be:	69fb      	ldr	r3, [r7, #28]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3720      	adds	r7, #32
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	20001050 	.word	0x20001050
 800d0cc:	20001064 	.word	0x20001064

0800d0d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0d4:	4b03      	ldr	r3, [pc, #12]	; (800d0e4 <vTaskMissedYield+0x14>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]
}
 800d0da:	bf00      	nop
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	20001060 	.word	0x20001060

0800d0e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0f0:	f000 f852 	bl	800d198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0f4:	4b06      	ldr	r3, [pc, #24]	; (800d110 <prvIdleTask+0x28>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d9f9      	bls.n	800d0f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0fc:	4b05      	ldr	r3, [pc, #20]	; (800d114 <prvIdleTask+0x2c>)
 800d0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d10c:	e7f0      	b.n	800d0f0 <prvIdleTask+0x8>
 800d10e:	bf00      	nop
 800d110:	20000b7c 	.word	0x20000b7c
 800d114:	e000ed04 	.word	0xe000ed04

0800d118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d11e:	2300      	movs	r3, #0
 800d120:	607b      	str	r3, [r7, #4]
 800d122:	e00c      	b.n	800d13e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	4613      	mov	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	4a12      	ldr	r2, [pc, #72]	; (800d178 <prvInitialiseTaskLists+0x60>)
 800d130:	4413      	add	r3, r2
 800d132:	4618      	mov	r0, r3
 800d134:	f7fe fc36 	bl	800b9a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3301      	adds	r3, #1
 800d13c:	607b      	str	r3, [r7, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b37      	cmp	r3, #55	; 0x37
 800d142:	d9ef      	bls.n	800d124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d144:	480d      	ldr	r0, [pc, #52]	; (800d17c <prvInitialiseTaskLists+0x64>)
 800d146:	f7fe fc2d 	bl	800b9a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d14a:	480d      	ldr	r0, [pc, #52]	; (800d180 <prvInitialiseTaskLists+0x68>)
 800d14c:	f7fe fc2a 	bl	800b9a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d150:	480c      	ldr	r0, [pc, #48]	; (800d184 <prvInitialiseTaskLists+0x6c>)
 800d152:	f7fe fc27 	bl	800b9a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d156:	480c      	ldr	r0, [pc, #48]	; (800d188 <prvInitialiseTaskLists+0x70>)
 800d158:	f7fe fc24 	bl	800b9a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d15c:	480b      	ldr	r0, [pc, #44]	; (800d18c <prvInitialiseTaskLists+0x74>)
 800d15e:	f7fe fc21 	bl	800b9a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d162:	4b0b      	ldr	r3, [pc, #44]	; (800d190 <prvInitialiseTaskLists+0x78>)
 800d164:	4a05      	ldr	r2, [pc, #20]	; (800d17c <prvInitialiseTaskLists+0x64>)
 800d166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d168:	4b0a      	ldr	r3, [pc, #40]	; (800d194 <prvInitialiseTaskLists+0x7c>)
 800d16a:	4a05      	ldr	r2, [pc, #20]	; (800d180 <prvInitialiseTaskLists+0x68>)
 800d16c:	601a      	str	r2, [r3, #0]
}
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20000b7c 	.word	0x20000b7c
 800d17c:	20000fdc 	.word	0x20000fdc
 800d180:	20000ff0 	.word	0x20000ff0
 800d184:	2000100c 	.word	0x2000100c
 800d188:	20001020 	.word	0x20001020
 800d18c:	20001038 	.word	0x20001038
 800d190:	20001004 	.word	0x20001004
 800d194:	20001008 	.word	0x20001008

0800d198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d19e:	e019      	b.n	800d1d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1a0:	f000 fdd0 	bl	800dd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a4:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <prvCheckTasksWaitingTermination+0x50>)
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe fc81 	bl	800bab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1b6:	4b0d      	ldr	r3, [pc, #52]	; (800d1ec <prvCheckTasksWaitingTermination+0x54>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	4a0b      	ldr	r2, [pc, #44]	; (800d1ec <prvCheckTasksWaitingTermination+0x54>)
 800d1be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	; (800d1f0 <prvCheckTasksWaitingTermination+0x58>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	4a0a      	ldr	r2, [pc, #40]	; (800d1f0 <prvCheckTasksWaitingTermination+0x58>)
 800d1c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1ca:	f000 fdeb 	bl	800dda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f810 	bl	800d1f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1d4:	4b06      	ldr	r3, [pc, #24]	; (800d1f0 <prvCheckTasksWaitingTermination+0x58>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e1      	bne.n	800d1a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1dc:	bf00      	nop
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20001020 	.word	0x20001020
 800d1ec:	2000104c 	.word	0x2000104c
 800d1f0:	20001034 	.word	0x20001034

0800d1f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d202:	2b00      	cmp	r3, #0
 800d204:	d108      	bne.n	800d218 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 ff88 	bl	800e120 <vPortFree>
				vPortFree( pxTCB );
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 ff85 	bl	800e120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d216:	e018      	b.n	800d24a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d103      	bne.n	800d22a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 ff7c 	bl	800e120 <vPortFree>
	}
 800d228:	e00f      	b.n	800d24a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d230:	2b02      	cmp	r3, #2
 800d232:	d00a      	beq.n	800d24a <prvDeleteTCB+0x56>
	__asm volatile
 800d234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	60fb      	str	r3, [r7, #12]
}
 800d246:	bf00      	nop
 800d248:	e7fe      	b.n	800d248 <prvDeleteTCB+0x54>
	}
 800d24a:	bf00      	nop
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d25a:	4b0c      	ldr	r3, [pc, #48]	; (800d28c <prvResetNextTaskUnblockTime+0x38>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d104      	bne.n	800d26e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <prvResetNextTaskUnblockTime+0x3c>)
 800d266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d26a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d26c:	e008      	b.n	800d280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d26e:	4b07      	ldr	r3, [pc, #28]	; (800d28c <prvResetNextTaskUnblockTime+0x38>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	4a04      	ldr	r2, [pc, #16]	; (800d290 <prvResetNextTaskUnblockTime+0x3c>)
 800d27e:	6013      	str	r3, [r2, #0]
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	20001004 	.word	0x20001004
 800d290:	2000106c 	.word	0x2000106c

0800d294 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d29a:	4b0b      	ldr	r3, [pc, #44]	; (800d2c8 <xTaskGetSchedulerState+0x34>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d102      	bne.n	800d2a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	607b      	str	r3, [r7, #4]
 800d2a6:	e008      	b.n	800d2ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2a8:	4b08      	ldr	r3, [pc, #32]	; (800d2cc <xTaskGetSchedulerState+0x38>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d102      	bne.n	800d2b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	607b      	str	r3, [r7, #4]
 800d2b4:	e001      	b.n	800d2ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2ba:	687b      	ldr	r3, [r7, #4]
	}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	20001058 	.word	0x20001058
 800d2cc:	20001074 	.word	0x20001074

0800d2d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d056      	beq.n	800d394 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2e6:	4b2e      	ldr	r3, [pc, #184]	; (800d3a0 <xTaskPriorityDisinherit+0xd0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d00a      	beq.n	800d306 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	60fb      	str	r3, [r7, #12]
}
 800d302:	bf00      	nop
 800d304:	e7fe      	b.n	800d304 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d10a      	bne.n	800d324 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	60bb      	str	r3, [r7, #8]
}
 800d320:	bf00      	nop
 800d322:	e7fe      	b.n	800d322 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d328:	1e5a      	subs	r2, r3, #1
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d336:	429a      	cmp	r2, r3
 800d338:	d02c      	beq.n	800d394 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d128      	bne.n	800d394 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	3304      	adds	r3, #4
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe fbb6 	bl	800bab8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d364:	4b0f      	ldr	r3, [pc, #60]	; (800d3a4 <xTaskPriorityDisinherit+0xd4>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d903      	bls.n	800d374 <xTaskPriorityDisinherit+0xa4>
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d370:	4a0c      	ldr	r2, [pc, #48]	; (800d3a4 <xTaskPriorityDisinherit+0xd4>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4a09      	ldr	r2, [pc, #36]	; (800d3a8 <xTaskPriorityDisinherit+0xd8>)
 800d382:	441a      	add	r2, r3
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	3304      	adds	r3, #4
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fe fb37 	bl	800b9fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d390:	2301      	movs	r3, #1
 800d392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d394:	697b      	ldr	r3, [r7, #20]
	}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000b78 	.word	0x20000b78
 800d3a4:	20001054 	.word	0x20001054
 800d3a8:	20000b7c 	.word	0x20000b7c

0800d3ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3b6:	4b21      	ldr	r3, [pc, #132]	; (800d43c <prvAddCurrentTaskToDelayedList+0x90>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3bc:	4b20      	ldr	r3, [pc, #128]	; (800d440 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fb78 	bl	800bab8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3ce:	d10a      	bne.n	800d3e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d007      	beq.n	800d3e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3d6:	4b1a      	ldr	r3, [pc, #104]	; (800d440 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4619      	mov	r1, r3
 800d3de:	4819      	ldr	r0, [pc, #100]	; (800d444 <prvAddCurrentTaskToDelayedList+0x98>)
 800d3e0:	f7fe fb0d 	bl	800b9fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3e4:	e026      	b.n	800d434 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3ee:	4b14      	ldr	r3, [pc, #80]	; (800d440 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d209      	bcs.n	800d412 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3fe:	4b12      	ldr	r3, [pc, #72]	; (800d448 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	4b0f      	ldr	r3, [pc, #60]	; (800d440 <prvAddCurrentTaskToDelayedList+0x94>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3304      	adds	r3, #4
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7fe fb1b 	bl	800ba46 <vListInsert>
}
 800d410:	e010      	b.n	800d434 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d412:	4b0e      	ldr	r3, [pc, #56]	; (800d44c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	4b0a      	ldr	r3, [pc, #40]	; (800d440 <prvAddCurrentTaskToDelayedList+0x94>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3304      	adds	r3, #4
 800d41c:	4619      	mov	r1, r3
 800d41e:	4610      	mov	r0, r2
 800d420:	f7fe fb11 	bl	800ba46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d424:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d202      	bcs.n	800d434 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d42e:	4a08      	ldr	r2, [pc, #32]	; (800d450 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	6013      	str	r3, [r2, #0]
}
 800d434:	bf00      	nop
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	20001050 	.word	0x20001050
 800d440:	20000b78 	.word	0x20000b78
 800d444:	20001038 	.word	0x20001038
 800d448:	20001008 	.word	0x20001008
 800d44c:	20001004 	.word	0x20001004
 800d450:	2000106c 	.word	0x2000106c

0800d454 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08a      	sub	sp, #40	; 0x28
 800d458:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d45e:	f000 fb07 	bl	800da70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d462:	4b1c      	ldr	r3, [pc, #112]	; (800d4d4 <xTimerCreateTimerTask+0x80>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d021      	beq.n	800d4ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d46e:	2300      	movs	r3, #0
 800d470:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d472:	1d3a      	adds	r2, r7, #4
 800d474:	f107 0108 	add.w	r1, r7, #8
 800d478:	f107 030c 	add.w	r3, r7, #12
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fa77 	bl	800b970 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	9202      	str	r2, [sp, #8]
 800d48a:	9301      	str	r3, [sp, #4]
 800d48c:	2302      	movs	r3, #2
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	2300      	movs	r3, #0
 800d492:	460a      	mov	r2, r1
 800d494:	4910      	ldr	r1, [pc, #64]	; (800d4d8 <xTimerCreateTimerTask+0x84>)
 800d496:	4811      	ldr	r0, [pc, #68]	; (800d4dc <xTimerCreateTimerTask+0x88>)
 800d498:	f7ff f8de 	bl	800c658 <xTaskCreateStatic>
 800d49c:	4603      	mov	r3, r0
 800d49e:	4a10      	ldr	r2, [pc, #64]	; (800d4e0 <xTimerCreateTimerTask+0x8c>)
 800d4a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d4a2:	4b0f      	ldr	r3, [pc, #60]	; (800d4e0 <xTimerCreateTimerTask+0x8c>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	613b      	str	r3, [r7, #16]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d4ca:	697b      	ldr	r3, [r7, #20]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	200010a8 	.word	0x200010a8
 800d4d8:	0800ecf8 	.word	0x0800ecf8
 800d4dc:	0800d619 	.word	0x0800d619
 800d4e0:	200010ac 	.word	0x200010ac

0800d4e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b08a      	sub	sp, #40	; 0x28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	623b      	str	r3, [r7, #32]
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d512:	4b1a      	ldr	r3, [pc, #104]	; (800d57c <xTimerGenericCommand+0x98>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d02a      	beq.n	800d570 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b05      	cmp	r3, #5
 800d52a:	dc18      	bgt.n	800d55e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d52c:	f7ff feb2 	bl	800d294 <xTaskGetSchedulerState>
 800d530:	4603      	mov	r3, r0
 800d532:	2b02      	cmp	r3, #2
 800d534:	d109      	bne.n	800d54a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d536:	4b11      	ldr	r3, [pc, #68]	; (800d57c <xTimerGenericCommand+0x98>)
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	f107 0110 	add.w	r1, r7, #16
 800d53e:	2300      	movs	r3, #0
 800d540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d542:	f7fe fc21 	bl	800bd88 <xQueueGenericSend>
 800d546:	6278      	str	r0, [r7, #36]	; 0x24
 800d548:	e012      	b.n	800d570 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d54a:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <xTimerGenericCommand+0x98>)
 800d54c:	6818      	ldr	r0, [r3, #0]
 800d54e:	f107 0110 	add.w	r1, r7, #16
 800d552:	2300      	movs	r3, #0
 800d554:	2200      	movs	r2, #0
 800d556:	f7fe fc17 	bl	800bd88 <xQueueGenericSend>
 800d55a:	6278      	str	r0, [r7, #36]	; 0x24
 800d55c:	e008      	b.n	800d570 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d55e:	4b07      	ldr	r3, [pc, #28]	; (800d57c <xTimerGenericCommand+0x98>)
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f107 0110 	add.w	r1, r7, #16
 800d566:	2300      	movs	r3, #0
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	f7fe fd0b 	bl	800bf84 <xQueueGenericSendFromISR>
 800d56e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d572:	4618      	mov	r0, r3
 800d574:	3728      	adds	r7, #40	; 0x28
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	200010a8 	.word	0x200010a8

0800d580 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af02      	add	r7, sp, #8
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d58a:	4b22      	ldr	r3, [pc, #136]	; (800d614 <prvProcessExpiredTimer+0x94>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	3304      	adds	r3, #4
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe fa8d 	bl	800bab8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a4:	f003 0304 	and.w	r3, r3, #4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d022      	beq.n	800d5f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	699a      	ldr	r2, [r3, #24]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	18d1      	adds	r1, r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	683a      	ldr	r2, [r7, #0]
 800d5b8:	6978      	ldr	r0, [r7, #20]
 800d5ba:	f000 f8d1 	bl	800d760 <prvInsertTimerInActiveList>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01f      	beq.n	800d604 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	6978      	ldr	r0, [r7, #20]
 800d5d0:	f7ff ff88 	bl	800d4e4 <xTimerGenericCommand>
 800d5d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d113      	bne.n	800d604 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	60fb      	str	r3, [r7, #12]
}
 800d5ee:	bf00      	nop
 800d5f0:	e7fe      	b.n	800d5f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5f8:	f023 0301 	bic.w	r3, r3, #1
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	6978      	ldr	r0, [r7, #20]
 800d60a:	4798      	blx	r3
}
 800d60c:	bf00      	nop
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	200010a0 	.word	0x200010a0

0800d618 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d620:	f107 0308 	add.w	r3, r7, #8
 800d624:	4618      	mov	r0, r3
 800d626:	f000 f857 	bl	800d6d8 <prvGetNextExpireTime>
 800d62a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	4619      	mov	r1, r3
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f000 f803 	bl	800d63c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d636:	f000 f8d5 	bl	800d7e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d63a:	e7f1      	b.n	800d620 <prvTimerTask+0x8>

0800d63c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d646:	f7ff fa43 	bl	800cad0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d64a:	f107 0308 	add.w	r3, r7, #8
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 f866 	bl	800d720 <prvSampleTimeNow>
 800d654:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d130      	bne.n	800d6be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10a      	bne.n	800d678 <prvProcessTimerOrBlockTask+0x3c>
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	429a      	cmp	r2, r3
 800d668:	d806      	bhi.n	800d678 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d66a:	f7ff fa3f 	bl	800caec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff ff85 	bl	800d580 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d676:	e024      	b.n	800d6c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d008      	beq.n	800d690 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d67e:	4b13      	ldr	r3, [pc, #76]	; (800d6cc <prvProcessTimerOrBlockTask+0x90>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d101      	bne.n	800d68c <prvProcessTimerOrBlockTask+0x50>
 800d688:	2301      	movs	r3, #1
 800d68a:	e000      	b.n	800d68e <prvProcessTimerOrBlockTask+0x52>
 800d68c:	2300      	movs	r3, #0
 800d68e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d690:	4b0f      	ldr	r3, [pc, #60]	; (800d6d0 <prvProcessTimerOrBlockTask+0x94>)
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	4619      	mov	r1, r3
 800d69e:	f7fe ffa7 	bl	800c5f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d6a2:	f7ff fa23 	bl	800caec <xTaskResumeAll>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10a      	bne.n	800d6c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d6ac:	4b09      	ldr	r3, [pc, #36]	; (800d6d4 <prvProcessTimerOrBlockTask+0x98>)
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	f3bf 8f6f 	isb	sy
}
 800d6bc:	e001      	b.n	800d6c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6be:	f7ff fa15 	bl	800caec <xTaskResumeAll>
}
 800d6c2:	bf00      	nop
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	200010a4 	.word	0x200010a4
 800d6d0:	200010a8 	.word	0x200010a8
 800d6d4:	e000ed04 	.word	0xe000ed04

0800d6d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6e0:	4b0e      	ldr	r3, [pc, #56]	; (800d71c <prvGetNextExpireTime+0x44>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d101      	bne.n	800d6ee <prvGetNextExpireTime+0x16>
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	e000      	b.n	800d6f0 <prvGetNextExpireTime+0x18>
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d105      	bne.n	800d708 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6fc:	4b07      	ldr	r3, [pc, #28]	; (800d71c <prvGetNextExpireTime+0x44>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	60fb      	str	r3, [r7, #12]
 800d706:	e001      	b.n	800d70c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d708:	2300      	movs	r3, #0
 800d70a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d70c:	68fb      	ldr	r3, [r7, #12]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	200010a0 	.word	0x200010a0

0800d720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d728:	f7ff fa7e 	bl	800cc28 <xTaskGetTickCount>
 800d72c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d72e:	4b0b      	ldr	r3, [pc, #44]	; (800d75c <prvSampleTimeNow+0x3c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	429a      	cmp	r2, r3
 800d736:	d205      	bcs.n	800d744 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d738:	f000 f936 	bl	800d9a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	e002      	b.n	800d74a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d74a:	4a04      	ldr	r2, [pc, #16]	; (800d75c <prvSampleTimeNow+0x3c>)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d750:	68fb      	ldr	r3, [r7, #12]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	200010b0 	.word	0x200010b0

0800d760 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
 800d76c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	429a      	cmp	r2, r3
 800d784:	d812      	bhi.n	800d7ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	1ad2      	subs	r2, r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	429a      	cmp	r2, r3
 800d792:	d302      	bcc.n	800d79a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d794:	2301      	movs	r3, #1
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	e01b      	b.n	800d7d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d79a:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <prvInsertTimerInActiveList+0x7c>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	f7fe f94e 	bl	800ba46 <vListInsert>
 800d7aa:	e012      	b.n	800d7d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d206      	bcs.n	800d7c2 <prvInsertTimerInActiveList+0x62>
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d302      	bcc.n	800d7c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	e007      	b.n	800d7d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7c2:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <prvInsertTimerInActiveList+0x80>)
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	f7fe f93a 	bl	800ba46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7d2:	697b      	ldr	r3, [r7, #20]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	200010a4 	.word	0x200010a4
 800d7e0:	200010a0 	.word	0x200010a0

0800d7e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08e      	sub	sp, #56	; 0x38
 800d7e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7ea:	e0ca      	b.n	800d982 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	da18      	bge.n	800d824 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d7f2:	1d3b      	adds	r3, r7, #4
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10a      	bne.n	800d814 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	61fb      	str	r3, [r7, #28]
}
 800d810:	bf00      	nop
 800d812:	e7fe      	b.n	800d812 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d81a:	6850      	ldr	r0, [r2, #4]
 800d81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d81e:	6892      	ldr	r2, [r2, #8]
 800d820:	4611      	mov	r1, r2
 800d822:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	f2c0 80aa 	blt.w	800d980 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	3304      	adds	r3, #4
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe f93b 	bl	800bab8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d842:	463b      	mov	r3, r7
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff ff6b 	bl	800d720 <prvSampleTimeNow>
 800d84a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b09      	cmp	r3, #9
 800d850:	f200 8097 	bhi.w	800d982 <prvProcessReceivedCommands+0x19e>
 800d854:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <prvProcessReceivedCommands+0x78>)
 800d856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85a:	bf00      	nop
 800d85c:	0800d885 	.word	0x0800d885
 800d860:	0800d885 	.word	0x0800d885
 800d864:	0800d885 	.word	0x0800d885
 800d868:	0800d8f9 	.word	0x0800d8f9
 800d86c:	0800d90d 	.word	0x0800d90d
 800d870:	0800d957 	.word	0x0800d957
 800d874:	0800d885 	.word	0x0800d885
 800d878:	0800d885 	.word	0x0800d885
 800d87c:	0800d8f9 	.word	0x0800d8f9
 800d880:	0800d90d 	.word	0x0800d90d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d88a:	f043 0301 	orr.w	r3, r3, #1
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	18d1      	adds	r1, r2, r3
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a4:	f7ff ff5c 	bl	800d760 <prvInsertTimerInActiveList>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d069      	beq.n	800d982 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d05e      	beq.n	800d982 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	441a      	add	r2, r3
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8d6:	f7ff fe05 	bl	800d4e4 <xTimerGenericCommand>
 800d8da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d14f      	bne.n	800d982 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	61bb      	str	r3, [r7, #24]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8fe:	f023 0301 	bic.w	r3, r3, #1
 800d902:	b2da      	uxtb	r2, r3
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d90a:	e03a      	b.n	800d982 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10a      	bne.n	800d942 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d930:	f383 8811 	msr	BASEPRI, r3
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	617b      	str	r3, [r7, #20]
}
 800d93e:	bf00      	nop
 800d940:	e7fe      	b.n	800d940 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	699a      	ldr	r2, [r3, #24]
 800d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d948:	18d1      	adds	r1, r2, r3
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d950:	f7ff ff06 	bl	800d760 <prvInsertTimerInActiveList>
					break;
 800d954:	e015      	b.n	800d982 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	2b00      	cmp	r3, #0
 800d962:	d103      	bne.n	800d96c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d966:	f000 fbdb 	bl	800e120 <vPortFree>
 800d96a:	e00a      	b.n	800d982 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d972:	f023 0301 	bic.w	r3, r3, #1
 800d976:	b2da      	uxtb	r2, r3
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d97e:	e000      	b.n	800d982 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d980:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d982:	4b08      	ldr	r3, [pc, #32]	; (800d9a4 <prvProcessReceivedCommands+0x1c0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	1d39      	adds	r1, r7, #4
 800d988:	2200      	movs	r2, #0
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fb96 	bl	800c0bc <xQueueReceive>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	f47f af2a 	bne.w	800d7ec <prvProcessReceivedCommands+0x8>
	}
}
 800d998:	bf00      	nop
 800d99a:	bf00      	nop
 800d99c:	3730      	adds	r7, #48	; 0x30
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	200010a8 	.word	0x200010a8

0800d9a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9ae:	e048      	b.n	800da42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9b0:	4b2d      	ldr	r3, [pc, #180]	; (800da68 <prvSwitchTimerLists+0xc0>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ba:	4b2b      	ldr	r3, [pc, #172]	; (800da68 <prvSwitchTimerLists+0xc0>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fe f875 	bl	800bab8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d02e      	beq.n	800da42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	693a      	ldr	r2, [r7, #16]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d90e      	bls.n	800da14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da02:	4b19      	ldr	r3, [pc, #100]	; (800da68 <prvSwitchTimerLists+0xc0>)
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3304      	adds	r3, #4
 800da0a:	4619      	mov	r1, r3
 800da0c:	4610      	mov	r0, r2
 800da0e:	f7fe f81a 	bl	800ba46 <vListInsert>
 800da12:	e016      	b.n	800da42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da14:	2300      	movs	r3, #0
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	2300      	movs	r3, #0
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	2100      	movs	r1, #0
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7ff fd60 	bl	800d4e4 <xTimerGenericCommand>
 800da24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10a      	bne.n	800da42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	603b      	str	r3, [r7, #0]
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da42:	4b09      	ldr	r3, [pc, #36]	; (800da68 <prvSwitchTimerLists+0xc0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1b1      	bne.n	800d9b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da4c:	4b06      	ldr	r3, [pc, #24]	; (800da68 <prvSwitchTimerLists+0xc0>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da52:	4b06      	ldr	r3, [pc, #24]	; (800da6c <prvSwitchTimerLists+0xc4>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a04      	ldr	r2, [pc, #16]	; (800da68 <prvSwitchTimerLists+0xc0>)
 800da58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da5a:	4a04      	ldr	r2, [pc, #16]	; (800da6c <prvSwitchTimerLists+0xc4>)
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	6013      	str	r3, [r2, #0]
}
 800da60:	bf00      	nop
 800da62:	3718      	adds	r7, #24
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	200010a0 	.word	0x200010a0
 800da6c:	200010a4 	.word	0x200010a4

0800da70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da76:	f000 f965 	bl	800dd44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da7a:	4b15      	ldr	r3, [pc, #84]	; (800dad0 <prvCheckForValidListAndQueue+0x60>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d120      	bne.n	800dac4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da82:	4814      	ldr	r0, [pc, #80]	; (800dad4 <prvCheckForValidListAndQueue+0x64>)
 800da84:	f7fd ff8e 	bl	800b9a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da88:	4813      	ldr	r0, [pc, #76]	; (800dad8 <prvCheckForValidListAndQueue+0x68>)
 800da8a:	f7fd ff8b 	bl	800b9a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <prvCheckForValidListAndQueue+0x6c>)
 800da90:	4a10      	ldr	r2, [pc, #64]	; (800dad4 <prvCheckForValidListAndQueue+0x64>)
 800da92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da94:	4b12      	ldr	r3, [pc, #72]	; (800dae0 <prvCheckForValidListAndQueue+0x70>)
 800da96:	4a10      	ldr	r2, [pc, #64]	; (800dad8 <prvCheckForValidListAndQueue+0x68>)
 800da98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da9a:	2300      	movs	r3, #0
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	4b11      	ldr	r3, [pc, #68]	; (800dae4 <prvCheckForValidListAndQueue+0x74>)
 800daa0:	4a11      	ldr	r2, [pc, #68]	; (800dae8 <prvCheckForValidListAndQueue+0x78>)
 800daa2:	2110      	movs	r1, #16
 800daa4:	200a      	movs	r0, #10
 800daa6:	f7fe f899 	bl	800bbdc <xQueueGenericCreateStatic>
 800daaa:	4603      	mov	r3, r0
 800daac:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <prvCheckForValidListAndQueue+0x60>)
 800daae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dab0:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <prvCheckForValidListAndQueue+0x60>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d005      	beq.n	800dac4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dab8:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <prvCheckForValidListAndQueue+0x60>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	490b      	ldr	r1, [pc, #44]	; (800daec <prvCheckForValidListAndQueue+0x7c>)
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fe fd6c 	bl	800c59c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dac4:	f000 f96e 	bl	800dda4 <vPortExitCritical>
}
 800dac8:	bf00      	nop
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	200010a8 	.word	0x200010a8
 800dad4:	20001078 	.word	0x20001078
 800dad8:	2000108c 	.word	0x2000108c
 800dadc:	200010a0 	.word	0x200010a0
 800dae0:	200010a4 	.word	0x200010a4
 800dae4:	20001154 	.word	0x20001154
 800dae8:	200010b4 	.word	0x200010b4
 800daec:	0800ed00 	.word	0x0800ed00

0800daf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3b04      	subs	r3, #4
 800db00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	3b04      	subs	r3, #4
 800db0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	f023 0201 	bic.w	r2, r3, #1
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3b04      	subs	r3, #4
 800db1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db20:	4a0c      	ldr	r2, [pc, #48]	; (800db54 <pxPortInitialiseStack+0x64>)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	3b14      	subs	r3, #20
 800db2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3b04      	subs	r3, #4
 800db36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f06f 0202 	mvn.w	r2, #2
 800db3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3b20      	subs	r3, #32
 800db44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db46:	68fb      	ldr	r3, [r7, #12]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr
 800db54:	0800db59 	.word	0x0800db59

0800db58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db62:	4b12      	ldr	r3, [pc, #72]	; (800dbac <prvTaskExitError+0x54>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db6a:	d00a      	beq.n	800db82 <prvTaskExitError+0x2a>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	60fb      	str	r3, [r7, #12]
}
 800db7e:	bf00      	nop
 800db80:	e7fe      	b.n	800db80 <prvTaskExitError+0x28>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	60bb      	str	r3, [r7, #8]
}
 800db94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db96:	bf00      	nop
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d0fc      	beq.n	800db98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db9e:	bf00      	nop
 800dba0:	bf00      	nop
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	2000002c 	.word	0x2000002c

0800dbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dbb0:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <pxCurrentTCBConst2>)
 800dbb2:	6819      	ldr	r1, [r3, #0]
 800dbb4:	6808      	ldr	r0, [r1, #0]
 800dbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbba:	f380 8809 	msr	PSP, r0
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f04f 0000 	mov.w	r0, #0
 800dbc6:	f380 8811 	msr	BASEPRI, r0
 800dbca:	4770      	bx	lr
 800dbcc:	f3af 8000 	nop.w

0800dbd0 <pxCurrentTCBConst2>:
 800dbd0:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dbd4:	bf00      	nop
 800dbd6:	bf00      	nop

0800dbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dbd8:	4808      	ldr	r0, [pc, #32]	; (800dbfc <prvPortStartFirstTask+0x24>)
 800dbda:	6800      	ldr	r0, [r0, #0]
 800dbdc:	6800      	ldr	r0, [r0, #0]
 800dbde:	f380 8808 	msr	MSP, r0
 800dbe2:	f04f 0000 	mov.w	r0, #0
 800dbe6:	f380 8814 	msr	CONTROL, r0
 800dbea:	b662      	cpsie	i
 800dbec:	b661      	cpsie	f
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	df00      	svc	0
 800dbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dbfa:	bf00      	nop
 800dbfc:	e000ed08 	.word	0xe000ed08

0800dc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc06:	4b46      	ldr	r3, [pc, #280]	; (800dd20 <xPortStartScheduler+0x120>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a46      	ldr	r2, [pc, #280]	; (800dd24 <xPortStartScheduler+0x124>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d10a      	bne.n	800dc26 <xPortStartScheduler+0x26>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	613b      	str	r3, [r7, #16]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc26:	4b3e      	ldr	r3, [pc, #248]	; (800dd20 <xPortStartScheduler+0x120>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a3f      	ldr	r2, [pc, #252]	; (800dd28 <xPortStartScheduler+0x128>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d10a      	bne.n	800dc46 <xPortStartScheduler+0x46>
	__asm volatile
 800dc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	60fb      	str	r3, [r7, #12]
}
 800dc42:	bf00      	nop
 800dc44:	e7fe      	b.n	800dc44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc46:	4b39      	ldr	r3, [pc, #228]	; (800dd2c <xPortStartScheduler+0x12c>)
 800dc48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	22ff      	movs	r2, #255	; 0xff
 800dc56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc60:	78fb      	ldrb	r3, [r7, #3]
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	4b31      	ldr	r3, [pc, #196]	; (800dd30 <xPortStartScheduler+0x130>)
 800dc6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc6e:	4b31      	ldr	r3, [pc, #196]	; (800dd34 <xPortStartScheduler+0x134>)
 800dc70:	2207      	movs	r2, #7
 800dc72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc74:	e009      	b.n	800dc8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dc76:	4b2f      	ldr	r3, [pc, #188]	; (800dd34 <xPortStartScheduler+0x134>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	4a2d      	ldr	r2, [pc, #180]	; (800dd34 <xPortStartScheduler+0x134>)
 800dc7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc80:	78fb      	ldrb	r3, [r7, #3]
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc8a:	78fb      	ldrb	r3, [r7, #3]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc92:	2b80      	cmp	r3, #128	; 0x80
 800dc94:	d0ef      	beq.n	800dc76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc96:	4b27      	ldr	r3, [pc, #156]	; (800dd34 <xPortStartScheduler+0x134>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f1c3 0307 	rsb	r3, r3, #7
 800dc9e:	2b04      	cmp	r3, #4
 800dca0:	d00a      	beq.n	800dcb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	60bb      	str	r3, [r7, #8]
}
 800dcb4:	bf00      	nop
 800dcb6:	e7fe      	b.n	800dcb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dcb8:	4b1e      	ldr	r3, [pc, #120]	; (800dd34 <xPortStartScheduler+0x134>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	021b      	lsls	r3, r3, #8
 800dcbe:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <xPortStartScheduler+0x134>)
 800dcc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dcc2:	4b1c      	ldr	r3, [pc, #112]	; (800dd34 <xPortStartScheduler+0x134>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dcca:	4a1a      	ldr	r2, [pc, #104]	; (800dd34 <xPortStartScheduler+0x134>)
 800dccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dcd6:	4b18      	ldr	r3, [pc, #96]	; (800dd38 <xPortStartScheduler+0x138>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a17      	ldr	r2, [pc, #92]	; (800dd38 <xPortStartScheduler+0x138>)
 800dcdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dce2:	4b15      	ldr	r3, [pc, #84]	; (800dd38 <xPortStartScheduler+0x138>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a14      	ldr	r2, [pc, #80]	; (800dd38 <xPortStartScheduler+0x138>)
 800dce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dcec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dcee:	f000 f8dd 	bl	800deac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dcf2:	4b12      	ldr	r3, [pc, #72]	; (800dd3c <xPortStartScheduler+0x13c>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dcf8:	f000 f8fc 	bl	800def4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dcfc:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <xPortStartScheduler+0x140>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a0f      	ldr	r2, [pc, #60]	; (800dd40 <xPortStartScheduler+0x140>)
 800dd02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd08:	f7ff ff66 	bl	800dbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd0c:	f7ff f856 	bl	800cdbc <vTaskSwitchContext>
	prvTaskExitError();
 800dd10:	f7ff ff22 	bl	800db58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	e000ed00 	.word	0xe000ed00
 800dd24:	410fc271 	.word	0x410fc271
 800dd28:	410fc270 	.word	0x410fc270
 800dd2c:	e000e400 	.word	0xe000e400
 800dd30:	200011a4 	.word	0x200011a4
 800dd34:	200011a8 	.word	0x200011a8
 800dd38:	e000ed20 	.word	0xe000ed20
 800dd3c:	2000002c 	.word	0x2000002c
 800dd40:	e000ef34 	.word	0xe000ef34

0800dd44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	607b      	str	r3, [r7, #4]
}
 800dd5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd5e:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <vPortEnterCritical+0x58>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3301      	adds	r3, #1
 800dd64:	4a0d      	ldr	r2, [pc, #52]	; (800dd9c <vPortEnterCritical+0x58>)
 800dd66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <vPortEnterCritical+0x58>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d10f      	bne.n	800dd90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd70:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <vPortEnterCritical+0x5c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00a      	beq.n	800dd90 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	603b      	str	r3, [r7, #0]
}
 800dd8c:	bf00      	nop
 800dd8e:	e7fe      	b.n	800dd8e <vPortEnterCritical+0x4a>
	}
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr
 800dd9c:	2000002c 	.word	0x2000002c
 800dda0:	e000ed04 	.word	0xe000ed04

0800dda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddaa:	4b12      	ldr	r3, [pc, #72]	; (800ddf4 <vPortExitCritical+0x50>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10a      	bne.n	800ddc8 <vPortExitCritical+0x24>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	607b      	str	r3, [r7, #4]
}
 800ddc4:	bf00      	nop
 800ddc6:	e7fe      	b.n	800ddc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ddc8:	4b0a      	ldr	r3, [pc, #40]	; (800ddf4 <vPortExitCritical+0x50>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	4a09      	ldr	r2, [pc, #36]	; (800ddf4 <vPortExitCritical+0x50>)
 800ddd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ddd2:	4b08      	ldr	r3, [pc, #32]	; (800ddf4 <vPortExitCritical+0x50>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d105      	bne.n	800dde6 <vPortExitCritical+0x42>
 800ddda:	2300      	movs	r3, #0
 800dddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f383 8811 	msr	BASEPRI, r3
}
 800dde4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dde6:	bf00      	nop
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	2000002c 	.word	0x2000002c
	...

0800de00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de00:	f3ef 8009 	mrs	r0, PSP
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	4b15      	ldr	r3, [pc, #84]	; (800de60 <pxCurrentTCBConst>)
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	f01e 0f10 	tst.w	lr, #16
 800de10:	bf08      	it	eq
 800de12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1a:	6010      	str	r0, [r2, #0]
 800de1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de24:	f380 8811 	msr	BASEPRI, r0
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f7fe ffc4 	bl	800cdbc <vTaskSwitchContext>
 800de34:	f04f 0000 	mov.w	r0, #0
 800de38:	f380 8811 	msr	BASEPRI, r0
 800de3c:	bc09      	pop	{r0, r3}
 800de3e:	6819      	ldr	r1, [r3, #0]
 800de40:	6808      	ldr	r0, [r1, #0]
 800de42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de46:	f01e 0f10 	tst.w	lr, #16
 800de4a:	bf08      	it	eq
 800de4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de50:	f380 8809 	msr	PSP, r0
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	f3af 8000 	nop.w

0800de60 <pxCurrentTCBConst>:
 800de60:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de64:	bf00      	nop
 800de66:	bf00      	nop

0800de68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	607b      	str	r3, [r7, #4]
}
 800de80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de82:	f7fe fee1 	bl	800cc48 <xTaskIncrementTick>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d003      	beq.n	800de94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de8c:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <xPortSysTickHandler+0x40>)
 800de8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	2300      	movs	r3, #0
 800de96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	f383 8811 	msr	BASEPRI, r3
}
 800de9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dea0:	bf00      	nop
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	e000ed04 	.word	0xe000ed04

0800deac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800deac:	b480      	push	{r7}
 800deae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800deb0:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <vPortSetupTimerInterrupt+0x34>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800deb6:	4b0b      	ldr	r3, [pc, #44]	; (800dee4 <vPortSetupTimerInterrupt+0x38>)
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800debc:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <vPortSetupTimerInterrupt+0x3c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a0a      	ldr	r2, [pc, #40]	; (800deec <vPortSetupTimerInterrupt+0x40>)
 800dec2:	fba2 2303 	umull	r2, r3, r2, r3
 800dec6:	099b      	lsrs	r3, r3, #6
 800dec8:	4a09      	ldr	r2, [pc, #36]	; (800def0 <vPortSetupTimerInterrupt+0x44>)
 800deca:	3b01      	subs	r3, #1
 800decc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dece:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <vPortSetupTimerInterrupt+0x34>)
 800ded0:	2207      	movs	r2, #7
 800ded2:	601a      	str	r2, [r3, #0]
}
 800ded4:	bf00      	nop
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	e000e010 	.word	0xe000e010
 800dee4:	e000e018 	.word	0xe000e018
 800dee8:	20000000 	.word	0x20000000
 800deec:	10624dd3 	.word	0x10624dd3
 800def0:	e000e014 	.word	0xe000e014

0800def4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800def4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df04 <vPortEnableVFP+0x10>
 800def8:	6801      	ldr	r1, [r0, #0]
 800defa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800defe:	6001      	str	r1, [r0, #0]
 800df00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df02:	bf00      	nop
 800df04:	e000ed88 	.word	0xe000ed88

0800df08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df0e:	f3ef 8305 	mrs	r3, IPSR
 800df12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2b0f      	cmp	r3, #15
 800df18:	d914      	bls.n	800df44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df1a:	4a17      	ldr	r2, [pc, #92]	; (800df78 <vPortValidateInterruptPriority+0x70>)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	4413      	add	r3, r2
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df24:	4b15      	ldr	r3, [pc, #84]	; (800df7c <vPortValidateInterruptPriority+0x74>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	7afa      	ldrb	r2, [r7, #11]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d20a      	bcs.n	800df44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	607b      	str	r3, [r7, #4]
}
 800df40:	bf00      	nop
 800df42:	e7fe      	b.n	800df42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df44:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <vPortValidateInterruptPriority+0x78>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df4c:	4b0d      	ldr	r3, [pc, #52]	; (800df84 <vPortValidateInterruptPriority+0x7c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	429a      	cmp	r2, r3
 800df52:	d90a      	bls.n	800df6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	603b      	str	r3, [r7, #0]
}
 800df66:	bf00      	nop
 800df68:	e7fe      	b.n	800df68 <vPortValidateInterruptPriority+0x60>
	}
 800df6a:	bf00      	nop
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	e000e3f0 	.word	0xe000e3f0
 800df7c:	200011a4 	.word	0x200011a4
 800df80:	e000ed0c 	.word	0xe000ed0c
 800df84:	200011a8 	.word	0x200011a8

0800df88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b08a      	sub	sp, #40	; 0x28
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df90:	2300      	movs	r3, #0
 800df92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df94:	f7fe fd9c 	bl	800cad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df98:	4b5b      	ldr	r3, [pc, #364]	; (800e108 <pvPortMalloc+0x180>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfa0:	f000 f920 	bl	800e1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfa4:	4b59      	ldr	r3, [pc, #356]	; (800e10c <pvPortMalloc+0x184>)
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4013      	ands	r3, r2
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f040 8093 	bne.w	800e0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d01d      	beq.n	800dff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dfb8:	2208      	movs	r2, #8
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f003 0307 	and.w	r3, r3, #7
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d014      	beq.n	800dff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f023 0307 	bic.w	r3, r3, #7
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <pvPortMalloc+0x6c>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	617b      	str	r3, [r7, #20]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d06e      	beq.n	800e0d8 <pvPortMalloc+0x150>
 800dffa:	4b45      	ldr	r3, [pc, #276]	; (800e110 <pvPortMalloc+0x188>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	429a      	cmp	r2, r3
 800e002:	d869      	bhi.n	800e0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e004:	4b43      	ldr	r3, [pc, #268]	; (800e114 <pvPortMalloc+0x18c>)
 800e006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e008:	4b42      	ldr	r3, [pc, #264]	; (800e114 <pvPortMalloc+0x18c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e00e:	e004      	b.n	800e01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	429a      	cmp	r2, r3
 800e022:	d903      	bls.n	800e02c <pvPortMalloc+0xa4>
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1f1      	bne.n	800e010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e02c:	4b36      	ldr	r3, [pc, #216]	; (800e108 <pvPortMalloc+0x180>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e032:	429a      	cmp	r2, r3
 800e034:	d050      	beq.n	800e0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2208      	movs	r2, #8
 800e03c:	4413      	add	r3, r2
 800e03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	1ad2      	subs	r2, r2, r3
 800e050:	2308      	movs	r3, #8
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	429a      	cmp	r2, r3
 800e056:	d91f      	bls.n	800e098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4413      	add	r3, r2
 800e05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	f003 0307 	and.w	r3, r3, #7
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00a      	beq.n	800e080 <pvPortMalloc+0xf8>
	__asm volatile
 800e06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06e:	f383 8811 	msr	BASEPRI, r3
 800e072:	f3bf 8f6f 	isb	sy
 800e076:	f3bf 8f4f 	dsb	sy
 800e07a:	613b      	str	r3, [r7, #16]
}
 800e07c:	bf00      	nop
 800e07e:	e7fe      	b.n	800e07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	1ad2      	subs	r2, r2, r3
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e092:	69b8      	ldr	r0, [r7, #24]
 800e094:	f000 f908 	bl	800e2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e098:	4b1d      	ldr	r3, [pc, #116]	; (800e110 <pvPortMalloc+0x188>)
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	4a1b      	ldr	r2, [pc, #108]	; (800e110 <pvPortMalloc+0x188>)
 800e0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0a6:	4b1a      	ldr	r3, [pc, #104]	; (800e110 <pvPortMalloc+0x188>)
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	4b1b      	ldr	r3, [pc, #108]	; (800e118 <pvPortMalloc+0x190>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d203      	bcs.n	800e0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0b2:	4b17      	ldr	r3, [pc, #92]	; (800e110 <pvPortMalloc+0x188>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a18      	ldr	r2, [pc, #96]	; (800e118 <pvPortMalloc+0x190>)
 800e0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	4b13      	ldr	r3, [pc, #76]	; (800e10c <pvPortMalloc+0x184>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e0ce:	4b13      	ldr	r3, [pc, #76]	; (800e11c <pvPortMalloc+0x194>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	4a11      	ldr	r2, [pc, #68]	; (800e11c <pvPortMalloc+0x194>)
 800e0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e0d8:	f7fe fd08 	bl	800caec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	f003 0307 	and.w	r3, r3, #7
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00a      	beq.n	800e0fc <pvPortMalloc+0x174>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	60fb      	str	r3, [r7, #12]
}
 800e0f8:	bf00      	nop
 800e0fa:	e7fe      	b.n	800e0fa <pvPortMalloc+0x172>
	return pvReturn;
 800e0fc:	69fb      	ldr	r3, [r7, #28]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3728      	adds	r7, #40	; 0x28
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20004db4 	.word	0x20004db4
 800e10c:	20004dc8 	.word	0x20004dc8
 800e110:	20004db8 	.word	0x20004db8
 800e114:	20004dac 	.word	0x20004dac
 800e118:	20004dbc 	.word	0x20004dbc
 800e11c:	20004dc0 	.word	0x20004dc0

0800e120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d04d      	beq.n	800e1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e132:	2308      	movs	r3, #8
 800e134:	425b      	negs	r3, r3
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	4413      	add	r3, r2
 800e13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	4b24      	ldr	r3, [pc, #144]	; (800e1d8 <vPortFree+0xb8>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4013      	ands	r3, r2
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d10a      	bne.n	800e164 <vPortFree+0x44>
	__asm volatile
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	60fb      	str	r3, [r7, #12]
}
 800e160:	bf00      	nop
 800e162:	e7fe      	b.n	800e162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00a      	beq.n	800e182 <vPortFree+0x62>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	60bb      	str	r3, [r7, #8]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	4b14      	ldr	r3, [pc, #80]	; (800e1d8 <vPortFree+0xb8>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4013      	ands	r3, r2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d01e      	beq.n	800e1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d11a      	bne.n	800e1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <vPortFree+0xb8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	43db      	mvns	r3, r3
 800e1a2:	401a      	ands	r2, r3
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1a8:	f7fe fc92 	bl	800cad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	4b0a      	ldr	r3, [pc, #40]	; (800e1dc <vPortFree+0xbc>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	4a09      	ldr	r2, [pc, #36]	; (800e1dc <vPortFree+0xbc>)
 800e1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1ba:	6938      	ldr	r0, [r7, #16]
 800e1bc:	f000 f874 	bl	800e2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e1c0:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <vPortFree+0xc0>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	4a06      	ldr	r2, [pc, #24]	; (800e1e0 <vPortFree+0xc0>)
 800e1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e1ca:	f7fe fc8f 	bl	800caec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1ce:	bf00      	nop
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20004dc8 	.word	0x20004dc8
 800e1dc:	20004db8 	.word	0x20004db8
 800e1e0:	20004dc4 	.word	0x20004dc4

0800e1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e1f0:	4b27      	ldr	r3, [pc, #156]	; (800e290 <prvHeapInit+0xac>)
 800e1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f003 0307 	and.w	r3, r3, #7
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00c      	beq.n	800e218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3307      	adds	r3, #7
 800e202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f023 0307 	bic.w	r3, r3, #7
 800e20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	4a1f      	ldr	r2, [pc, #124]	; (800e290 <prvHeapInit+0xac>)
 800e214:	4413      	add	r3, r2
 800e216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e21c:	4a1d      	ldr	r2, [pc, #116]	; (800e294 <prvHeapInit+0xb0>)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e222:	4b1c      	ldr	r3, [pc, #112]	; (800e294 <prvHeapInit+0xb0>)
 800e224:	2200      	movs	r2, #0
 800e226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68ba      	ldr	r2, [r7, #8]
 800e22c:	4413      	add	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e230:	2208      	movs	r2, #8
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	1a9b      	subs	r3, r3, r2
 800e236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f023 0307 	bic.w	r3, r3, #7
 800e23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4a15      	ldr	r2, [pc, #84]	; (800e298 <prvHeapInit+0xb4>)
 800e244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e246:	4b14      	ldr	r3, [pc, #80]	; (800e298 <prvHeapInit+0xb4>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2200      	movs	r2, #0
 800e24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e24e:	4b12      	ldr	r3, [pc, #72]	; (800e298 <prvHeapInit+0xb4>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	1ad2      	subs	r2, r2, r3
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e264:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <prvHeapInit+0xb4>)
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	4a0a      	ldr	r2, [pc, #40]	; (800e29c <prvHeapInit+0xb8>)
 800e272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	4a09      	ldr	r2, [pc, #36]	; (800e2a0 <prvHeapInit+0xbc>)
 800e27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e27c:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <prvHeapInit+0xc0>)
 800e27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e282:	601a      	str	r2, [r3, #0]
}
 800e284:	bf00      	nop
 800e286:	3714      	adds	r7, #20
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	200011ac 	.word	0x200011ac
 800e294:	20004dac 	.word	0x20004dac
 800e298:	20004db4 	.word	0x20004db4
 800e29c:	20004dbc 	.word	0x20004dbc
 800e2a0:	20004db8 	.word	0x20004db8
 800e2a4:	20004dc8 	.word	0x20004dc8

0800e2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2b0:	4b28      	ldr	r3, [pc, #160]	; (800e354 <prvInsertBlockIntoFreeList+0xac>)
 800e2b2:	60fb      	str	r3, [r7, #12]
 800e2b4:	e002      	b.n	800e2bc <prvInsertBlockIntoFreeList+0x14>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d8f7      	bhi.n	800e2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d108      	bne.n	800e2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	685a      	ldr	r2, [r3, #4]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	441a      	add	r2, r3
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	441a      	add	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d118      	bne.n	800e330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	4b15      	ldr	r3, [pc, #84]	; (800e358 <prvInsertBlockIntoFreeList+0xb0>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d00d      	beq.n	800e326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	685a      	ldr	r2, [r3, #4]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	441a      	add	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	e008      	b.n	800e338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <prvInsertBlockIntoFreeList+0xb0>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	601a      	str	r2, [r3, #0]
 800e32e:	e003      	b.n	800e338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d002      	beq.n	800e346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e346:	bf00      	nop
 800e348:	3714      	adds	r7, #20
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	20004dac 	.word	0x20004dac
 800e358:	20004db4 	.word	0x20004db4

0800e35c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e360:	2201      	movs	r2, #1
 800e362:	490e      	ldr	r1, [pc, #56]	; (800e39c <MX_USB_HOST_Init+0x40>)
 800e364:	480e      	ldr	r0, [pc, #56]	; (800e3a0 <MX_USB_HOST_Init+0x44>)
 800e366:	f7fb faf5 	bl	8009954 <USBH_Init>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e370:	f7f3 fa0e 	bl	8001790 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e374:	490b      	ldr	r1, [pc, #44]	; (800e3a4 <MX_USB_HOST_Init+0x48>)
 800e376:	480a      	ldr	r0, [pc, #40]	; (800e3a0 <MX_USB_HOST_Init+0x44>)
 800e378:	f7fb fb9c 	bl	8009ab4 <USBH_RegisterClass>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e382:	f7f3 fa05 	bl	8001790 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e386:	4806      	ldr	r0, [pc, #24]	; (800e3a0 <MX_USB_HOST_Init+0x44>)
 800e388:	f7fb fc20 	bl	8009bcc <USBH_Start>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d001      	beq.n	800e396 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e392:	f7f3 f9fd 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e396:	bf00      	nop
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	0800e3a9 	.word	0x0800e3a9
 800e3a0:	2000501c 	.word	0x2000501c
 800e3a4:	2000000c 	.word	0x2000000c

0800e3a8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d819      	bhi.n	800e3f0 <USBH_UserProcess+0x48>
 800e3bc:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <USBH_UserProcess+0x1c>)
 800e3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c2:	bf00      	nop
 800e3c4:	0800e3f1 	.word	0x0800e3f1
 800e3c8:	0800e3e1 	.word	0x0800e3e1
 800e3cc:	0800e3f1 	.word	0x0800e3f1
 800e3d0:	0800e3e9 	.word	0x0800e3e9
 800e3d4:	0800e3d9 	.word	0x0800e3d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e3d8:	4b09      	ldr	r3, [pc, #36]	; (800e400 <USBH_UserProcess+0x58>)
 800e3da:	2203      	movs	r2, #3
 800e3dc:	701a      	strb	r2, [r3, #0]
  break;
 800e3de:	e008      	b.n	800e3f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e3e0:	4b07      	ldr	r3, [pc, #28]	; (800e400 <USBH_UserProcess+0x58>)
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	701a      	strb	r2, [r3, #0]
  break;
 800e3e6:	e004      	b.n	800e3f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e3e8:	4b05      	ldr	r3, [pc, #20]	; (800e400 <USBH_UserProcess+0x58>)
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	701a      	strb	r2, [r3, #0]
  break;
 800e3ee:	e000      	b.n	800e3f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800e3f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e3f2:	bf00      	nop
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	20004dcc 	.word	0x20004dcc

0800e404 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08a      	sub	sp, #40	; 0x28
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e40c:	f107 0314 	add.w	r3, r7, #20
 800e410:	2200      	movs	r2, #0
 800e412:	601a      	str	r2, [r3, #0]
 800e414:	605a      	str	r2, [r3, #4]
 800e416:	609a      	str	r2, [r3, #8]
 800e418:	60da      	str	r2, [r3, #12]
 800e41a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e424:	d147      	bne.n	800e4b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e426:	2300      	movs	r3, #0
 800e428:	613b      	str	r3, [r7, #16]
 800e42a:	4b25      	ldr	r3, [pc, #148]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e42e:	4a24      	ldr	r2, [pc, #144]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e430:	f043 0301 	orr.w	r3, r3, #1
 800e434:	6313      	str	r3, [r2, #48]	; 0x30
 800e436:	4b22      	ldr	r3, [pc, #136]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	613b      	str	r3, [r7, #16]
 800e440:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e442:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e448:	2300      	movs	r3, #0
 800e44a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e44c:	2300      	movs	r3, #0
 800e44e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e450:	f107 0314 	add.w	r3, r7, #20
 800e454:	4619      	mov	r1, r3
 800e456:	481b      	ldr	r0, [pc, #108]	; (800e4c4 <HAL_HCD_MspInit+0xc0>)
 800e458:	f7f4 fada 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e45c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e462:	2302      	movs	r3, #2
 800e464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e466:	2300      	movs	r3, #0
 800e468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e46a:	2300      	movs	r3, #0
 800e46c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e46e:	230a      	movs	r3, #10
 800e470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e472:	f107 0314 	add.w	r3, r7, #20
 800e476:	4619      	mov	r1, r3
 800e478:	4812      	ldr	r0, [pc, #72]	; (800e4c4 <HAL_HCD_MspInit+0xc0>)
 800e47a:	f7f4 fac9 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e47e:	4b10      	ldr	r3, [pc, #64]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e482:	4a0f      	ldr	r2, [pc, #60]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e488:	6353      	str	r3, [r2, #52]	; 0x34
 800e48a:	2300      	movs	r3, #0
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	4b0c      	ldr	r3, [pc, #48]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e492:	4a0b      	ldr	r2, [pc, #44]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e498:	6453      	str	r3, [r2, #68]	; 0x44
 800e49a:	4b09      	ldr	r3, [pc, #36]	; (800e4c0 <HAL_HCD_MspInit+0xbc>)
 800e49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e49e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2105      	movs	r1, #5
 800e4aa:	2043      	movs	r0, #67	; 0x43
 800e4ac:	f7f4 f9f4 	bl	8002898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4b0:	2043      	movs	r0, #67	; 0x43
 800e4b2:	f7f4 fa0d 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4b6:	bf00      	nop
 800e4b8:	3728      	adds	r7, #40	; 0x28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	40023800 	.word	0x40023800
 800e4c4:	40020000 	.word	0x40020000

0800e4c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fc f825 	bl	800a526 <USBH_LL_IncTimer>
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fc f869 	bl	800a5ca <USBH_LL_Connect>
}
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fc f87e 	bl	800a610 <USBH_LL_Disconnect>
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	460b      	mov	r3, r1
 800e526:	70fb      	strb	r3, [r7, #3]
 800e528:	4613      	mov	r3, r2
 800e52a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e532:	4618      	mov	r0, r3
 800e534:	f7fc f8b5 	bl	800a6a2 <USBH_LL_NotifyURBChange>
#endif
}
 800e538:	bf00      	nop
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fc f813 	bl	800a57a <USBH_LL_PortEnabled>
}
 800e554:	bf00      	nop
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fc f81f 	bl	800a5ae <USBH_LL_PortDisabled>
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e586:	2b01      	cmp	r3, #1
 800e588:	d12a      	bne.n	800e5e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e58a:	4a18      	ldr	r2, [pc, #96]	; (800e5ec <USBH_LL_Init+0x74>)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4a15      	ldr	r2, [pc, #84]	; (800e5ec <USBH_LL_Init+0x74>)
 800e596:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e59a:	4b14      	ldr	r3, [pc, #80]	; (800e5ec <USBH_LL_Init+0x74>)
 800e59c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e5a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e5a2:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5a4:	2208      	movs	r2, #8
 800e5a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e5a8:	4b10      	ldr	r3, [pc, #64]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5ae:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e5b4:	4b0d      	ldr	r3, [pc, #52]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5ba:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e5c0:	480a      	ldr	r0, [pc, #40]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5c2:	f7f4 fbda 	bl	8002d7a <HAL_HCD_Init>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e5cc:	f7f3 f8e0 	bl	8001790 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e5d0:	4806      	ldr	r0, [pc, #24]	; (800e5ec <USBH_LL_Init+0x74>)
 800e5d2:	f7f4 ffb7 	bl	8003544 <HAL_HCD_GetCurrentFrame>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7fb ff94 	bl	800a508 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20005400 	.word	0x20005400

0800e5f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e606:	4618      	mov	r0, r3
 800e608:	f7f4 ff26 	bl	8003458 <HAL_HCD_Start>
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f95c 	bl	800e8d0 <USBH_Get_USB_Status>
 800e618:	4603      	mov	r3, r0
 800e61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b084      	sub	sp, #16
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7f4 ff2e 	bl	800349e <HAL_HCD_Stop>
 800e642:	4603      	mov	r3, r0
 800e644:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	4618      	mov	r0, r3
 800e64a:	f000 f941 	bl	800e8d0 <USBH_Get_USB_Status>
 800e64e:	4603      	mov	r3, r0
 800e650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e652:	7bbb      	ldrb	r3, [r7, #14]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e664:	2301      	movs	r3, #1
 800e666:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e66e:	4618      	mov	r0, r3
 800e670:	f7f4 ff76 	bl	8003560 <HAL_HCD_GetCurrentSpeed>
 800e674:	4603      	mov	r3, r0
 800e676:	2b02      	cmp	r3, #2
 800e678:	d00c      	beq.n	800e694 <USBH_LL_GetSpeed+0x38>
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d80d      	bhi.n	800e69a <USBH_LL_GetSpeed+0x3e>
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <USBH_LL_GetSpeed+0x2c>
 800e682:	2b01      	cmp	r3, #1
 800e684:	d003      	beq.n	800e68e <USBH_LL_GetSpeed+0x32>
 800e686:	e008      	b.n	800e69a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e688:	2300      	movs	r3, #0
 800e68a:	73fb      	strb	r3, [r7, #15]
    break;
 800e68c:	e008      	b.n	800e6a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e68e:	2301      	movs	r3, #1
 800e690:	73fb      	strb	r3, [r7, #15]
    break;
 800e692:	e005      	b.n	800e6a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e694:	2302      	movs	r3, #2
 800e696:	73fb      	strb	r3, [r7, #15]
    break;
 800e698:	e002      	b.n	800e6a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e69a:	2301      	movs	r3, #1
 800e69c:	73fb      	strb	r3, [r7, #15]
    break;
 800e69e:	bf00      	nop
  }
  return  speed;
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b084      	sub	sp, #16
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7f4 ff09 	bl	80034d8 <HAL_HCD_ResetPort>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 f8ff 	bl	800e8d0 <USBH_Get_USB_Status>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e6f2:	78fa      	ldrb	r2, [r7, #3]
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f4 ff10 	bl	800351c <HAL_HCD_HC_GetXferCount>
 800e6fc:	4603      	mov	r3, r0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e706:	b590      	push	{r4, r7, lr}
 800e708:	b089      	sub	sp, #36	; 0x24
 800e70a:	af04      	add	r7, sp, #16
 800e70c:	6078      	str	r0, [r7, #4]
 800e70e:	4608      	mov	r0, r1
 800e710:	4611      	mov	r1, r2
 800e712:	461a      	mov	r2, r3
 800e714:	4603      	mov	r3, r0
 800e716:	70fb      	strb	r3, [r7, #3]
 800e718:	460b      	mov	r3, r1
 800e71a:	70bb      	strb	r3, [r7, #2]
 800e71c:	4613      	mov	r3, r2
 800e71e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e72e:	787c      	ldrb	r4, [r7, #1]
 800e730:	78ba      	ldrb	r2, [r7, #2]
 800e732:	78f9      	ldrb	r1, [r7, #3]
 800e734:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e736:	9302      	str	r3, [sp, #8]
 800e738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	4623      	mov	r3, r4
 800e746:	f7f4 fb7a 	bl	8002e3e <HAL_HCD_HC_Init>
 800e74a:	4603      	mov	r3, r0
 800e74c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	4618      	mov	r0, r3
 800e752:	f000 f8bd 	bl	800e8d0 <USBH_Get_USB_Status>
 800e756:	4603      	mov	r3, r0
 800e758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3714      	adds	r7, #20
 800e760:	46bd      	mov	sp, r7
 800e762:	bd90      	pop	{r4, r7, pc}

0800e764 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e77e:	78fa      	ldrb	r2, [r7, #3]
 800e780:	4611      	mov	r1, r2
 800e782:	4618      	mov	r0, r3
 800e784:	f7f4 fbea 	bl	8002f5c <HAL_HCD_HC_Halt>
 800e788:	4603      	mov	r3, r0
 800e78a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
 800e78e:	4618      	mov	r0, r3
 800e790:	f000 f89e 	bl	800e8d0 <USBH_Get_USB_Status>
 800e794:	4603      	mov	r3, r0
 800e796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e798:	7bbb      	ldrb	r3, [r7, #14]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e7a2:	b590      	push	{r4, r7, lr}
 800e7a4:	b089      	sub	sp, #36	; 0x24
 800e7a6:	af04      	add	r7, sp, #16
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	4608      	mov	r0, r1
 800e7ac:	4611      	mov	r1, r2
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	70fb      	strb	r3, [r7, #3]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	70bb      	strb	r3, [r7, #2]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e7ca:	787c      	ldrb	r4, [r7, #1]
 800e7cc:	78ba      	ldrb	r2, [r7, #2]
 800e7ce:	78f9      	ldrb	r1, [r7, #3]
 800e7d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e7d4:	9303      	str	r3, [sp, #12]
 800e7d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7d8:	9302      	str	r3, [sp, #8]
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	9301      	str	r3, [sp, #4]
 800e7de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	4623      	mov	r3, r4
 800e7e6:	f7f4 fbdd 	bl	8002fa4 <HAL_HCD_HC_SubmitRequest>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e7ee:	7bfb      	ldrb	r3, [r7, #15]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f000 f86d 	bl	800e8d0 <USBH_Get_USB_Status>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	bd90      	pop	{r4, r7, pc}

0800e804 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	460b      	mov	r3, r1
 800e80e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e816:	78fa      	ldrb	r2, [r7, #3]
 800e818:	4611      	mov	r1, r2
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7f4 fe6a 	bl	80034f4 <HAL_HCD_HC_GetURBState>
 800e820:	4603      	mov	r3, r0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b082      	sub	sp, #8
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	460b      	mov	r3, r1
 800e834:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d103      	bne.n	800e848 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e840:	78fb      	ldrb	r3, [r7, #3]
 800e842:	4618      	mov	r0, r3
 800e844:	f000 f870 	bl	800e928 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e848:	20c8      	movs	r0, #200	; 0xc8
 800e84a:	f7f3 ff49 	bl	80026e0 <HAL_Delay>
  return USBH_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	460b      	mov	r3, r1
 800e862:	70fb      	strb	r3, [r7, #3]
 800e864:	4613      	mov	r3, r2
 800e866:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e86e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e870:	78fb      	ldrb	r3, [r7, #3]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	212c      	movs	r1, #44	; 0x2c
 800e876:	fb01 f303 	mul.w	r3, r1, r3
 800e87a:	4413      	add	r3, r2
 800e87c:	333b      	adds	r3, #59	; 0x3b
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e884:	78fb      	ldrb	r3, [r7, #3]
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	212c      	movs	r1, #44	; 0x2c
 800e88a:	fb01 f303 	mul.w	r3, r1, r3
 800e88e:	4413      	add	r3, r2
 800e890:	3354      	adds	r3, #84	; 0x54
 800e892:	78ba      	ldrb	r2, [r7, #2]
 800e894:	701a      	strb	r2, [r3, #0]
 800e896:	e008      	b.n	800e8aa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e898:	78fb      	ldrb	r3, [r7, #3]
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	212c      	movs	r1, #44	; 0x2c
 800e89e:	fb01 f303 	mul.w	r3, r1, r3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	3355      	adds	r3, #85	; 0x55
 800e8a6:	78ba      	ldrb	r2, [r7, #2]
 800e8a8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7f3 ff0d 	bl	80026e0 <HAL_Delay>
}
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8de:	79fb      	ldrb	r3, [r7, #7]
 800e8e0:	2b03      	cmp	r3, #3
 800e8e2:	d817      	bhi.n	800e914 <USBH_Get_USB_Status+0x44>
 800e8e4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <USBH_Get_USB_Status+0x1c>)
 800e8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ea:	bf00      	nop
 800e8ec:	0800e8fd 	.word	0x0800e8fd
 800e8f0:	0800e903 	.word	0x0800e903
 800e8f4:	0800e909 	.word	0x0800e909
 800e8f8:	0800e90f 	.word	0x0800e90f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e900:	e00b      	b.n	800e91a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e902:	2302      	movs	r3, #2
 800e904:	73fb      	strb	r3, [r7, #15]
    break;
 800e906:	e008      	b.n	800e91a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e908:	2301      	movs	r3, #1
 800e90a:	73fb      	strb	r3, [r7, #15]
    break;
 800e90c:	e005      	b.n	800e91a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e90e:	2302      	movs	r3, #2
 800e910:	73fb      	strb	r3, [r7, #15]
    break;
 800e912:	e002      	b.n	800e91a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e914:	2302      	movs	r3, #2
 800e916:	73fb      	strb	r3, [r7, #15]
    break;
 800e918:	bf00      	nop
  }
  return usb_status;
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3714      	adds	r7, #20
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	4603      	mov	r3, r0
 800e930:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e932:	79fb      	ldrb	r3, [r7, #7]
 800e934:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e93c:	2301      	movs	r3, #1
 800e93e:	73fb      	strb	r3, [r7, #15]
 800e940:	e001      	b.n	800e946 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e942:	2300      	movs	r3, #0
 800e944:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e946:	7bfb      	ldrb	r3, [r7, #15]
 800e948:	461a      	mov	r2, r3
 800e94a:	2101      	movs	r1, #1
 800e94c:	4803      	ldr	r0, [pc, #12]	; (800e95c <MX_DriverVbusFS+0x34>)
 800e94e:	f7f4 f9fb 	bl	8002d48 <HAL_GPIO_WritePin>
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	40020800 	.word	0x40020800

0800e960 <__errno>:
 800e960:	4b01      	ldr	r3, [pc, #4]	; (800e968 <__errno+0x8>)
 800e962:	6818      	ldr	r0, [r3, #0]
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	20000030 	.word	0x20000030

0800e96c <__libc_init_array>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	4d0d      	ldr	r5, [pc, #52]	; (800e9a4 <__libc_init_array+0x38>)
 800e970:	4c0d      	ldr	r4, [pc, #52]	; (800e9a8 <__libc_init_array+0x3c>)
 800e972:	1b64      	subs	r4, r4, r5
 800e974:	10a4      	asrs	r4, r4, #2
 800e976:	2600      	movs	r6, #0
 800e978:	42a6      	cmp	r6, r4
 800e97a:	d109      	bne.n	800e990 <__libc_init_array+0x24>
 800e97c:	4d0b      	ldr	r5, [pc, #44]	; (800e9ac <__libc_init_array+0x40>)
 800e97e:	4c0c      	ldr	r4, [pc, #48]	; (800e9b0 <__libc_init_array+0x44>)
 800e980:	f000 f986 	bl	800ec90 <_init>
 800e984:	1b64      	subs	r4, r4, r5
 800e986:	10a4      	asrs	r4, r4, #2
 800e988:	2600      	movs	r6, #0
 800e98a:	42a6      	cmp	r6, r4
 800e98c:	d105      	bne.n	800e99a <__libc_init_array+0x2e>
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
 800e990:	f855 3b04 	ldr.w	r3, [r5], #4
 800e994:	4798      	blx	r3
 800e996:	3601      	adds	r6, #1
 800e998:	e7ee      	b.n	800e978 <__libc_init_array+0xc>
 800e99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e99e:	4798      	blx	r3
 800e9a0:	3601      	adds	r6, #1
 800e9a2:	e7f2      	b.n	800e98a <__libc_init_array+0x1e>
 800e9a4:	0801054c 	.word	0x0801054c
 800e9a8:	0801054c 	.word	0x0801054c
 800e9ac:	0801054c 	.word	0x0801054c
 800e9b0:	08010550 	.word	0x08010550

0800e9b4 <malloc>:
 800e9b4:	4b02      	ldr	r3, [pc, #8]	; (800e9c0 <malloc+0xc>)
 800e9b6:	4601      	mov	r1, r0
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	f000 b871 	b.w	800eaa0 <_malloc_r>
 800e9be:	bf00      	nop
 800e9c0:	20000030 	.word	0x20000030

0800e9c4 <free>:
 800e9c4:	4b02      	ldr	r3, [pc, #8]	; (800e9d0 <free+0xc>)
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	6818      	ldr	r0, [r3, #0]
 800e9ca:	f000 b819 	b.w	800ea00 <_free_r>
 800e9ce:	bf00      	nop
 800e9d0:	20000030 	.word	0x20000030

0800e9d4 <memcpy>:
 800e9d4:	440a      	add	r2, r1
 800e9d6:	4291      	cmp	r1, r2
 800e9d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e9dc:	d100      	bne.n	800e9e0 <memcpy+0xc>
 800e9de:	4770      	bx	lr
 800e9e0:	b510      	push	{r4, lr}
 800e9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9ea:	4291      	cmp	r1, r2
 800e9ec:	d1f9      	bne.n	800e9e2 <memcpy+0xe>
 800e9ee:	bd10      	pop	{r4, pc}

0800e9f0 <memset>:
 800e9f0:	4402      	add	r2, r0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d100      	bne.n	800e9fa <memset+0xa>
 800e9f8:	4770      	bx	lr
 800e9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e9fe:	e7f9      	b.n	800e9f4 <memset+0x4>

0800ea00 <_free_r>:
 800ea00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea02:	2900      	cmp	r1, #0
 800ea04:	d048      	beq.n	800ea98 <_free_r+0x98>
 800ea06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea0a:	9001      	str	r0, [sp, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea12:	bfb8      	it	lt
 800ea14:	18e4      	addlt	r4, r4, r3
 800ea16:	f000 f8ad 	bl	800eb74 <__malloc_lock>
 800ea1a:	4a20      	ldr	r2, [pc, #128]	; (800ea9c <_free_r+0x9c>)
 800ea1c:	9801      	ldr	r0, [sp, #4]
 800ea1e:	6813      	ldr	r3, [r2, #0]
 800ea20:	4615      	mov	r5, r2
 800ea22:	b933      	cbnz	r3, 800ea32 <_free_r+0x32>
 800ea24:	6063      	str	r3, [r4, #4]
 800ea26:	6014      	str	r4, [r2, #0]
 800ea28:	b003      	add	sp, #12
 800ea2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea2e:	f000 b8a7 	b.w	800eb80 <__malloc_unlock>
 800ea32:	42a3      	cmp	r3, r4
 800ea34:	d90b      	bls.n	800ea4e <_free_r+0x4e>
 800ea36:	6821      	ldr	r1, [r4, #0]
 800ea38:	1862      	adds	r2, r4, r1
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	bf04      	itt	eq
 800ea3e:	681a      	ldreq	r2, [r3, #0]
 800ea40:	685b      	ldreq	r3, [r3, #4]
 800ea42:	6063      	str	r3, [r4, #4]
 800ea44:	bf04      	itt	eq
 800ea46:	1852      	addeq	r2, r2, r1
 800ea48:	6022      	streq	r2, [r4, #0]
 800ea4a:	602c      	str	r4, [r5, #0]
 800ea4c:	e7ec      	b.n	800ea28 <_free_r+0x28>
 800ea4e:	461a      	mov	r2, r3
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	b10b      	cbz	r3, 800ea58 <_free_r+0x58>
 800ea54:	42a3      	cmp	r3, r4
 800ea56:	d9fa      	bls.n	800ea4e <_free_r+0x4e>
 800ea58:	6811      	ldr	r1, [r2, #0]
 800ea5a:	1855      	adds	r5, r2, r1
 800ea5c:	42a5      	cmp	r5, r4
 800ea5e:	d10b      	bne.n	800ea78 <_free_r+0x78>
 800ea60:	6824      	ldr	r4, [r4, #0]
 800ea62:	4421      	add	r1, r4
 800ea64:	1854      	adds	r4, r2, r1
 800ea66:	42a3      	cmp	r3, r4
 800ea68:	6011      	str	r1, [r2, #0]
 800ea6a:	d1dd      	bne.n	800ea28 <_free_r+0x28>
 800ea6c:	681c      	ldr	r4, [r3, #0]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	6053      	str	r3, [r2, #4]
 800ea72:	4421      	add	r1, r4
 800ea74:	6011      	str	r1, [r2, #0]
 800ea76:	e7d7      	b.n	800ea28 <_free_r+0x28>
 800ea78:	d902      	bls.n	800ea80 <_free_r+0x80>
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	6003      	str	r3, [r0, #0]
 800ea7e:	e7d3      	b.n	800ea28 <_free_r+0x28>
 800ea80:	6825      	ldr	r5, [r4, #0]
 800ea82:	1961      	adds	r1, r4, r5
 800ea84:	428b      	cmp	r3, r1
 800ea86:	bf04      	itt	eq
 800ea88:	6819      	ldreq	r1, [r3, #0]
 800ea8a:	685b      	ldreq	r3, [r3, #4]
 800ea8c:	6063      	str	r3, [r4, #4]
 800ea8e:	bf04      	itt	eq
 800ea90:	1949      	addeq	r1, r1, r5
 800ea92:	6021      	streq	r1, [r4, #0]
 800ea94:	6054      	str	r4, [r2, #4]
 800ea96:	e7c7      	b.n	800ea28 <_free_r+0x28>
 800ea98:	b003      	add	sp, #12
 800ea9a:	bd30      	pop	{r4, r5, pc}
 800ea9c:	20004dd0 	.word	0x20004dd0

0800eaa0 <_malloc_r>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	1ccd      	adds	r5, r1, #3
 800eaa4:	f025 0503 	bic.w	r5, r5, #3
 800eaa8:	3508      	adds	r5, #8
 800eaaa:	2d0c      	cmp	r5, #12
 800eaac:	bf38      	it	cc
 800eaae:	250c      	movcc	r5, #12
 800eab0:	2d00      	cmp	r5, #0
 800eab2:	4606      	mov	r6, r0
 800eab4:	db01      	blt.n	800eaba <_malloc_r+0x1a>
 800eab6:	42a9      	cmp	r1, r5
 800eab8:	d903      	bls.n	800eac2 <_malloc_r+0x22>
 800eaba:	230c      	movs	r3, #12
 800eabc:	6033      	str	r3, [r6, #0]
 800eabe:	2000      	movs	r0, #0
 800eac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac2:	f000 f857 	bl	800eb74 <__malloc_lock>
 800eac6:	4921      	ldr	r1, [pc, #132]	; (800eb4c <_malloc_r+0xac>)
 800eac8:	680a      	ldr	r2, [r1, #0]
 800eaca:	4614      	mov	r4, r2
 800eacc:	b99c      	cbnz	r4, 800eaf6 <_malloc_r+0x56>
 800eace:	4f20      	ldr	r7, [pc, #128]	; (800eb50 <_malloc_r+0xb0>)
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	b923      	cbnz	r3, 800eade <_malloc_r+0x3e>
 800ead4:	4621      	mov	r1, r4
 800ead6:	4630      	mov	r0, r6
 800ead8:	f000 f83c 	bl	800eb54 <_sbrk_r>
 800eadc:	6038      	str	r0, [r7, #0]
 800eade:	4629      	mov	r1, r5
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 f837 	bl	800eb54 <_sbrk_r>
 800eae6:	1c43      	adds	r3, r0, #1
 800eae8:	d123      	bne.n	800eb32 <_malloc_r+0x92>
 800eaea:	230c      	movs	r3, #12
 800eaec:	6033      	str	r3, [r6, #0]
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f000 f846 	bl	800eb80 <__malloc_unlock>
 800eaf4:	e7e3      	b.n	800eabe <_malloc_r+0x1e>
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	1b5b      	subs	r3, r3, r5
 800eafa:	d417      	bmi.n	800eb2c <_malloc_r+0x8c>
 800eafc:	2b0b      	cmp	r3, #11
 800eafe:	d903      	bls.n	800eb08 <_malloc_r+0x68>
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	441c      	add	r4, r3
 800eb04:	6025      	str	r5, [r4, #0]
 800eb06:	e004      	b.n	800eb12 <_malloc_r+0x72>
 800eb08:	6863      	ldr	r3, [r4, #4]
 800eb0a:	42a2      	cmp	r2, r4
 800eb0c:	bf0c      	ite	eq
 800eb0e:	600b      	streq	r3, [r1, #0]
 800eb10:	6053      	strne	r3, [r2, #4]
 800eb12:	4630      	mov	r0, r6
 800eb14:	f000 f834 	bl	800eb80 <__malloc_unlock>
 800eb18:	f104 000b 	add.w	r0, r4, #11
 800eb1c:	1d23      	adds	r3, r4, #4
 800eb1e:	f020 0007 	bic.w	r0, r0, #7
 800eb22:	1ac2      	subs	r2, r0, r3
 800eb24:	d0cc      	beq.n	800eac0 <_malloc_r+0x20>
 800eb26:	1a1b      	subs	r3, r3, r0
 800eb28:	50a3      	str	r3, [r4, r2]
 800eb2a:	e7c9      	b.n	800eac0 <_malloc_r+0x20>
 800eb2c:	4622      	mov	r2, r4
 800eb2e:	6864      	ldr	r4, [r4, #4]
 800eb30:	e7cc      	b.n	800eacc <_malloc_r+0x2c>
 800eb32:	1cc4      	adds	r4, r0, #3
 800eb34:	f024 0403 	bic.w	r4, r4, #3
 800eb38:	42a0      	cmp	r0, r4
 800eb3a:	d0e3      	beq.n	800eb04 <_malloc_r+0x64>
 800eb3c:	1a21      	subs	r1, r4, r0
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f000 f808 	bl	800eb54 <_sbrk_r>
 800eb44:	3001      	adds	r0, #1
 800eb46:	d1dd      	bne.n	800eb04 <_malloc_r+0x64>
 800eb48:	e7cf      	b.n	800eaea <_malloc_r+0x4a>
 800eb4a:	bf00      	nop
 800eb4c:	20004dd0 	.word	0x20004dd0
 800eb50:	20004dd4 	.word	0x20004dd4

0800eb54 <_sbrk_r>:
 800eb54:	b538      	push	{r3, r4, r5, lr}
 800eb56:	4d06      	ldr	r5, [pc, #24]	; (800eb70 <_sbrk_r+0x1c>)
 800eb58:	2300      	movs	r3, #0
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	602b      	str	r3, [r5, #0]
 800eb60:	f7f3 fd0a 	bl	8002578 <_sbrk>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	d102      	bne.n	800eb6e <_sbrk_r+0x1a>
 800eb68:	682b      	ldr	r3, [r5, #0]
 800eb6a:	b103      	cbz	r3, 800eb6e <_sbrk_r+0x1a>
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	20005704 	.word	0x20005704

0800eb74 <__malloc_lock>:
 800eb74:	4801      	ldr	r0, [pc, #4]	; (800eb7c <__malloc_lock+0x8>)
 800eb76:	f000 b809 	b.w	800eb8c <__retarget_lock_acquire_recursive>
 800eb7a:	bf00      	nop
 800eb7c:	2000570c 	.word	0x2000570c

0800eb80 <__malloc_unlock>:
 800eb80:	4801      	ldr	r0, [pc, #4]	; (800eb88 <__malloc_unlock+0x8>)
 800eb82:	f000 b804 	b.w	800eb8e <__retarget_lock_release_recursive>
 800eb86:	bf00      	nop
 800eb88:	2000570c 	.word	0x2000570c

0800eb8c <__retarget_lock_acquire_recursive>:
 800eb8c:	4770      	bx	lr

0800eb8e <__retarget_lock_release_recursive>:
 800eb8e:	4770      	bx	lr

0800eb90 <floor>:
 800eb90:	ec51 0b10 	vmov	r0, r1, d0
 800eb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800eb9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800eba0:	2e13      	cmp	r6, #19
 800eba2:	ee10 5a10 	vmov	r5, s0
 800eba6:	ee10 8a10 	vmov	r8, s0
 800ebaa:	460c      	mov	r4, r1
 800ebac:	dc32      	bgt.n	800ec14 <floor+0x84>
 800ebae:	2e00      	cmp	r6, #0
 800ebb0:	da14      	bge.n	800ebdc <floor+0x4c>
 800ebb2:	a333      	add	r3, pc, #204	; (adr r3, 800ec80 <floor+0xf0>)
 800ebb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb8:	f7f1 fb10 	bl	80001dc <__adddf3>
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f7f1 ff52 	bl	8000a68 <__aeabi_dcmpgt>
 800ebc4:	b138      	cbz	r0, 800ebd6 <floor+0x46>
 800ebc6:	2c00      	cmp	r4, #0
 800ebc8:	da57      	bge.n	800ec7a <floor+0xea>
 800ebca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ebce:	431d      	orrs	r5, r3
 800ebd0:	d001      	beq.n	800ebd6 <floor+0x46>
 800ebd2:	4c2d      	ldr	r4, [pc, #180]	; (800ec88 <floor+0xf8>)
 800ebd4:	2500      	movs	r5, #0
 800ebd6:	4621      	mov	r1, r4
 800ebd8:	4628      	mov	r0, r5
 800ebda:	e025      	b.n	800ec28 <floor+0x98>
 800ebdc:	4f2b      	ldr	r7, [pc, #172]	; (800ec8c <floor+0xfc>)
 800ebde:	4137      	asrs	r7, r6
 800ebe0:	ea01 0307 	and.w	r3, r1, r7
 800ebe4:	4303      	orrs	r3, r0
 800ebe6:	d01f      	beq.n	800ec28 <floor+0x98>
 800ebe8:	a325      	add	r3, pc, #148	; (adr r3, 800ec80 <floor+0xf0>)
 800ebea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebee:	f7f1 faf5 	bl	80001dc <__adddf3>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f7f1 ff37 	bl	8000a68 <__aeabi_dcmpgt>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0eb      	beq.n	800ebd6 <floor+0x46>
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	bfbe      	ittt	lt
 800ec02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec06:	fa43 f606 	asrlt.w	r6, r3, r6
 800ec0a:	19a4      	addlt	r4, r4, r6
 800ec0c:	ea24 0407 	bic.w	r4, r4, r7
 800ec10:	2500      	movs	r5, #0
 800ec12:	e7e0      	b.n	800ebd6 <floor+0x46>
 800ec14:	2e33      	cmp	r6, #51	; 0x33
 800ec16:	dd0b      	ble.n	800ec30 <floor+0xa0>
 800ec18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec1c:	d104      	bne.n	800ec28 <floor+0x98>
 800ec1e:	ee10 2a10 	vmov	r2, s0
 800ec22:	460b      	mov	r3, r1
 800ec24:	f7f1 fada 	bl	80001dc <__adddf3>
 800ec28:	ec41 0b10 	vmov	d0, r0, r1
 800ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ec34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec38:	fa23 f707 	lsr.w	r7, r3, r7
 800ec3c:	4207      	tst	r7, r0
 800ec3e:	d0f3      	beq.n	800ec28 <floor+0x98>
 800ec40:	a30f      	add	r3, pc, #60	; (adr r3, 800ec80 <floor+0xf0>)
 800ec42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec46:	f7f1 fac9 	bl	80001dc <__adddf3>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f7f1 ff0b 	bl	8000a68 <__aeabi_dcmpgt>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d0bf      	beq.n	800ebd6 <floor+0x46>
 800ec56:	2c00      	cmp	r4, #0
 800ec58:	da02      	bge.n	800ec60 <floor+0xd0>
 800ec5a:	2e14      	cmp	r6, #20
 800ec5c:	d103      	bne.n	800ec66 <floor+0xd6>
 800ec5e:	3401      	adds	r4, #1
 800ec60:	ea25 0507 	bic.w	r5, r5, r7
 800ec64:	e7b7      	b.n	800ebd6 <floor+0x46>
 800ec66:	2301      	movs	r3, #1
 800ec68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ec6c:	fa03 f606 	lsl.w	r6, r3, r6
 800ec70:	4435      	add	r5, r6
 800ec72:	4545      	cmp	r5, r8
 800ec74:	bf38      	it	cc
 800ec76:	18e4      	addcc	r4, r4, r3
 800ec78:	e7f2      	b.n	800ec60 <floor+0xd0>
 800ec7a:	2500      	movs	r5, #0
 800ec7c:	462c      	mov	r4, r5
 800ec7e:	e7aa      	b.n	800ebd6 <floor+0x46>
 800ec80:	8800759c 	.word	0x8800759c
 800ec84:	7e37e43c 	.word	0x7e37e43c
 800ec88:	bff00000 	.word	0xbff00000
 800ec8c:	000fffff 	.word	0x000fffff

0800ec90 <_init>:
 800ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec92:	bf00      	nop
 800ec94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec96:	bc08      	pop	{r3}
 800ec98:	469e      	mov	lr, r3
 800ec9a:	4770      	bx	lr

0800ec9c <_fini>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr
