
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d0  0800f678  0800f678  0001f678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f48  08010f48  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010f48  08010f48  00020f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f50  08010f50  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f50  08010f50  00020f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f54  08010f54  00020f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010f58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005734  20000094  08010fec  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200057c8  08010fec  000357c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034279  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006525  00000000  00000000  0006433d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  0006a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002110  00000000  00000000  0006cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002806d  00000000  00000000  0006eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a8a4  00000000  00000000  00096d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1964  00000000  00000000  000c15b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009948  00000000  00000000  001a2f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f660 	.word	0x0800f660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800f660 	.word	0x0800f660

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e012      	b.n	8000ea2 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d103      	bne.n	8000e98 <string_compare+0x34>
	   	  		  comVAR++;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	3301      	adds	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
 8000e96:	e001      	b.n	8000e9c <string_compare+0x38>
	   	  	  else comVAR=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e9c:	7dbb      	ldrb	r3, [r7, #22]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75bb      	strb	r3, [r7, #22]
 8000ea2:	7dbb      	ldrb	r3, [r7, #22]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8e7      	bhi.n	8000e7c <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d101      	bne.n	8000eba <string_compare+0x56>
		 	return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <string_compare+0x58>
	 else 	return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Message_handler>:

void Message_handler()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000ecc:	2206      	movs	r2, #6
 8000ece:	4927      	ldr	r1, [pc, #156]	; (8000f6c <Message_handler+0xa4>)
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <Message_handler+0xa8>)
 8000ed2:	f7ff ffc7 	bl	8000e64 <string_compare>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00d      	beq.n	8000ef8 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <Message_handler+0xac>)
 8000ee4:	f002 f8ca 	bl	800307c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000ee8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eec:	220b      	movs	r2, #11
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <Message_handler+0xb0>)
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <Message_handler+0xb4>)
 8000ef2:	f007 f888 	bl	8008006 <HAL_UART_Transmit>
 8000ef6:	e02c      	b.n	8000f52 <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000ef8:	2207      	movs	r2, #7
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <Message_handler+0xb8>)
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <Message_handler+0xa8>)
 8000efe:	f7ff ffb1 	bl	8000e64 <string_compare>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Message_handler+0xac>)
 8000f10:	f002 f8b4 	bl	800307c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 8000f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f18:	220c      	movs	r2, #12
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <Message_handler+0xbc>)
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <Message_handler+0xb4>)
 8000f1e:	f007 f872 	bl	8008006 <HAL_UART_Transmit>
 8000f22:	e016      	b.n	8000f52 <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Message_handler+0xa8>)
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <Message_handler+0xa8>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <Message_handler+0xc0>)
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <Message_handler+0xa8>)
 8000f3e:	f7ff f947 	bl	80001d0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f4a:	4909      	ldr	r1, [pc, #36]	; (8000f70 <Message_handler+0xa8>)
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <Message_handler+0xb4>)
 8000f4e:	f007 f85a 	bl	8008006 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <Message_handler+0xa8>)
 8000f58:	f00e fa32 	bl	800f3c0 <memset>
	buffer_index = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Message_handler+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <Message_handler+0xc8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800f678 	.word	0x0800f678
 8000f70:	20004ddc 	.word	0x20004ddc
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	0800f680 	.word	0x0800f680
 8000f7c:	20004f90 	.word	0x20004f90
 8000f80:	0800f68c 	.word	0x0800f68c
 8000f84:	0800f694 	.word	0x0800f694
 8000f88:	0800f6a4 	.word	0x0800f6a4
 8000f8c:	200000b1 	.word	0x200000b1
 8000f90:	200000b0 	.word	0x200000b0

08000f94 <start_normal>:
#define ANGLE_9_INIT 100
#define ANGLE_10_INIT 105
#define ANGLE_11_INIT 35

void start_normal()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 8000f98:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001024 <start_normal+0x90>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 fef3 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(1,ANGLE_1_INIT);
 8000fa2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001028 <start_normal+0x94>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 feee 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8000fac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001024 <start_normal+0x90>
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f000 fee9 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8000fb6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800102c <start_normal+0x98>
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 fee4 	bl	8001d88 <PCA9685_SetServoAngle>
	  HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 fd26 	bl	8002a14 <HAL_Delay>
	  PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000fc8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001030 <start_normal+0x9c>
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f000 fedb 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 8000fd2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001034 <start_normal+0xa0>
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f000 fed6 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8000fdc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001038 <start_normal+0xa4>
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f000 fed1 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000fe6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001028 <start_normal+0x94>
 8000fea:	2007      	movs	r0, #7
 8000fec:	f000 fecc 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(8, ANGLE_8_INIT);
 8000ff0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800103c <start_normal+0xa8>
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f000 fec7 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8000ffa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001040 <start_normal+0xac>
 8000ffe:	2009      	movs	r0, #9
 8001000:	f000 fec2 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(10+2, ANGLE_10_INIT);
 8001004:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001038 <start_normal+0xa4>
 8001008:	200c      	movs	r0, #12
 800100a:	f000 febd 	bl	8001d88 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 800100e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001034 <start_normal+0xa0>
 8001012:	200b      	movs	r0, #11
 8001014:	f000 feb8 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(2000);
 8001018:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101c:	f001 fcfa 	bl	8002a14 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	42f00000 	.word	0x42f00000
 8001028:	42dc0000 	.word	0x42dc0000
 800102c:	42340000 	.word	0x42340000
 8001030:	42700000 	.word	0x42700000
 8001034:	420c0000 	.word	0x420c0000
 8001038:	42d20000 	.word	0x42d20000
 800103c:	42960000 	.word	0x42960000
 8001040:	42c80000 	.word	0x42c80000

08001044 <walk>:


void walk(void *parameters)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	int delay_time = 100;
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	60fb      	str	r3, [r7, #12]
	PCA9685_SetServoAngle(7, ANGLE_7_INIT-30);
 8001050:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80011bc <walk+0x178>
 8001054:	2007      	movs	r0, #7
 8001056:	f000 fe97 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fcd9 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8001062:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80011c0 <walk+0x17c>
 8001066:	2003      	movs	r0, #3
 8001068:	f000 fe8e 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fcd0 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT-35);
 8001074:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80011c4 <walk+0x180>
 8001078:	200b      	movs	r0, #11
 800107a:	f000 fe85 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fcc7 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001086:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80011c8 <walk+0x184>
 800108a:	2007      	movs	r0, #7
 800108c:	f000 fe7c 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fcbe 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001098:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80011c8 <walk+0x184>
 800109c:	2007      	movs	r0, #7
 800109e:	f000 fe73 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fcb5 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT+20);
 80010aa:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80011bc <walk+0x178>
 80010ae:	2004      	movs	r0, #4
 80010b0:	f000 fe6a 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fcac 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT-20);
 80010bc:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80011cc <walk+0x188>
 80010c0:	2008      	movs	r0, #8
 80010c2:	f000 fe61 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fca3 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 80010ce:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80011d0 <walk+0x18c>
 80010d2:	2004      	movs	r0, #4
 80010d4:	f000 fe58 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fc9a 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT-55);
 80010e0:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80011c0 <walk+0x17c>
 80010e4:	2009      	movs	r0, #9
 80010e6:	f000 fe4f 	bl	8001d88 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 80010ea:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80011d4 <walk+0x190>
 80010ee:	200b      	movs	r0, #11
 80010f0:	f000 fe4a 	bl	8001d88 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT-30);
 80010f4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80011d8 <walk+0x194>
 80010f8:	2002      	movs	r0, #2
 80010fa:	f000 fe45 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fc87 	bl	8002a14 <HAL_Delay>

	PCA9685_SetServoAngle(6, ANGLE_6_INIT+30);
 8001106:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80011dc <walk+0x198>
 800110a:	2006      	movs	r0, #6
 800110c:	f000 fe3c 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fc7e 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(10+2, ANGLE_10_INIT+30);
 8001118:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80011dc <walk+0x198>
 800111c:	200c      	movs	r0, #12
 800111e:	f000 fe33 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fc75 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 800112a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80011e0 <walk+0x19c>
 800112e:	2002      	movs	r0, #2
 8001130:	f000 fe2a 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fc6c 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 800113c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80011e4 <walk+0x1a0>
 8001140:	2006      	movs	r0, #6
 8001142:	f000 fe21 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fc63 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(10+2, ANGLE_10_INIT+30);
 800114e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80011dc <walk+0x198>
 8001152:	200c      	movs	r0, #12
 8001154:	f000 fe18 	bl	8001d88 <PCA9685_SetServoAngle>


//		STATE 2
	PCA9685_SetServoAngle(5, ANGLE_5_INIT+30);
 8001158:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80011e8 <walk+0x1a4>
 800115c:	2005      	movs	r0, #5
 800115e:	f000 fe13 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fc55 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 800116a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80011ec <walk+0x1a8>
 800116e:	2009      	movs	r0, #9
 8001170:	f000 fe0a 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fc4c 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 800117c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80011d4 <walk+0x190>
 8001180:	2005      	movs	r0, #5
 8001182:	f000 fe01 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fc43 	bl	8002a14 <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT+20);
 800118e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80011f0 <walk+0x1ac>
 8001192:	2008      	movs	r0, #8
 8001194:	f000 fdf8 	bl	8001d88 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(10+2, ANGLE_10_INIT);
 8001198:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80011e4 <walk+0x1a0>
 800119c:	200c      	movs	r0, #12
 800119e:	f000 fdf3 	bl	8001d88 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT+20);
 80011a2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80011e8 <walk+0x1a4>
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 fdee 	bl	8001d88 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fc30 	bl	8002a14 <HAL_Delay>

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	42a00000 	.word	0x42a00000
 80011c0:	42340000 	.word	0x42340000
 80011c4:	00000000 	.word	0x00000000
 80011c8:	42dc0000 	.word	0x42dc0000
 80011cc:	425c0000 	.word	0x425c0000
 80011d0:	42700000 	.word	0x42700000
 80011d4:	420c0000 	.word	0x420c0000
 80011d8:	42b40000 	.word	0x42b40000
 80011dc:	43070000 	.word	0x43070000
 80011e0:	42f00000 	.word	0x42f00000
 80011e4:	42d20000 	.word	0x42d20000
 80011e8:	42820000 	.word	0x42820000
 80011ec:	42c80000 	.word	0x42c80000
 80011f0:	42be0000 	.word	0x42be0000

080011f4 <bt_config>:
	}
	vTaskDelete(NULL);
}

void bt_config(void *parameters)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	int state = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 500);
 8001200:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001204:	2232      	movs	r2, #50	; 0x32
 8001206:	4920      	ldr	r1, [pc, #128]	; (8001288 <bt_config+0x94>)
 8001208:	4820      	ldr	r0, [pc, #128]	; (800128c <bt_config+0x98>)
 800120a:	f006 ff8e 	bl	800812a <HAL_UART_Receive>
		if(rx_buffer[0] == 'w')
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <bt_config+0x94>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b77      	cmp	r3, #119	; 0x77
 8001214:	d12a      	bne.n	800126c <bt_config+0x78>
		{
			//walking formation
			if(!state)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d123      	bne.n	8001264 <bt_config+0x70>
			{
				int delay_time = 100;
 800121c:	2364      	movs	r3, #100	; 0x64
 800121e:	60bb      	str	r3, [r7, #8]
				PCA9685_SetServoAngle(4, ANGLE_4_INIT+20);
 8001220:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001290 <bt_config+0x9c>
 8001224:	2004      	movs	r0, #4
 8001226:	f000 fdaf 	bl	8001d88 <PCA9685_SetServoAngle>
				HAL_Delay(delay_time);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fbf1 	bl	8002a14 <HAL_Delay>
				PCA9685_SetServoAngle(8, ANGLE_8_INIT+20);
 8001232:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001294 <bt_config+0xa0>
 8001236:	2008      	movs	r0, #8
 8001238:	f000 fda6 	bl	8001d88 <PCA9685_SetServoAngle>
				HAL_Delay(delay_time);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fbe8 	bl	8002a14 <HAL_Delay>
				PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001244:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001298 <bt_config+0xa4>
 8001248:	2004      	movs	r0, #4
 800124a:	f000 fd9d 	bl	8001d88 <PCA9685_SetServoAngle>
				HAL_Delay(delay_time);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fbdf 	bl	8002a14 <HAL_Delay>
				state = !state;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	60fb      	str	r3, [r7, #12]
			}

			walk(0);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff feed 	bl	8001044 <walk>
 800126a:	e7c9      	b.n	8001200 <bt_config+0xc>
//			xTaskCreate(walk, "walking", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, NULL);
		}else
		if(rx_buffer[0] == 's')
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <bt_config+0x94>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b73      	cmp	r3, #115	; 0x73
 8001272:	d1c5      	bne.n	8001200 <bt_config+0xc>
		{
			start_normal();
 8001274:	f7ff fe8e 	bl	8000f94 <start_normal>
			state = !state;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf0c      	ite	eq
 800127e:	2301      	moveq	r3, #1
 8001280:	2300      	movne	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 500);
 8001286:	e7bb      	b.n	8001200 <bt_config+0xc>
 8001288:	20004ebc 	.word	0x20004ebc
 800128c:	20004f90 	.word	0x20004f90
 8001290:	42a00000 	.word	0x42a00000
 8001294:	42be0000 	.word	0x42be0000
 8001298:	42700000 	.word	0x42700000

0800129c <faces>:
	vTaskDelete(NULL);

}

void faces(void *parameters)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
	int times = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	4a35      	ldr	r2, [pc, #212]	; (8001388 <faces+0xec>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 fdd8 	bl	8001e6c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80012bc:	f000 ff02 	bl	80020c4 <SSD1306_UpdateScreen>
		HAL_Delay(times + 1000);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fba4 	bl	8002a14 <HAL_Delay>
		SSD1306_Clear();
 80012cc:	f000 ffa0 	bl	8002210 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	2340      	movs	r3, #64	; 0x40
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	4a2c      	ldr	r2, [pc, #176]	; (800138c <faces+0xf0>)
 80012dc:	2100      	movs	r1, #0
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fdc4 	bl	8001e6c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80012e4:	f000 feee 	bl	80020c4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fb92 	bl	8002a14 <HAL_Delay>
		SSD1306_Clear();
 80012f0:	f000 ff8e 	bl	8002210 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <faces+0xf4>)
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f000 fdb2 	bl	8001e6c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001308:	f000 fedc 	bl	80020c4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fb80 	bl	8002a14 <HAL_Delay>
		SSD1306_Clear();
 8001314:	f000 ff7c 	bl	8002210 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 8001318:	2301      	movs	r3, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2340      	movs	r3, #64	; 0x40
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <faces+0xf8>)
 8001324:	2100      	movs	r1, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f000 fda0 	bl	8001e6c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800132c:	f000 feca 	bl	80020c4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fb6e 	bl	8002a14 <HAL_Delay>
		SSD1306_Clear();
 8001338:	f000 ff6a 	bl	8002210 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 800133c:	2301      	movs	r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <faces+0xfc>)
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fd8e 	bl	8001e6c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001350:	f000 feb8 	bl	80020c4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fb5c 	bl	8002a14 <HAL_Delay>
		SSD1306_Clear();
 800135c:	f000 ff58 	bl	8002210 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	4a0c      	ldr	r2, [pc, #48]	; (800139c <faces+0x100>)
 800136c:	2100      	movs	r1, #0
 800136e:	2000      	movs	r0, #0
 8001370:	f000 fd7c 	bl	8001e6c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001374:	f000 fea6 	bl	80020c4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fb4a 	bl	8002a14 <HAL_Delay>
		SSD1306_Clear();
 8001380:	f000 ff46 	bl	8002210 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 8001384:	e790      	b.n	80012a8 <faces+0xc>
 8001386:	bf00      	nop
 8001388:	0800f70c 	.word	0x0800f70c
 800138c:	0800fb0c 	.word	0x0800fb0c
 8001390:	0800ff0c 	.word	0x0800ff0c
 8001394:	0801030c 	.word	0x0801030c
 8001398:	0801070c 	.word	0x0801070c
 800139c:	08010b0c 	.word	0x08010b0c

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a6:	f001 faf3 	bl	8002990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f847 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f000 fa01 	bl	80017b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013b2:	f000 f8c5 	bl	8001540 <MX_I2C1_Init>
  MX_I2S3_Init();
 80013b6:	f000 f91f 	bl	80015f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80013ba:	f000 f94d 	bl	8001658 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80013be:	f000 f9cf 	bl	8001760 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80013c2:	f000 f8eb 	bl	800159c <MX_I2C3_Init>
  MX_TIM2_Init();
 80013c6:	f000 f97d 	bl	80016c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	SSD1306_Init();
 80013ca:	f000 fdb7 	bl	8001f3c <SSD1306_Init>
	PCA9685_Init(&hi2c3);
 80013ce:	4813      	ldr	r0, [pc, #76]	; (800141c <main+0x7c>)
 80013d0:	f000 fd36 	bl	8001e40 <PCA9685_Init>

	start_normal();
 80013d4:	f7ff fdde 	bl	8000f94 <start_normal>
	xTaskHandle HT1, HT2;
	xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <main+0x80>)
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <main+0x84>)
 80013e8:	f00b fe7b 	bl	800d0e2 <xTaskCreate>
	xTaskCreate(bt_config, "bluetooth_check", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
 80013ec:	463b      	mov	r3, r7
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	490b      	ldr	r1, [pc, #44]	; (8001428 <main+0x88>)
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <main+0x8c>)
 80013fc:	f00b fe71 	bl	800d0e2 <xTaskCreate>
//	vTaskStartScheduler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001400:	f00a fd5c 	bl	800bebc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <main+0x90>)
 8001406:	2100      	movs	r1, #0
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <main+0x94>)
 800140a:	f00a fda1 	bl	800bf50 <osThreadNew>
 800140e:	4603      	mov	r3, r0
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <main+0x98>)
 8001412:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001414:	f00a fd76 	bl	800bf04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x78>
 800141a:	bf00      	nop
 800141c:	20004e14 	.word	0x20004e14
 8001420:	0800f6c8 	.word	0x0800f6c8
 8001424:	0800129d 	.word	0x0800129d
 8001428:	0800f6d4 	.word	0x0800f6d4
 800142c:	080011f5 	.word	0x080011f5
 8001430:	08010f0c 	.word	0x08010f0c
 8001434:	080019d1 	.word	0x080019d1
 8001438:	20004e10 	.word	0x20004e10

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b098      	sub	sp, #96	; 0x60
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001446:	2230      	movs	r2, #48	; 0x30
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f00d ffb8 	bl	800f3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <SystemClock_Config+0xfc>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a30      	ldr	r2, [pc, #192]	; (8001538 <SystemClock_Config+0xfc>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <SystemClock_Config+0xfc>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <SystemClock_Config+0x100>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a2a      	ldr	r2, [pc, #168]	; (800153c <SystemClock_Config+0x100>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <SystemClock_Config+0x100>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ba:	2308      	movs	r3, #8
 80014bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014be:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014c8:	2307      	movs	r3, #7
 80014ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fa5f 	bl	8006994 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80014dc:	f000 fa94 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2105      	movs	r1, #5
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fcc0 	bl	8006e84 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800150a:	f000 fa7d 	bl	8001a08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800150e:	2301      	movs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001516:	2302      	movs	r3, #2
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fede 	bl	80072e0 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800152a:	f000 fa6d 	bl	8001a08 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3760      	adds	r7, #96	; 0x60
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <MX_I2C1_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2C1_Init+0x50>)
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_I2C1_Init+0x58>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_I2C1_Init+0x50>)
 800155e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001562:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2C1_Init+0x50>)
 800157e:	f003 fafb 	bl	8004b78 <HAL_I2C_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 fa3e 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20004e68 	.word	0x20004e68
 8001594:	40005400 	.word	0x40005400
 8001598:	00061a80 	.word	0x00061a80

0800159c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C3_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_I2C3_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C3_Init+0x50>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_I2C3_Init+0x58>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C3_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_I2C3_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_I2C3_Init+0x50>)
 80015ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_I2C3_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_I2C3_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_I2C3_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_I2C3_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_I2C3_Init+0x50>)
 80015da:	f003 facd 	bl	8004b78 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 fa10 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20004e14 	.word	0x20004e14
 80015f0:	40005c00 	.word	0x40005c00
 80015f4:	00061a80 	.word	0x00061a80

080015f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_I2S3_Init+0x54>)
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <MX_I2S3_Init+0x58>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2S3_Init+0x54>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_I2S3_Init+0x54>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2S3_Init+0x54>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <MX_I2S3_Init+0x54>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_I2S3_Init+0x54>)
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <MX_I2S3_Init+0x5c>)
 8001622:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2S3_Init+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_I2S3_Init+0x54>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2S3_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_I2S3_Init+0x54>)
 8001638:	f004 fd0c 	bl	8006054 <HAL_I2S_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001642:	f000 f9e1 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20004fd4 	.word	0x20004fd4
 8001650:	40003c00 	.word	0x40003c00
 8001654:	00017700 	.word	0x00017700

08001658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_SPI1_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <MX_SPI1_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_SPI1_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI1_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_SPI1_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_SPI1_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_SPI1_Init+0x64>)
 80016aa:	f005 ff59 	bl	8007560 <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b4:	f000 f9a8 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20004ef0 	.word	0x20004ef0
 80016c0:	40013000 	.word	0x40013000

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_TIM2_Init+0x98>)
 80016e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_TIM2_Init+0x98>)
 80016ea:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80016ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_TIM2_Init+0x98>)
 80016f8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_TIM2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_TIM2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <MX_TIM2_Init+0x98>)
 800170c:	f005 ffb1 	bl	8007672 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001716:	f000 f977 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_TIM2_Init+0x98>)
 8001728:	f006 f96a 	bl	8007a00 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001732:	f000 f969 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_TIM2_Init+0x98>)
 8001744:	f006 fb82 	bl	8007e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800174e:	f000 f95b 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20004f48 	.word	0x20004f48

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f006 fbe8 	bl	8007f6c <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f931 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004f90 	.word	0x20004f90
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <MX_GPIO_Init+0x200>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <MX_GPIO_Init+0x200>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <MX_GPIO_Init+0x200>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <MX_GPIO_Init+0x200>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a71      	ldr	r2, [pc, #452]	; (80019b4 <MX_GPIO_Init+0x200>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <MX_GPIO_Init+0x200>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <MX_GPIO_Init+0x200>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a63      	ldr	r2, [pc, #396]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <MX_GPIO_Init+0x200>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <MX_GPIO_Init+0x200>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <MX_GPIO_Init+0x200>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2108      	movs	r1, #8
 8001876:	4850      	ldr	r0, [pc, #320]	; (80019b8 <MX_GPIO_Init+0x204>)
 8001878:	f001 fc00 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f240 1101 	movw	r1, #257	; 0x101
 8001882:	484e      	ldr	r0, [pc, #312]	; (80019bc <MX_GPIO_Init+0x208>)
 8001884:	f001 fbfa 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RESET_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001888:	2200      	movs	r2, #0
 800188a:	f64f 0110 	movw	r1, #63504	; 0xf810
 800188e:	484c      	ldr	r0, [pc, #304]	; (80019c0 <MX_GPIO_Init+0x20c>)
 8001890:	f001 fbf4 	bl	800307c <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001894:	2308      	movs	r3, #8
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4843      	ldr	r0, [pc, #268]	; (80019b8 <MX_GPIO_Init+0x204>)
 80018ac:	f001 fa4a 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8;
 80018b0:	f240 1301 	movw	r3, #257	; 0x101
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	483c      	ldr	r0, [pc, #240]	; (80019bc <MX_GPIO_Init+0x208>)
 80018ca:	f001 fa3b 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018ce:	2308      	movs	r3, #8
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018de:	2305      	movs	r3, #5
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4834      	ldr	r0, [pc, #208]	; (80019bc <MX_GPIO_Init+0x208>)
 80018ea:	f001 fa2b 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <MX_GPIO_Init+0x210>)
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4831      	ldr	r0, [pc, #196]	; (80019c8 <MX_GPIO_Init+0x214>)
 8001902:	f001 fa1f 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001906:	2304      	movs	r3, #4
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	482c      	ldr	r0, [pc, #176]	; (80019cc <MX_GPIO_Init+0x218>)
 800191a:	f001 fa13 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001930:	2305      	movs	r3, #5
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4824      	ldr	r0, [pc, #144]	; (80019cc <MX_GPIO_Init+0x218>)
 800193c:	f001 fa02 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_RESET_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_RESET_Pin;
 8001940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194e:	2302      	movs	r3, #2
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BLUETOOTH_RESET_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4819      	ldr	r0, [pc, #100]	; (80019c0 <MX_GPIO_Init+0x20c>)
 800195a:	f001 f9f3 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800195e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001962:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4812      	ldr	r0, [pc, #72]	; (80019c0 <MX_GPIO_Init+0x20c>)
 8001978:	f001 f9e4 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800197c:	2320      	movs	r3, #32
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_GPIO_Init+0x20c>)
 8001990:	f001 f9d8 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001994:	2302      	movs	r3, #2
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_GPIO_Init+0x210>)
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_GPIO_Init+0x204>)
 80019a8:	f001 f9cc 	bl	8002d44 <HAL_GPIO_Init>

}
 80019ac:	bf00      	nop
 80019ae:	3730      	adds	r7, #48	; 0x30
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	10120000 	.word	0x10120000
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400

080019d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80019d8:	f00d f9a8 	bl	800ed2c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f00a fb49 	bl	800c074 <osDelay>
 80019e2:	e7fb      	b.n	80019dc <StartDefaultTask+0xc>

080019e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019f6:	f000 ffed 	bl	80029d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40001000 	.word	0x40001000

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>
	...

08001a14 <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af04      	add	r7, sp, #16
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	71bb      	strb	r3, [r7, #6]
 8001a22:	4613      	mov	r3, r2
 8001a24:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <PCA9685_SetBit+0x1c>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <PCA9685_SetBit+0xb0>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	230a      	movs	r3, #10
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	f107 030f 	add.w	r3, r7, #15
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	f003 fbd1 	bl	80051f0 <HAL_I2C_Mem_Read>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e031      	b.n	8001abc <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001a58:	79bb      	ldrb	r3, [r7, #6]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001a78:	797b      	ldrb	r3, [r7, #5]
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <PCA9685_SetBit+0xb0>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f107 030f 	add.w	r3, r7, #15
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	f003 faa6 	bl	8004ffc <HAL_I2C_Mem_Write>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000501c 	.word	0x2000501c

08001ac8 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001ace:	2306      	movs	r3, #6
 8001ad0:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <PCA9685_SoftwareReset+0x30>)
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	1dfa      	adds	r2, r7, #7
 8001ad8:	230a      	movs	r3, #10
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	2100      	movs	r1, #0
 8001ae0:	f003 f98e 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000501c 	.word	0x2000501c

08001afc <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ff81 	bl	8001a14 <PCA9685_SetBit>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2107      	movs	r1, #7
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ff71 	bl	8001a14 <PCA9685_SetBit>
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2105      	movs	r1, #5
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ff61 	bl	8001a14 <PCA9685_SetBit>
 8001b52:	4603      	mov	r3, r0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	0000      	movs	r0, r0
	...

08001b60 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d902      	bls.n	8001b7a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001b74:	2303      	movs	r3, #3
 8001b76:	72fb      	strb	r3, [r7, #11]
 8001b78:	e046      	b.n	8001c08 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	d802      	bhi.n	8001b86 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001b80:	23ff      	movs	r3, #255	; 0xff
 8001b82:	72fb      	strb	r3, [r7, #11]
 8001b84:	e040      	b.n	8001c08 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b90:	ee17 0a90 	vmov	r0, s15
 8001b94:	f7fe fc88 	bl	80004a8 <__aeabi_f2d>
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <PCA9685_SetPwmFrequency+0xe8>)
 8001b9e:	f7fe fcdb 	bl	8000558 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	a126      	add	r1, pc, #152	; (adr r1, 8001c40 <PCA9685_SetPwmFrequency+0xe0>)
 8001ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bac:	f7fe fdfe 	bl	80007ac <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <PCA9685_SetPwmFrequency+0xec>)
 8001bbe:	f7fe fb13 	bl	80001e8 <__aeabi_dsub>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ff7f 	bl	8000acc <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7fe fc68 	bl	80004a8 <__aeabi_f2d>
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <PCA9685_SetPwmFrequency+0xf0>)
 8001bde:	f7fe fb05 	bl	80001ec <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	ec43 2b17 	vmov	d7, r2, r3
 8001bea:	eeb0 0a47 	vmov.f32	s0, s14
 8001bee:	eef0 0a67 	vmov.f32	s1, s15
 8001bf2:	f00d fcb5 	bl	800f560 <floor>
 8001bf6:	ec53 2b10 	vmov	r2, r3, d0
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe ff45 	bl	8000a8c <__aeabi_d2uiz>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff ff77 	bl	8001afc <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <PCA9685_SetPwmFrequency+0xf4>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	230a      	movs	r3, #10
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	f107 030b 	add.w	r3, r7, #11
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	22fe      	movs	r2, #254	; 0xfe
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	f003 f9e9 	bl	8004ffc <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff ff66 	bl	8001afc <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ff73 	bl	8001b1c <PCA9685_RestartMode>
	return PCA9685_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	00000000 	.word	0x00000000
 8001c44:	4177d784 	.word	0x4177d784
 8001c48:	40b00000 	.word	0x40b00000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	3fe00000 	.word	0x3fe00000
 8001c54:	2000501c 	.word	0x2000501c

08001c58 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	460b      	mov	r3, r1
 8001c64:	80bb      	strh	r3, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3306      	adds	r3, #6
 8001c72:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001c7a:	88bb      	ldrh	r3, [r7, #4]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <PCA9685_SetPwm+0x70>)
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2301      	movs	r3, #1
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	f003 f9a5 	bl	8004ffc <HAL_I2C_Mem_Write>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000501c 	.word	0x2000501c

08001ccc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	80bb      	strh	r3, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001cde:	88bb      	ldrh	r3, [r7, #4]
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce4:	d302      	bcc.n	8001cec <PCA9685_SetPin+0x20>
 8001ce6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001cea:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d025      	beq.n	8001d3e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffa9 	bl	8001c58 <PCA9685_SetPwm>
 8001d06:	4603      	mov	r3, r0
 8001d08:	e03a      	b.n	8001d80 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff9b 	bl	8001c58 <PCA9685_SetPwm>
 8001d22:	4603      	mov	r3, r0
 8001d24:	e02c      	b.n	8001d80 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001d26:	88bb      	ldrh	r3, [r7, #4]
 8001d28:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001d2c:	330f      	adds	r3, #15
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff8f 	bl	8001c58 <PCA9685_SetPwm>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	e020      	b.n	8001d80 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001d3e:	88bb      	ldrh	r3, [r7, #4]
 8001d40:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d108      	bne.n	8001d5a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff81 	bl	8001c58 <PCA9685_SetPwm>
 8001d56:	4603      	mov	r3, r0
 8001d58:	e012      	b.n	8001d80 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d108      	bne.n	8001d72 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff75 	bl	8001c58 <PCA9685_SetPwm>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	e006      	b.n	8001d80 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001d72:	88ba      	ldrh	r2, [r7, #4]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff6d 	bl	8001c58 <PCA9685_SetPwm>
 8001d7e:	4603      	mov	r3, r0
    }
  }
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	ed87 0a00 	vstr	s0, [r7]
 8001d94:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001d96:	edd7 7a00 	vldr	s15, [r7]
 8001d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d502      	bpl.n	8001daa <PCA9685_SetServoAngle+0x22>
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001daa:	edd7 7a00 	vldr	s15, [r7]
 8001dae:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001e30 <PCA9685_SetServoAngle+0xa8>
 8001db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dd01      	ble.n	8001dc0 <PCA9685_SetServoAngle+0x38>
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <PCA9685_SetServoAngle+0xac>)
 8001dbe:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f7fe fb71 	bl	80004a8 <__aeabi_f2d>
 8001dc6:	a318      	add	r3, pc, #96	; (adr r3, 8001e28 <PCA9685_SetServoAngle+0xa0>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fbc4 	bl	8000558 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <PCA9685_SetServoAngle+0xb0>)
 8001dde:	f7fe fce5 	bl	80007ac <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <PCA9685_SetServoAngle+0xb4>)
 8001df0:	f7fe f9fc 	bl	80001ec <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fe66 	bl	8000acc <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0c:	ee17 3a90 	vmov	r3, s15
 8001e10:	b299      	uxth	r1, r3
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff58 	bl	8001ccc <PCA9685_SetPin>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	407c2000 	.word	0x407c2000
 8001e30:	43340000 	.word	0x43340000
 8001e34:	43340000 	.word	0x43340000
 8001e38:	40668000 	.word	0x40668000
 8001e3c:	405f4000 	.word	0x405f4000

08001e40 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <PCA9685_Init+0x28>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001e4e:	f7ff fe3b 	bl	8001ac8 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001e52:	2030      	movs	r0, #48	; 0x30
 8001e54:	f7ff fe84 	bl	8001b60 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff fe6f 	bl	8001b3c <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000501c 	.word	0x2000501c

08001e6c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60ba      	str	r2, [r7, #8]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4603      	mov	r3, r0
 8001e78:	81fb      	strh	r3, [r7, #14]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	81bb      	strh	r3, [r7, #12]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e86:	3307      	adds	r3, #7
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <SSD1306_DrawBitmap+0x22>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	82bb      	strh	r3, [r7, #20]
 8001e9a:	e044      	b.n	8001f26 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	827b      	strh	r3, [r7, #18]
 8001ea0:	e02f      	b.n	8001f02 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001ea2:	8a7b      	ldrh	r3, [r7, #18]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	e012      	b.n	8001eda <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001eb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001eb8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001ebc:	fb02 f203 	mul.w	r2, r2, r3
 8001ec0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da00      	bge.n	8001eca <SSD1306_DrawBitmap+0x5e>
 8001ec8:	3307      	adds	r3, #7
 8001eca:	10db      	asrs	r3, r3, #3
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da09      	bge.n	8001ef6 <SSD1306_DrawBitmap+0x8a>
 8001ee2:	89fa      	ldrh	r2, [r7, #14]
 8001ee4:	8a7b      	ldrh	r3, [r7, #18]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	89b9      	ldrh	r1, [r7, #12]
 8001eec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f92d 	bl	8002150 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001ef6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	827b      	strh	r3, [r7, #18]
 8001f02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbc9      	blt.n	8001ea2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001f0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	82bb      	strh	r3, [r7, #20]
 8001f1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	81bb      	strh	r3, [r7, #12]
 8001f26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbb4      	blt.n	8001e9c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f42:	f000 f96f 	bl	8002224 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f46:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	485b      	ldr	r0, [pc, #364]	; (80020bc <SSD1306_Init+0x180>)
 8001f50:	f003 fb74 	bl	800563c <HAL_I2C_IsDeviceReady>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e0a9      	b.n	80020b2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001f5e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f64:	e002      	b.n	8001f6c <SSD1306_Init+0x30>
		p--;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f9      	bne.n	8001f66 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f72:	22ae      	movs	r2, #174	; 0xae
 8001f74:	2100      	movs	r1, #0
 8001f76:	2078      	movs	r0, #120	; 0x78
 8001f78:	f000 f9b2 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 f9ad 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f86:	2210      	movs	r2, #16
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 f9a8 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f90:	22b0      	movs	r2, #176	; 0xb0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 f9a3 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f9a:	22c8      	movs	r2, #200	; 0xc8
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 f99e 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f000 f999 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001fae:	2210      	movs	r2, #16
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	f000 f994 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 f98f 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001fc2:	2281      	movs	r2, #129	; 0x81
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2078      	movs	r0, #120	; 0x78
 8001fc8:	f000 f98a 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001fcc:	22ff      	movs	r2, #255	; 0xff
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2078      	movs	r0, #120	; 0x78
 8001fd2:	f000 f985 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001fd6:	22a1      	movs	r2, #161	; 0xa1
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	; 0x78
 8001fdc:	f000 f980 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fe0:	22a6      	movs	r2, #166	; 0xa6
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	; 0x78
 8001fe6:	f000 f97b 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001fea:	22a8      	movs	r2, #168	; 0xa8
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 f976 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ff4:	223f      	movs	r2, #63	; 0x3f
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2078      	movs	r0, #120	; 0x78
 8001ffa:	f000 f971 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ffe:	22a4      	movs	r2, #164	; 0xa4
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f000 f96c 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002008:	22d3      	movs	r2, #211	; 0xd3
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	; 0x78
 800200e:	f000 f967 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f000 f962 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800201c:	22d5      	movs	r2, #213	; 0xd5
 800201e:	2100      	movs	r1, #0
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	f000 f95d 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002026:	22f0      	movs	r2, #240	; 0xf0
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 f958 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002030:	22d9      	movs	r2, #217	; 0xd9
 8002032:	2100      	movs	r1, #0
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 f953 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800203a:	2222      	movs	r2, #34	; 0x22
 800203c:	2100      	movs	r1, #0
 800203e:	2078      	movs	r0, #120	; 0x78
 8002040:	f000 f94e 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002044:	22da      	movs	r2, #218	; 0xda
 8002046:	2100      	movs	r1, #0
 8002048:	2078      	movs	r0, #120	; 0x78
 800204a:	f000 f949 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800204e:	2212      	movs	r2, #18
 8002050:	2100      	movs	r1, #0
 8002052:	2078      	movs	r0, #120	; 0x78
 8002054:	f000 f944 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002058:	22db      	movs	r2, #219	; 0xdb
 800205a:	2100      	movs	r1, #0
 800205c:	2078      	movs	r0, #120	; 0x78
 800205e:	f000 f93f 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002062:	2220      	movs	r2, #32
 8002064:	2100      	movs	r1, #0
 8002066:	2078      	movs	r0, #120	; 0x78
 8002068:	f000 f93a 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800206c:	228d      	movs	r2, #141	; 0x8d
 800206e:	2100      	movs	r1, #0
 8002070:	2078      	movs	r0, #120	; 0x78
 8002072:	f000 f935 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002076:	2214      	movs	r2, #20
 8002078:	2100      	movs	r1, #0
 800207a:	2078      	movs	r0, #120	; 0x78
 800207c:	f000 f930 	bl	80022e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002080:	22af      	movs	r2, #175	; 0xaf
 8002082:	2100      	movs	r1, #0
 8002084:	2078      	movs	r0, #120	; 0x78
 8002086:	f000 f92b 	bl	80022e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800208a:	222e      	movs	r2, #46	; 0x2e
 800208c:	2100      	movs	r1, #0
 800208e:	2078      	movs	r0, #120	; 0x78
 8002090:	f000 f926 	bl	80022e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002094:	2000      	movs	r0, #0
 8002096:	f000 f843 	bl	8002120 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800209a:	f000 f813 	bl	80020c4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <SSD1306_Init+0x184>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <SSD1306_Init+0x184>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SSD1306_Init+0x184>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20004e68 	.word	0x20004e68
 80020c0:	200004b4 	.word	0x200004b4

080020c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	e01d      	b.n	800210c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	3b50      	subs	r3, #80	; 0x50
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 f900 	bl	80022e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 f8fb 	bl	80022e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020ea:	2210      	movs	r2, #16
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 f8f6 	bl	80022e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	01db      	lsls	r3, r3, #7
 80020f8:	4a08      	ldr	r2, [pc, #32]	; (800211c <SSD1306_UpdateScreen+0x58>)
 80020fa:	441a      	add	r2, r3
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	2140      	movs	r1, #64	; 0x40
 8002100:	2078      	movs	r0, #120	; 0x78
 8002102:	f000 f8a5 	bl	8002250 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	3301      	adds	r3, #1
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b07      	cmp	r3, #7
 8002110:	d9de      	bls.n	80020d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200000b4 	.word	0x200000b4

08002120 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <SSD1306_Fill+0x14>
 8002130:	2300      	movs	r3, #0
 8002132:	e000      	b.n	8002136 <SSD1306_Fill+0x16>
 8002134:	23ff      	movs	r3, #255	; 0xff
 8002136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213a:	4619      	mov	r1, r3
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <SSD1306_Fill+0x2c>)
 800213e:	f00d f93f 	bl	800f3c0 <memset>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200000b4 	.word	0x200000b4

08002150 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
 800215a:	460b      	mov	r3, r1
 800215c:	80bb      	strh	r3, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	70fb      	strb	r3, [r7, #3]
	if (
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	2b7f      	cmp	r3, #127	; 0x7f
 8002166:	d848      	bhi.n	80021fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	2b3f      	cmp	r3, #63	; 0x3f
 800216c:	d845      	bhi.n	80021fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <SSD1306_DrawPixel+0xb8>)
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d11a      	bne.n	80021c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800218a:	88fa      	ldrh	r2, [r7, #6]
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	b298      	uxth	r0, r3
 8002192:	4603      	mov	r3, r0
 8002194:	01db      	lsls	r3, r3, #7
 8002196:	4413      	add	r3, r2
 8002198:	4a1c      	ldr	r2, [pc, #112]	; (800220c <SSD1306_DrawPixel+0xbc>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	b25a      	sxtb	r2, r3
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b259      	sxtb	r1, r3
 80021b0:	88fa      	ldrh	r2, [r7, #6]
 80021b2:	4603      	mov	r3, r0
 80021b4:	01db      	lsls	r3, r3, #7
 80021b6:	4413      	add	r3, r2
 80021b8:	b2c9      	uxtb	r1, r1
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <SSD1306_DrawPixel+0xbc>)
 80021bc:	54d1      	strb	r1, [r2, r3]
 80021be:	e01d      	b.n	80021fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	b298      	uxth	r0, r3
 80021c8:	4603      	mov	r3, r0
 80021ca:	01db      	lsls	r3, r3, #7
 80021cc:	4413      	add	r3, r2
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <SSD1306_DrawPixel+0xbc>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	88bb      	ldrh	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	4013      	ands	r3, r2
 80021e8:	b259      	sxtb	r1, r3
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	4603      	mov	r3, r0
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	4413      	add	r3, r2
 80021f2:	b2c9      	uxtb	r1, r1
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <SSD1306_DrawPixel+0xbc>)
 80021f6:	54d1      	strb	r1, [r2, r3]
 80021f8:	e000      	b.n	80021fc <SSD1306_DrawPixel+0xac>
		return;
 80021fa:	bf00      	nop
	}
}
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200004b4 	.word	0x200004b4
 800220c:	200000b4 	.word	0x200000b4

08002210 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff ff83 	bl	8002120 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800221a:	f7ff ff53 	bl	80020c4 <SSD1306_UpdateScreen>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <ssd1306_I2C_Init+0x28>)
 800222c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800222e:	e002      	b.n	8002236 <ssd1306_I2C_Init+0x12>
		p--;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f9      	bne.n	8002230 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	0003d090 	.word	0x0003d090

08002250 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b0c7      	sub	sp, #284	; 0x11c
 8002254:	af02      	add	r7, sp, #8
 8002256:	4604      	mov	r4, r0
 8002258:	4608      	mov	r0, r1
 800225a:	4639      	mov	r1, r7
 800225c:	600a      	str	r2, [r1, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	4622      	mov	r2, r4
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	1dbb      	adds	r3, r7, #6
 8002268:	4602      	mov	r2, r0
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	460a      	mov	r2, r1
 8002270:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	1dba      	adds	r2, r7, #6
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002282:	e010      	b.n	80022a6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002284:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002288:	463a      	mov	r2, r7
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	441a      	add	r2, r3
 800228e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002292:	3301      	adds	r3, #1
 8002294:	7811      	ldrb	r1, [r2, #0]
 8002296:	f107 020c 	add.w	r2, r7, #12
 800229a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800229c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022a0:	3301      	adds	r3, #1
 80022a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	1d3a      	adds	r2, r7, #4
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8e7      	bhi.n	8002284 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b299      	uxth	r1, r3
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	200a      	movs	r0, #10
 80022c8:	9000      	str	r0, [sp, #0]
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <ssd1306_I2C_WriteMulti+0x8c>)
 80022cc:	f002 fd98 	bl	8004e00 <HAL_I2C_Master_Transmit>
}
 80022d0:	bf00      	nop
 80022d2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	20004e68 	.word	0x20004e68

080022e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	460b      	mov	r3, r1
 80022ec:	71bb      	strb	r3, [r7, #6]
 80022ee:	4613      	mov	r3, r2
 80022f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022f2:	79bb      	ldrb	r3, [r7, #6]
 80022f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022f6:	797b      	ldrb	r3, [r7, #5]
 80022f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	b299      	uxth	r1, r3
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	230a      	movs	r3, #10
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2302      	movs	r3, #2
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <ssd1306_I2C_Write+0x38>)
 800230a:	f002 fd79 	bl	8004e00 <HAL_I2C_Master_Transmit>
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20004e68 	.word	0x20004e68

0800231c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_MspInit+0x64>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <HAL_MspInit+0x64>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_MspInit+0x64>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_MspInit+0x64>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_MspInit+0x64>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_MspInit+0x64>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	210f      	movs	r1, #15
 800235e:	f06f 0001 	mvn.w	r0, #1
 8002362:	f000 fc33 	bl	8002bcc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2105      	movs	r1, #5
 800236a:	2005      	movs	r0, #5
 800236c:	f000 fc2e 	bl	8002bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002370:	2005      	movs	r0, #5
 8002372:	f000 fc47 	bl	8002c04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a42      	ldr	r2, [pc, #264]	; (80024ac <HAL_I2C_MspInit+0x128>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d12c      	bne.n	8002400 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80023c2:	23c0      	movs	r3, #192	; 0xc0
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c6:	2312      	movs	r3, #18
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d2:	2304      	movs	r3, #4
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	4835      	ldr	r0, [pc, #212]	; (80024b4 <HAL_I2C_MspInit+0x130>)
 80023de:	f000 fcb1 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a31      	ldr	r2, [pc, #196]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 80023ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023fe:	e050      	b.n	80024a2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <HAL_I2C_MspInit+0x134>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d14b      	bne.n	80024a2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002448:	2312      	movs	r3, #18
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002454:	2304      	movs	r3, #4
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	4619      	mov	r1, r3
 800245e:	4817      	ldr	r0, [pc, #92]	; (80024bc <HAL_I2C_MspInit+0x138>)
 8002460:	f000 fc70 	bl	8002d44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002476:	2304      	movs	r3, #4
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	480f      	ldr	r0, [pc, #60]	; (80024c0 <HAL_I2C_MspInit+0x13c>)
 8002482:	f000 fc5f 	bl	8002d44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 8002490:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_I2C_MspInit+0x12c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40005400 	.word	0x40005400
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40005c00 	.word	0x40005c00
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_I2S_MspInit+0xc0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d14a      	bne.n	800257c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 80024f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_I2S_MspInit+0xc4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800253a:	2310      	movs	r3, #16
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800254a:	2306      	movs	r3, #6
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <HAL_I2S_MspInit+0xc8>)
 8002556:	f000 fbf5 	bl	8002d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800255a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800255e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800256c:	2306      	movs	r3, #6
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4806      	ldr	r0, [pc, #24]	; (8002590 <HAL_I2S_MspInit+0xcc>)
 8002578:	f000 fbe4 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800257c:	bf00      	nop
 800257e:	3728      	adds	r7, #40	; 0x28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40003c00 	.word	0x40003c00
 8002588:	40023800 	.word	0x40023800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020800 	.word	0x40020800

08002594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_SPI_MspInit+0x84>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12b      	bne.n	800260e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80025ee:	23e0      	movs	r3, #224	; 0xe0
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fe:	2305      	movs	r3, #5
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 800260a:	f000 fb9b 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40013000 	.word	0x40013000
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d115      	bne.n	8002662 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_TIM_Base_MspInit+0x48>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_TIM_Base_MspInit+0x48>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_TIM_Base_MspInit+0x48>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2105      	movs	r1, #5
 8002656:	201c      	movs	r0, #28
 8002658:	f000 fab8 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800265c:	201c      	movs	r0, #28
 800265e:	f000 fad1 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_UART_MspInit+0x94>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d133      	bne.n	80026fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_UART_MspInit+0x98>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_UART_MspInit+0x98>)
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_UART_MspInit+0x98>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_UART_MspInit+0x98>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_UART_MspInit+0x98>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_UART_MspInit+0x98>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ca:	230c      	movs	r3, #12
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026da:	2307      	movs	r3, #7
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4809      	ldr	r0, [pc, #36]	; (800270c <HAL_UART_MspInit+0x9c>)
 80026e6:	f000 fb2d 	bl	8002d44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	2026      	movs	r0, #38	; 0x26
 80026f0:	f000 fa6c 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026f4:	2026      	movs	r0, #38	; 0x26
 80026f6:	f000 fa85 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026fa:	bf00      	nop
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40004400 	.word	0x40004400
 8002708:	40023800 	.word	0x40023800
 800270c:	40020000 	.word	0x40020000

08002710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2036      	movs	r0, #54	; 0x36
 8002726:	f000 fa51 	bl	8002bcc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800272a:	2036      	movs	r0, #54	; 0x36
 800272c:	f000 fa6a 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_InitTick+0xa4>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_InitTick+0xa4>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_InitTick+0xa4>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fd90 	bl	800727c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800275c:	f004 fd66 	bl	800722c <HAL_RCC_GetPCLK1Freq>
 8002760:	4603      	mov	r3, r0
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_InitTick+0xa8>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	3b01      	subs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_InitTick+0xac>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_InitTick+0xb0>)
 8002778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_InitTick+0xac>)
 800277c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_InitTick+0xac>)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_InitTick+0xac>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_InitTick+0xac>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_InitTick+0xac>)
 8002796:	f004 ff6c 	bl	8007672 <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027a0:	4806      	ldr	r0, [pc, #24]	; (80027bc <HAL_InitTick+0xac>)
 80027a2:	f004 ffb5 	bl	8007710 <HAL_TIM_Base_Start_IT>
 80027a6:	4603      	mov	r3, r0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3730      	adds	r7, #48	; 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	20005020 	.word	0x20005020
 80027c0:	40001000 	.word	0x40001000

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <NMI_Handler+0x4>

080027ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler+0x4>

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <MemManage_Handler+0x4>

080027d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <TIM2_IRQHandler+0x30>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <TIM2_IRQHandler+0x18>
			timer_count++;
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <TIM2_IRQHandler+0x34>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <TIM2_IRQHandler+0x34>)
 8002816:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <TIM2_IRQHandler+0x34>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d901      	bls.n	8002824 <TIM2_IRQHandler+0x24>
		Message_handler();
 8002820:	f7fe fb52 	bl	8000ec8 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <TIM2_IRQHandler+0x38>)
 8002826:	f004 ffe3 	bl	80077f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20004ddc 	.word	0x20004ddc
 8002834:	200000b0 	.word	0x200000b0
 8002838:	20004f48 	.word	0x20004f48

0800283c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <USART2_IRQHandler+0x3c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	b2d1      	uxtb	r1, r2
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <USART2_IRQHandler+0x3c>)
 800284a:	7011      	strb	r1, [r2, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <USART2_IRQHandler+0x40>)
 8002850:	18d1      	adds	r1, r2, r3
 8002852:	230a      	movs	r3, #10
 8002854:	2201      	movs	r2, #1
 8002856:	480a      	ldr	r0, [pc, #40]	; (8002880 <USART2_IRQHandler+0x44>)
 8002858:	f005 fc67 	bl	800812a <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <USART2_IRQHandler+0x3c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	3b01      	subs	r3, #1
 8002862:	4a06      	ldr	r2, [pc, #24]	; (800287c <USART2_IRQHandler+0x40>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d101      	bne.n	800286e <USART2_IRQHandler+0x32>
		Message_handler();
 800286a:	f7fe fb2d 	bl	8000ec8 <Message_handler>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800286e:	4804      	ldr	r0, [pc, #16]	; (8002880 <USART2_IRQHandler+0x44>)
 8002870:	f005 fcfe 	bl	8008270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200000b1 	.word	0x200000b1
 800287c:	20004ddc 	.word	0x20004ddc
 8002880:	20004f90 	.word	0x20004f90

08002884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <TIM6_DAC_IRQHandler+0x10>)
 800288a:	f004 ffb1 	bl	80077f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20005020 	.word	0x20005020

08002898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <OTG_FS_IRQHandler+0x10>)
 800289e:	f000 fe71 	bl	8003584 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200054b4 	.word	0x200054b4

080028ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <_sbrk+0x5c>)
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <_sbrk+0x60>)
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <_sbrk+0x64>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <_sbrk+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d207      	bcs.n	80028ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028dc:	f00c fd28 	bl	800f330 <__errno>
 80028e0:	4603      	mov	r3, r0
 80028e2:	220c      	movs	r2, #12
 80028e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ea:	e009      	b.n	8002900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <_sbrk+0x64>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <_sbrk+0x64>)
 80028fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20020000 	.word	0x20020000
 800290c:	00000400 	.word	0x00000400
 8002910:	200004bc 	.word	0x200004bc
 8002914:	200057c8 	.word	0x200057c8

08002918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <SystemInit+0x20>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <SystemInit+0x20>)
 8002924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002966:	f7ff ffd7 	bl	8002918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f00c fce7 	bl	800f33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296e:	f7fe fd17 	bl	80013a0 <main>
  bx  lr    
 8002972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002980:	08010f58 	.word	0x08010f58
  ldr r2, =_sbss
 8002984:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002988:	200057c8 	.word	0x200057c8

0800298c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC_IRQHandler>
	...

08002990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_Init+0x40>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_Init+0x40>)
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_Init+0x40>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_Init+0x40>)
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_Init+0x40>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b8:	2003      	movs	r0, #3
 80029ba:	f000 f8fc 	bl	8002bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7ff fea6 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c4:	f7ff fcaa 	bl	800231c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_IncTick+0x20>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x24>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_IncTick+0x24>)
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000008 	.word	0x20000008
 80029f8:	20005068 	.word	0x20005068

080029fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_GetTick+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20005068 	.word	0x20005068

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff ffee 	bl	80029fc <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_Delay+0x44>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000008 	.word	0x20000008

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	; (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	; (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ff4c 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bde:	f7ff ff61 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f7ff ffb1 	bl	8002b50 <NVIC_EncodePriority>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff80 	bl	8002afc <__NVIC_SetPriority>
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff54 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7ff fee5 	bl	80029fc <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d008      	beq.n	8002c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e052      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_Abort+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca2:	e013      	b.n	8002ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca4:	f7ff feaa 	bl	80029fc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d90c      	bls.n	8002ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e015      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e4      	bne.n	8002ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00c      	b.n	8002d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2205      	movs	r2, #5
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e16b      	b.n	8003038 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 815a 	bne.w	8003032 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d005      	beq.n	8002d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d130      	bne.n	8002df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0201 	and.w	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d017      	beq.n	8002e34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d123      	bne.n	8002e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0203 	and.w	r2, r3, #3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80b4 	beq.w	8003032 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <HAL_GPIO_Init+0x30c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a5f      	ldr	r2, [pc, #380]	; (8003050 <HAL_GPIO_Init+0x30c>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_GPIO_Init+0x30c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	; (8003054 <HAL_GPIO_Init+0x310>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_GPIO_Init+0x314>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02b      	beq.n	8002f6a <HAL_GPIO_Init+0x226>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a51      	ldr	r2, [pc, #324]	; (800305c <HAL_GPIO_Init+0x318>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d025      	beq.n	8002f66 <HAL_GPIO_Init+0x222>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_GPIO_Init+0x31c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01f      	beq.n	8002f62 <HAL_GPIO_Init+0x21e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4f      	ldr	r2, [pc, #316]	; (8003064 <HAL_GPIO_Init+0x320>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d019      	beq.n	8002f5e <HAL_GPIO_Init+0x21a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_GPIO_Init+0x216>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4d      	ldr	r2, [pc, #308]	; (800306c <HAL_GPIO_Init+0x328>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00d      	beq.n	8002f56 <HAL_GPIO_Init+0x212>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4c      	ldr	r2, [pc, #304]	; (8003070 <HAL_GPIO_Init+0x32c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d007      	beq.n	8002f52 <HAL_GPIO_Init+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_GPIO_Init+0x330>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_GPIO_Init+0x20a>
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	e00e      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f52:	2306      	movs	r3, #6
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x228>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	; (8003054 <HAL_GPIO_Init+0x310>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fae:	4a32      	ldr	r2, [pc, #200]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_GPIO_Init+0x334>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_GPIO_Init+0x334>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_GPIO_Init+0x334>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f ae90 	bls.w	8002d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40013800 	.word	0x40013800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40021400 	.word	0x40021400
 8003070:	40021800 	.word	0x40021800
 8003074:	40021c00 	.word	0x40021c00
 8003078:	40013c00 	.word	0x40013c00

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b0:	b08f      	sub	sp, #60	; 0x3c
 80030b2:	af0a      	add	r7, sp, #40	; 0x28
 80030b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e054      	b.n	800316a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f00b fe7a 	bl	800edd4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 fe50 	bl	8008da4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	687e      	ldr	r6, [r7, #4]
 800310c:	466d      	mov	r5, sp
 800310e:	f106 0410 	add.w	r4, r6, #16
 8003112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003122:	1d33      	adds	r3, r6, #4
 8003124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f005 fdca 	bl	8008cc0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f005 fe47 	bl	8008dc6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	687e      	ldr	r6, [r7, #4]
 8003140:	466d      	mov	r5, sp
 8003142:	f106 0410 	add.w	r4, r6, #16
 8003146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003152:	e885 0003 	stmia.w	r5, {r0, r1}
 8003156:	1d33      	adds	r3, r6, #4
 8003158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f005 ff5a 	bl	8009014 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003172 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003172:	b590      	push	{r4, r7, lr}
 8003174:	b089      	sub	sp, #36	; 0x24
 8003176:	af04      	add	r7, sp, #16
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	461a      	mov	r2, r3
 8003180:	4603      	mov	r3, r0
 8003182:	70fb      	strb	r3, [r7, #3]
 8003184:	460b      	mov	r3, r1
 8003186:	70bb      	strb	r3, [r7, #2]
 8003188:	4613      	mov	r3, r2
 800318a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_HCD_HC_Init+0x28>
 8003196:	2302      	movs	r3, #2
 8003198:	e076      	b.n	8003288 <HAL_HCD_HC_Init+0x116>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	333d      	adds	r3, #61	; 0x3d
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3338      	adds	r3, #56	; 0x38
 80031c2:	787a      	ldrb	r2, [r7, #1]
 80031c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3340      	adds	r3, #64	; 0x40
 80031d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031d6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3339      	adds	r3, #57	; 0x39
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	333f      	adds	r3, #63	; 0x3f
 80031f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	78ba      	ldrb	r2, [r7, #2]
 8003202:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003206:	b2d0      	uxtb	r0, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	333a      	adds	r3, #58	; 0x3a
 8003214:	4602      	mov	r2, r0
 8003216:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da09      	bge.n	8003234 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	333b      	adds	r3, #59	; 0x3b
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e008      	b.n	8003246 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	333b      	adds	r3, #59	; 0x3b
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	333c      	adds	r3, #60	; 0x3c
 8003254:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003258:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	787c      	ldrb	r4, [r7, #1]
 8003260:	78ba      	ldrb	r2, [r7, #2]
 8003262:	78f9      	ldrb	r1, [r7, #3]
 8003264:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4623      	mov	r3, r4
 8003276:	f006 f84f 	bl	8009318 <USB_HC_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_HCD_HC_Halt+0x1e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e00f      	b.n	80032ce <HAL_HCD_HC_Halt+0x3e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f006 fa8b 	bl	80097da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	70fb      	strb	r3, [r7, #3]
 80032ea:	460b      	mov	r3, r1
 80032ec:	70bb      	strb	r3, [r7, #2]
 80032ee:	4613      	mov	r3, r2
 80032f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333b      	adds	r3, #59	; 0x3b
 8003300:	78ba      	ldrb	r2, [r7, #2]
 8003302:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	333f      	adds	r3, #63	; 0x3f
 8003312:	787a      	ldrb	r2, [r7, #1]
 8003314:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003316:	7c3b      	ldrb	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d112      	bne.n	8003342 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3342      	adds	r3, #66	; 0x42
 800332a:	2203      	movs	r2, #3
 800332c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	333d      	adds	r3, #61	; 0x3d
 800333c:	7f3a      	ldrb	r2, [r7, #28]
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e008      	b.n	8003354 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3342      	adds	r3, #66	; 0x42
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b03      	cmp	r3, #3
 8003358:	f200 80c6 	bhi.w	80034e8 <HAL_HCD_HC_SubmitRequest+0x210>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003375 	.word	0x08003375
 8003368:	080034d5 	.word	0x080034d5
 800336c:	080033d9 	.word	0x080033d9
 8003370:	08003457 	.word	0x08003457
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003374:	7c3b      	ldrb	r3, [r7, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 80b8 	bne.w	80034ec <HAL_HCD_HC_SubmitRequest+0x214>
 800337c:	78bb      	ldrb	r3, [r7, #2]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 80b4 	bne.w	80034ec <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003384:	8b3b      	ldrh	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	3355      	adds	r3, #85	; 0x55
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3355      	adds	r3, #85	; 0x55
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3342      	adds	r3, #66	; 0x42
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033c2:	e093      	b.n	80034ec <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	3342      	adds	r3, #66	; 0x42
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
      break;
 80033d6:	e089      	b.n	80034ec <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80033d8:	78bb      	ldrb	r3, [r7, #2]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11d      	bne.n	800341a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3355      	adds	r3, #85	; 0x55
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3342      	adds	r3, #66	; 0x42
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003404:	e073      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3342      	adds	r3, #66	; 0x42
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
      break;
 8003418:	e069      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3354      	adds	r3, #84	; 0x54
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3342      	adds	r3, #66	; 0x42
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
      break;
 8003440:	e055      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3342      	adds	r3, #66	; 0x42
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
      break;
 8003454:	e04b      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003456:	78bb      	ldrb	r3, [r7, #2]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11d      	bne.n	8003498 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3355      	adds	r3, #85	; 0x55
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3342      	adds	r3, #66	; 0x42
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003482:	e034      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3342      	adds	r3, #66	; 0x42
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
      break;
 8003496:	e02a      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3354      	adds	r3, #84	; 0x54
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3342      	adds	r3, #66	; 0x42
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
      break;
 80034be:	e016      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3342      	adds	r3, #66	; 0x42
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
      break;
 80034d2:	e00c      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3342      	adds	r3, #66	; 0x42
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
      break;
 80034e6:	e002      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80034ec:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3344      	adds	r3, #68	; 0x44
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	8b3a      	ldrh	r2, [r7, #24]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	202c      	movs	r0, #44	; 0x2c
 8003508:	fb00 f303 	mul.w	r3, r0, r3
 800350c:	440b      	add	r3, r1
 800350e:	334c      	adds	r3, #76	; 0x4c
 8003510:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	3360      	adds	r3, #96	; 0x60
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3350      	adds	r3, #80	; 0x50
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3339      	adds	r3, #57	; 0x39
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3361      	adds	r3, #97	; 0x61
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	222c      	movs	r2, #44	; 0x2c
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	3338      	adds	r3, #56	; 0x38
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	18d1      	adds	r1, r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	f005 ffde 	bl	8009534 <USB_HC_StartXfer>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop

08003584 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f005 fcf7 	bl	8008f8e <USB_GetMode>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 80ef 	bne.w	8003786 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f005 fcdb 	bl	8008f68 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80e5 	beq.w	8003784 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f005 fcd2 	bl	8008f68 <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ce:	d104      	bne.n	80035da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f005 fcc2 	bl	8008f68 <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ee:	d104      	bne.n	80035fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f005 fcb2 	bl	8008f68 <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800360a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360e:	d104      	bne.n	800361a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003618:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f005 fca2 	bl	8008f68 <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d103      	bne.n	8003636 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2202      	movs	r2, #2
 8003634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f005 fc94 	bl	8008f68 <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364a:	d115      	bne.n	8003678 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003654:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f00b fc32 	bl	800eed0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f005 fd8a 	bl	800918c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f005 fc73 	bl	8008f68 <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800368c:	d102      	bne.n	8003694 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 f9ff 	bl	8004a92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f005 fc65 	bl	8008f68 <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d106      	bne.n	80036b6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f00b fbf5 	bl	800ee98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2208      	movs	r2, #8
 80036b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 fc54 	bl	8008f68 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d101      	bne.n	80036ce <HAL_HCD_IRQHandler+0x14a>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_HCD_IRQHandler+0x14c>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0210 	bic.w	r2, r2, #16
 80036e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f001 f902 	bl	80048ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0210 	orr.w	r2, r2, #16
 80036f8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 fc32 	bl	8008f68 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800370e:	d13a      	bne.n	8003786 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f006 f84f 	bl	80097b8 <USB_HC_ReadInterrupt>
 800371a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e025      	b.n	800376e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374c:	d106      	bne.n	800375c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8ab 	bl	80038b0 <HCD_HC_IN_IRQHandler>
 800375a:	e005      	b.n	8003768 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fcc6 	bl	80040f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	d3d4      	bcc.n	8003722 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003780:	615a      	str	r2, [r3, #20]
 8003782:	e000      	b.n	8003786 <HAL_HCD_IRQHandler+0x202>
      return;
 8003784:	bf00      	nop
    }
  }
}
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_HCD_Start+0x16>
 800379e:	2302      	movs	r3, #2
 80037a0:	e013      	b.n	80037ca <HAL_HCD_Start+0x3e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f005 fae7 	bl	8008d82 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 fd4a 	bl	8009254 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_HCD_Stop+0x16>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e00d      	b.n	8003804 <HAL_HCD_Stop+0x32>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f006 f949 	bl	8009a8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f005 fcf1 	bl	8009200 <USB_ResetPort>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3360      	adds	r3, #96	; 0x60
 8003842:	781b      	ldrb	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3350      	adds	r3, #80	; 0x50
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f005 fd35 	bl	80092f4 <USB_GetCurrentFrame>
 800388a:	4603      	mov	r3, r0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f005 fd10 	bl	80092c6 <USB_GetHostSpeed>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d119      	bne.n	8003914 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	461a      	mov	r2, r3
 80038ee:	2304      	movs	r3, #4
 80038f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	440a      	add	r2, r1
 8003908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	60d3      	str	r3, [r2, #12]
 8003912:	e101      	b.n	8003b18 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392a:	d12b      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800393e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3361      	adds	r3, #97	; 0x61
 800394e:	2207      	movs	r2, #7
 8003950:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	440a      	add	r2, r1
 8003968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f005 ff2c 	bl	80097da <USB_HC_Halt>
 8003982:	e0c9      	b.n	8003b18 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d109      	bne.n	80039ae <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a6:	461a      	mov	r2, r3
 80039a8:	2320      	movs	r3, #32
 80039aa:	6093      	str	r3, [r2, #8]
 80039ac:	e0b4      	b.n	8003b18 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d133      	bne.n	8003a2c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	0151      	lsls	r1, r2, #5
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	440a      	add	r2, r1
 80039da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3361      	adds	r3, #97	; 0x61
 80039f2:	2205      	movs	r2, #5
 80039f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	2310      	movs	r3, #16
 8003a06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2308      	movs	r3, #8
 8003a18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f005 fed8 	bl	80097da <USB_HC_Halt>
 8003a2a:	e075      	b.n	8003b18 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d134      	bne.n	8003aae <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	3361      	adds	r3, #97	; 0x61
 8003a72:	2208      	movs	r2, #8
 8003a74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a82:	461a      	mov	r2, r3
 8003a84:	2310      	movs	r3, #16
 8003a86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	461a      	mov	r2, r3
 8003a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a9a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 fe97 	bl	80097da <USB_HC_Halt>
 8003aac:	e034      	b.n	8003b18 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d129      	bne.n	8003b18 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3361      	adds	r3, #97	; 0x61
 8003af2:	2206      	movs	r2, #6
 8003af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f005 fe6a 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	461a      	mov	r2, r3
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d122      	bne.n	8003b76 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b4a:	f043 0302 	orr.w	r3, r3, #2
 8003b4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f005 fe3d 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b72:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b74:	e2ba      	b.n	80040ec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 811b 	bne.w	8003dc4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d019      	beq.n	8003bca <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3348      	adds	r3, #72	; 0x48
 8003ba4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	0159      	lsls	r1, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	202c      	movs	r0, #44	; 0x2c
 8003bc0:	fb00 f303 	mul.w	r3, r0, r3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3350      	adds	r3, #80	; 0x50
 8003bc8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3361      	adds	r3, #97	; 0x61
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	335c      	adds	r3, #92	; 0x5c
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	333f      	adds	r3, #63	; 0x3f
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	333f      	adds	r3, #63	; 0x3f
 8003c22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d121      	bne.n	8003c6c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f005 fdc1 	bl	80097da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2310      	movs	r3, #16
 8003c68:	6093      	str	r3, [r2, #8]
 8003c6a:	e066      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	333f      	adds	r3, #63	; 0x3f
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d127      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c9e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3360      	adds	r3, #96	; 0x60
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	b2d9      	uxtb	r1, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	202c      	movs	r0, #44	; 0x2c
 8003cbc:	fb00 f303 	mul.w	r3, r0, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3360      	adds	r3, #96	; 0x60
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f00b f90f 	bl	800eeec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cce:	e034      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	333f      	adds	r3, #63	; 0x3f
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d12a      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3360      	adds	r3, #96	; 0x60
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	3354      	adds	r3, #84	; 0x54
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	f083 0301 	eor.w	r3, r3, #1
 8003d0a:	b2d8      	uxtb	r0, r3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3354      	adds	r3, #84	; 0x54
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	b2d9      	uxtb	r1, r3
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	202c      	movs	r0, #44	; 0x2c
 8003d28:	fb00 f303 	mul.w	r3, r0, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3360      	adds	r3, #96	; 0x60
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f00b f8d9 	bl	800eeec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d12b      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3348      	adds	r3, #72	; 0x48
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	202c      	movs	r0, #44	; 0x2c
 8003d58:	fb00 f202 	mul.w	r2, r0, r2
 8003d5c:	440a      	add	r2, r1
 8003d5e:	3240      	adds	r2, #64	; 0x40
 8003d60:	8812      	ldrh	r2, [r2, #0]
 8003d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 81be 	beq.w	80040ec <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3354      	adds	r3, #84	; 0x54
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	f083 0301 	eor.w	r3, r3, #1
 8003d84:	b2d8      	uxtb	r0, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3354      	adds	r3, #84	; 0x54
 8003d94:	4602      	mov	r2, r0
 8003d96:	701a      	strb	r2, [r3, #0]
}
 8003d98:	e1a8      	b.n	80040ec <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3354      	adds	r3, #84	; 0x54
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f083 0301 	eor.w	r3, r3, #1
 8003dae:	b2d8      	uxtb	r0, r3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3354      	adds	r3, #84	; 0x54
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	701a      	strb	r2, [r3, #0]
}
 8003dc2:	e193      	b.n	80040ec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	f040 8106 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003df6:	f023 0302 	bic.w	r3, r3, #2
 8003dfa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3361      	adds	r3, #97	; 0x61
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d109      	bne.n	8003e24 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3360      	adds	r3, #96	; 0x60
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e0c9      	b.n	8003fb8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	3361      	adds	r3, #97	; 0x61
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d109      	bne.n	8003e4c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3360      	adds	r3, #96	; 0x60
 8003e46:	2205      	movs	r2, #5
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e0b5      	b.n	8003fb8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3361      	adds	r3, #97	; 0x61
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b06      	cmp	r3, #6
 8003e5e:	d009      	beq.n	8003e74 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3361      	adds	r3, #97	; 0x61
 8003e6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d150      	bne.n	8003f16 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	335c      	adds	r3, #92	; 0x5c
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	202c      	movs	r0, #44	; 0x2c
 8003e8c:	fb00 f303 	mul.w	r3, r0, r3
 8003e90:	440b      	add	r3, r1
 8003e92:	335c      	adds	r3, #92	; 0x5c
 8003e94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	335c      	adds	r3, #92	; 0x5c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d912      	bls.n	8003ed0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	335c      	adds	r3, #92	; 0x5c
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3360      	adds	r3, #96	; 0x60
 8003eca:	2204      	movs	r2, #4
 8003ecc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ece:	e073      	b.n	8003fb8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	3360      	adds	r3, #96	; 0x60
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ef8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f14:	e050      	b.n	8003fb8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3361      	adds	r3, #97	; 0x61
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d122      	bne.n	8003f70 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	3360      	adds	r3, #96	; 0x60
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e023      	b.n	8003fb8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3361      	adds	r3, #97	; 0x61
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b07      	cmp	r3, #7
 8003f82:	d119      	bne.n	8003fb8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	335c      	adds	r3, #92	; 0x5c
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	202c      	movs	r0, #44	; 0x2c
 8003f9c:	fb00 f303 	mul.w	r3, r0, r3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	335c      	adds	r3, #92	; 0x5c
 8003fa4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3360      	adds	r3, #96	; 0x60
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	b2d9      	uxtb	r1, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	202c      	movs	r0, #44	; 0x2c
 8003fd4:	fb00 f303 	mul.w	r3, r0, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3360      	adds	r3, #96	; 0x60
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f00a ff83 	bl	800eeec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fe6:	e081      	b.n	80040ec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d176      	bne.n	80040ec <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	333f      	adds	r3, #63	; 0x3f
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d121      	bne.n	8004056 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	335c      	adds	r3, #92	; 0x5c
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	440a      	add	r2, r1
 800403a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f005 fbc3 	bl	80097da <USB_HC_Halt>
 8004054:	e041      	b.n	80040da <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	333f      	adds	r3, #63	; 0x3f
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	212c      	movs	r1, #44	; 0x2c
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	4413      	add	r3, r2
 8004076:	333f      	adds	r3, #63	; 0x3f
 8004078:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800407a:	2b02      	cmp	r3, #2
 800407c:	d12d      	bne.n	80040da <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	335c      	adds	r3, #92	; 0x5c
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d120      	bne.n	80040da <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	3361      	adds	r3, #97	; 0x61
 80040a6:	2203      	movs	r2, #3
 80040a8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f005 fb80 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	2310      	movs	r3, #16
 80040ea:	6093      	str	r3, [r2, #8]
}
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d119      	bne.n	8004158 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2304      	movs	r3, #4
 8004134:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	440a      	add	r2, r1
 800414c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004156:	e3c6      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b20      	cmp	r3, #32
 800416c:	d13e      	bne.n	80041ec <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	461a      	mov	r2, r3
 800417c:	2320      	movs	r3, #32
 800417e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	333d      	adds	r3, #61	; 0x3d
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 83a8 	bne.w	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	212c      	movs	r1, #44	; 0x2c
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	4413      	add	r3, r2
 80041a2:	333d      	adds	r3, #61	; 0x3d
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3360      	adds	r3, #96	; 0x60
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 faf8 	bl	80097da <USB_HC_Halt>
}
 80041ea:	e37c      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004202:	d122      	bne.n	800424a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	440a      	add	r2, r1
 800421a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800421e:	f043 0302 	orr.w	r3, r3, #2
 8004222:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f005 fad3 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004246:	6093      	str	r3, [r2, #8]
}
 8004248:	e34d      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d150      	bne.n	8004302 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	335c      	adds	r3, #92	; 0x5c
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d111      	bne.n	80042ac <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	333d      	adds	r3, #61	; 0x3d
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	461a      	mov	r2, r3
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f005 fa7f 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	461a      	mov	r2, r3
 80042ea:	2301      	movs	r3, #1
 80042ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	3361      	adds	r3, #97	; 0x61
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
}
 8004300:	e2f1      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d13c      	bne.n	8004392 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	3361      	adds	r3, #97	; 0x61
 8004326:	2204      	movs	r2, #4
 8004328:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	333d      	adds	r3, #61	; 0x3d
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	335c      	adds	r3, #92	; 0x5c
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	440a      	add	r2, r1
 8004364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f005 fa2e 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	461a      	mov	r2, r3
 800438c:	2340      	movs	r3, #64	; 0x40
 800438e:	6093      	str	r3, [r2, #8]
}
 8004390:	e2a9      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d12a      	bne.n	80043fe <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	461a      	mov	r2, r3
 80043b6:	2308      	movs	r3, #8
 80043b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f005 f9f8 	bl	80097da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3361      	adds	r3, #97	; 0x61
 80043f8:	2205      	movs	r2, #5
 80043fa:	701a      	strb	r2, [r3, #0]
}
 80043fc:	e273      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b10      	cmp	r3, #16
 8004412:	d150      	bne.n	80044b6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	335c      	adds	r3, #92	; 0x5c
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3361      	adds	r3, #97	; 0x61
 8004434:	2203      	movs	r2, #3
 8004436:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	333d      	adds	r3, #61	; 0x3d
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d112      	bne.n	8004472 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	212c      	movs	r1, #44	; 0x2c
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	333c      	adds	r3, #60	; 0x3c
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d108      	bne.n	8004472 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	333d      	adds	r3, #61	; 0x3d
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	440a      	add	r2, r1
 8004488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f005 f99c 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ae:	461a      	mov	r2, r3
 80044b0:	2310      	movs	r3, #16
 80044b2:	6093      	str	r3, [r2, #8]
}
 80044b4:	e217      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d174      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d121      	bne.n	8004518 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3361      	adds	r3, #97	; 0x61
 80044e2:	2206      	movs	r2, #6
 80044e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f005 f962 	bl	80097da <USB_HC_Halt>
 8004516:	e044      	b.n	80045a2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	335c      	adds	r3, #92	; 0x5c
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	202c      	movs	r0, #44	; 0x2c
 8004530:	fb00 f303 	mul.w	r3, r0, r3
 8004534:	440b      	add	r3, r1
 8004536:	335c      	adds	r3, #92	; 0x5c
 8004538:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	335c      	adds	r3, #92	; 0x5c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d920      	bls.n	8004590 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	335c      	adds	r3, #92	; 0x5c
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3360      	adds	r3, #96	; 0x60
 800456e:	2204      	movs	r2, #4
 8004570:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	b2d9      	uxtb	r1, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	202c      	movs	r0, #44	; 0x2c
 800457c:	fb00 f303 	mul.w	r3, r0, r3
 8004580:	4413      	add	r3, r2
 8004582:	3360      	adds	r3, #96	; 0x60
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f00a fcaf 	bl	800eeec <HAL_HCD_HC_NotifyURBChange_Callback>
 800458e:	e008      	b.n	80045a2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3360      	adds	r3, #96	; 0x60
 800459e:	2202      	movs	r2, #2
 80045a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	6093      	str	r3, [r2, #8]
}
 80045b4:	e197      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045cc:	d134      	bne.n	8004638 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f005 f8ee 	bl	80097da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4413      	add	r3, r2
 8004606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460a:	461a      	mov	r2, r3
 800460c:	2310      	movs	r3, #16
 800460e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	461a      	mov	r2, r3
 800461e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004622:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	212c      	movs	r1, #44	; 0x2c
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3361      	adds	r3, #97	; 0x61
 8004632:	2208      	movs	r2, #8
 8004634:	701a      	strb	r2, [r3, #0]
}
 8004636:	e156      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	f040 814b 	bne.w	80048e6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	440a      	add	r2, r1
 8004666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800466a:	f023 0302 	bic.w	r3, r3, #2
 800466e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	3361      	adds	r3, #97	; 0x61
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d179      	bne.n	8004778 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3360      	adds	r3, #96	; 0x60
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	212c      	movs	r1, #44	; 0x2c
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	333f      	adds	r3, #63	; 0x3f
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d00a      	beq.n	80046c0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	333f      	adds	r3, #63	; 0x3f
 80046b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	f040 80fc 	bne.w	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d142      	bne.n	800474e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	334c      	adds	r3, #76	; 0x4c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ed 	beq.w	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	334c      	adds	r3, #76	; 0x4c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	202c      	movs	r0, #44	; 0x2c
 80046f4:	fb00 f202 	mul.w	r2, r0, r2
 80046f8:	440a      	add	r2, r1
 80046fa:	3240      	adds	r2, #64	; 0x40
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	3b01      	subs	r3, #1
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	202c      	movs	r0, #44	; 0x2c
 8004708:	fb00 f202 	mul.w	r2, r0, r2
 800470c:	440a      	add	r2, r1
 800470e:	3240      	adds	r2, #64	; 0x40
 8004710:	8812      	ldrh	r2, [r2, #0]
 8004712:	fbb3 f3f2 	udiv	r3, r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80ca 	beq.w	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3355      	adds	r3, #85	; 0x55
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f083 0301 	eor.w	r3, r3, #1
 8004738:	b2d8      	uxtb	r0, r3
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	3355      	adds	r3, #85	; 0x55
 8004748:	4602      	mov	r2, r0
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e0b4      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3355      	adds	r3, #85	; 0x55
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2d8      	uxtb	r0, r3
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3355      	adds	r3, #85	; 0x55
 8004772:	4602      	mov	r2, r0
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e09f      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3361      	adds	r3, #97	; 0x61
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d109      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3360      	adds	r3, #96	; 0x60
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e08b      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3361      	adds	r3, #97	; 0x61
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d109      	bne.n	80047c8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3360      	adds	r3, #96	; 0x60
 80047c2:	2202      	movs	r2, #2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e077      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3361      	adds	r3, #97	; 0x61
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d109      	bne.n	80047f0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3360      	adds	r3, #96	; 0x60
 80047ea:	2205      	movs	r2, #5
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e063      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3361      	adds	r3, #97	; 0x61
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d009      	beq.n	8004818 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	212c      	movs	r1, #44	; 0x2c
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4413      	add	r3, r2
 8004810:	3361      	adds	r3, #97	; 0x61
 8004812:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004814:	2b08      	cmp	r3, #8
 8004816:	d14f      	bne.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	212c      	movs	r1, #44	; 0x2c
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	4413      	add	r3, r2
 8004824:	335c      	adds	r3, #92	; 0x5c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	fb00 f303 	mul.w	r3, r0, r3
 8004834:	440b      	add	r3, r1
 8004836:	335c      	adds	r3, #92	; 0x5c
 8004838:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	335c      	adds	r3, #92	; 0x5c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d912      	bls.n	8004874 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	335c      	adds	r3, #92	; 0x5c
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3360      	adds	r3, #96	; 0x60
 800486e:	2204      	movs	r2, #4
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e021      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	3360      	adds	r3, #96	; 0x60
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800489c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	461a      	mov	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	461a      	mov	r2, r3
 80048c6:	2302      	movs	r3, #2
 80048c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	b2d9      	uxtb	r1, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	202c      	movs	r0, #44	; 0x2c
 80048d4:	fb00 f303 	mul.w	r3, r0, r3
 80048d8:	4413      	add	r3, r2
 80048da:	3360      	adds	r3, #96	; 0x60
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f00a fb03 	bl	800eeec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048e6:	bf00      	nop
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b08a      	sub	sp, #40	; 0x28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	0c5b      	lsrs	r3, r3, #17
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004922:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d004      	beq.n	8004934 <HCD_RXQLVL_IRQHandler+0x46>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b05      	cmp	r3, #5
 800492e:	f000 80a9 	beq.w	8004a84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004932:	e0aa      	b.n	8004a8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80a6 	beq.w	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3344      	adds	r3, #68	; 0x44
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 809b 	beq.w	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3350      	adds	r3, #80	; 0x50
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	441a      	add	r2, r3
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	202c      	movs	r0, #44	; 0x2c
 800496c:	fb00 f303 	mul.w	r3, r0, r3
 8004970:	440b      	add	r3, r1
 8004972:	334c      	adds	r3, #76	; 0x4c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d87a      	bhi.n	8004a70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3344      	adds	r3, #68	; 0x44
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	b292      	uxth	r2, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f004 fabf 	bl	8008f16 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	3344      	adds	r3, #68	; 0x44
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	441a      	add	r2, r3
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	202c      	movs	r0, #44	; 0x2c
 80049b2:	fb00 f303 	mul.w	r3, r0, r3
 80049b6:	440b      	add	r3, r1
 80049b8:	3344      	adds	r3, #68	; 0x44
 80049ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3350      	adds	r3, #80	; 0x50
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	441a      	add	r2, r3
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	202c      	movs	r0, #44	; 0x2c
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	440b      	add	r3, r1
 80049dc:	3350      	adds	r3, #80	; 0x50
 80049de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	0cdb      	lsrs	r3, r3, #19
 80049f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3340      	adds	r3, #64	; 0x40
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d13c      	bne.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d039      	beq.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	461a      	mov	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3354      	adds	r3, #84	; 0x54
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	f083 0301 	eor.w	r3, r3, #1
 8004a5a:	b2d8      	uxtb	r0, r3
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3354      	adds	r3, #84	; 0x54
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	701a      	strb	r2, [r3, #0]
      break;
 8004a6e:	e00b      	b.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3360      	adds	r3, #96	; 0x60
 8004a7e:	2204      	movs	r2, #4
 8004a80:	701a      	strb	r2, [r3, #0]
      break;
 8004a82:	e001      	b.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a88:	bf00      	nop
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3728      	adds	r7, #40	; 0x28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004abe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d10b      	bne.n	8004ae2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f00a f9ed 	bl	800eeb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d132      	bne.n	8004b52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 0308 	orr.w	r3, r3, #8
 8004af2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d126      	bne.n	8004b4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d113      	bne.n	8004b2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b10:	d106      	bne.n	8004b20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f004 fb37 	bl	800918c <USB_InitFSLSPClkSel>
 8004b1e:	e011      	b.n	8004b44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f004 fb30 	bl	800918c <USB_InitFSLSPClkSel>
 8004b2c:	e00a      	b.n	8004b44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d106      	bne.n	8004b44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f00a f9e3 	bl	800ef10 <HAL_HCD_PortEnabled_Callback>
 8004b4a:	e002      	b.n	8004b52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f00a f9ed 	bl	800ef2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d103      	bne.n	8004b64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	bf00      	nop
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e12b      	b.n	8004de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd fbf0 	bl	8002384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f002 fb26 	bl	800722c <HAL_RCC_GetPCLK1Freq>
 8004be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4a81      	ldr	r2, [pc, #516]	; (8004dec <HAL_I2C_Init+0x274>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d807      	bhi.n	8004bfc <HAL_I2C_Init+0x84>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a80      	ldr	r2, [pc, #512]	; (8004df0 <HAL_I2C_Init+0x278>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	bf94      	ite	ls
 8004bf4:	2301      	movls	r3, #1
 8004bf6:	2300      	movhi	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e006      	b.n	8004c0a <HAL_I2C_Init+0x92>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a7d      	ldr	r2, [pc, #500]	; (8004df4 <HAL_I2C_Init+0x27c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	bf94      	ite	ls
 8004c04:	2301      	movls	r3, #1
 8004c06:	2300      	movhi	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0e7      	b.n	8004de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a78      	ldr	r2, [pc, #480]	; (8004df8 <HAL_I2C_Init+0x280>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <HAL_I2C_Init+0x274>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d802      	bhi.n	8004c4c <HAL_I2C_Init+0xd4>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	e009      	b.n	8004c60 <HAL_I2C_Init+0xe8>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4a69      	ldr	r2, [pc, #420]	; (8004dfc <HAL_I2C_Init+0x284>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	3301      	adds	r3, #1
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	495c      	ldr	r1, [pc, #368]	; (8004dec <HAL_I2C_Init+0x274>)
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	d819      	bhi.n	8004cb4 <HAL_I2C_Init+0x13c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e59      	subs	r1, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c94:	400b      	ands	r3, r1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_I2C_Init+0x138>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1e59      	subs	r1, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cae:	e051      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e04f      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <HAL_I2C_Init+0x168>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1e58      	subs	r0, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e012      	b.n	8004d06 <HAL_I2C_Init+0x18e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e58      	subs	r0, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	0099      	lsls	r1, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Init+0x196>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e022      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10e      	bne.n	8004d34 <HAL_I2C_Init+0x1bc>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1e58      	subs	r0, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	440b      	add	r3, r1
 8004d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	e00f      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e58      	subs	r0, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	0099      	lsls	r1, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	6809      	ldr	r1, [r1, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6911      	ldr	r1, [r2, #16]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	000186a0 	.word	0x000186a0
 8004df0:	001e847f 	.word	0x001e847f
 8004df4:	003d08ff 	.word	0x003d08ff
 8004df8:	431bde83 	.word	0x431bde83
 8004dfc:	10624dd3 	.word	0x10624dd3

08004e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
 8004e10:	4613      	mov	r3, r2
 8004e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7fd fdf2 	bl	80029fc <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	f040 80e0 	bne.w	8004fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2319      	movs	r3, #25
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4970      	ldr	r1, [pc, #448]	; (8004ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 ff30 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e0d3      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_I2C_Master_Transmit+0x50>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e0cc      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d007      	beq.n	8004e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2221      	movs	r2, #33	; 0x21
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2210      	movs	r2, #16
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	893a      	ldrh	r2, [r7, #8]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a50      	ldr	r2, [pc, #320]	; (8004ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004eb8:	8979      	ldrh	r1, [r7, #10]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6a3a      	ldr	r2, [r7, #32]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fcea 	bl	8005898 <I2C_MasterRequestWrite>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e08d      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ee4:	e066      	b.n	8004fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 ffaa 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d107      	bne.n	8004f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e06b      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d11b      	bne.n	8004f88 <HAL_I2C_Master_Transmit+0x188>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	6a39      	ldr	r1, [r7, #32]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 ff9a 	bl	8005ec6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d107      	bne.n	8004fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e01a      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d194      	bne.n	8004ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	00100002 	.word	0x00100002
 8004ff8:	ffff0000 	.word	0xffff0000

08004ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	461a      	mov	r2, r3
 800500a:	4603      	mov	r3, r0
 800500c:	817b      	strh	r3, [r7, #10]
 800500e:	460b      	mov	r3, r1
 8005010:	813b      	strh	r3, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005016:	f7fd fcf1 	bl	80029fc <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b20      	cmp	r3, #32
 8005026:	f040 80d9 	bne.w	80051dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2319      	movs	r3, #25
 8005030:	2201      	movs	r2, #1
 8005032:	496d      	ldr	r1, [pc, #436]	; (80051e8 <HAL_I2C_Mem_Write+0x1ec>)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fe2f 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
 8005042:	e0cc      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_I2C_Mem_Write+0x56>
 800504e:	2302      	movs	r3, #2
 8005050:	e0c5      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d007      	beq.n	8005078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <HAL_I2C_Mem_Write+0x1f0>)
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ba:	88f8      	ldrh	r0, [r7, #6]
 80050bc:	893a      	ldrh	r2, [r7, #8]
 80050be:	8979      	ldrh	r1, [r7, #10]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4603      	mov	r3, r0
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fc66 	bl	800599c <I2C_RequestMemoryWrite>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d052      	beq.n	800517c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e081      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 feb0 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d107      	bne.n	8005102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e06b      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11b      	bne.n	800517c <HAL_I2C_Mem_Write+0x180>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1aa      	bne.n	80050da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fe9c 	bl	8005ec6 <I2C_WaitOnBTFFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b04      	cmp	r3, #4
 800519a:	d107      	bne.n	80051ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e016      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	00100002 	.word	0x00100002
 80051ec:	ffff0000 	.word	0xffff0000

080051f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	817b      	strh	r3, [r7, #10]
 8005202:	460b      	mov	r3, r1
 8005204:	813b      	strh	r3, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800520a:	f7fd fbf7 	bl	80029fc <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b20      	cmp	r3, #32
 800521a:	f040 8208 	bne.w	800562e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2319      	movs	r3, #25
 8005224:	2201      	movs	r2, #1
 8005226:	497b      	ldr	r1, [pc, #492]	; (8005414 <HAL_I2C_Mem_Read+0x224>)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fd35 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
 8005236:	e1fb      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_I2C_Mem_Read+0x56>
 8005242:	2302      	movs	r3, #2
 8005244:	e1f4      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d007      	beq.n	800526c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2222      	movs	r2, #34	; 0x22
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a5b      	ldr	r2, [pc, #364]	; (8005418 <HAL_I2C_Mem_Read+0x228>)
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ae:	88f8      	ldrh	r0, [r7, #6]
 80052b0:	893a      	ldrh	r2, [r7, #8]
 80052b2:	8979      	ldrh	r1, [r7, #10]
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fc02 	bl	8005ac8 <I2C_RequestMemoryRead>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e1b0      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d113      	bne.n	80052fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e184      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	2b01      	cmp	r3, #1
 8005304:	d11b      	bne.n	800533e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e164      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	2b02      	cmp	r3, #2
 8005344:	d11b      	bne.n	800537e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	e144      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005394:	e138      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	2b03      	cmp	r3, #3
 800539c:	f200 80f1 	bhi.w	8005582 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d123      	bne.n	80053f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fdcb 	bl	8005f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e139      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053ee:	e10b      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d14e      	bne.n	8005496 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2200      	movs	r2, #0
 8005400:	4906      	ldr	r1, [pc, #24]	; (800541c <HAL_I2C_Mem_Read+0x22c>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fc48 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e10e      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
 8005412:	bf00      	nop
 8005414:	00100002 	.word	0x00100002
 8005418:	ffff0000 	.word	0xffff0000
 800541c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005494:	e0b8      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2200      	movs	r2, #0
 800549e:	4966      	ldr	r1, [pc, #408]	; (8005638 <HAL_I2C_Mem_Read+0x448>)
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fbf9 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0bf      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2200      	movs	r2, #0
 80054fa:	494f      	ldr	r1, [pc, #316]	; (8005638 <HAL_I2C_Mem_Read+0x448>)
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fbcb 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e091      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005580:	e042      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fcde 	bl	8005f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e04c      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d118      	bne.n	8005608 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	f47f aec2 	bne.w	8005396 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3728      	adds	r7, #40	; 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	00010004 	.word	0x00010004

0800563c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	607a      	str	r2, [r7, #4]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	460b      	mov	r3, r1
 800564a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800564c:	f7fd f9d6 	bl	80029fc <HAL_GetTick>
 8005650:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005652:	2301      	movs	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b20      	cmp	r3, #32
 8005660:	f040 8111 	bne.w	8005886 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2319      	movs	r3, #25
 800566a:	2201      	movs	r2, #1
 800566c:	4988      	ldr	r1, [pc, #544]	; (8005890 <HAL_I2C_IsDeviceReady+0x254>)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fb12 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800567a:	2302      	movs	r3, #2
 800567c:	e104      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_I2C_IsDeviceReady+0x50>
 8005688:	2302      	movs	r3, #2
 800568a:	e0fd      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d007      	beq.n	80056b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2224      	movs	r2, #36	; 0x24
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a70      	ldr	r2, [pc, #448]	; (8005894 <HAL_I2C_IsDeviceReady+0x258>)
 80056d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fad0 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570c:	d103      	bne.n	8005716 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0b6      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800571a:	897b      	ldrh	r3, [r7, #10]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005728:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800572a:	f7fd f967 	bl	80029fc <HAL_GetTick>
 800572e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800575e:	e025      	b.n	80057ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005760:	f7fd f94c 	bl	80029fc <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <HAL_I2C_IsDeviceReady+0x13a>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	22a0      	movs	r2, #160	; 0xa0
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2ba0      	cmp	r3, #160	; 0xa0
 80057b6:	d005      	beq.n	80057c4 <HAL_I2C_IsDeviceReady+0x188>
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_I2C_IsDeviceReady+0x188>
 80057be:	7dbb      	ldrb	r3, [r7, #22]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0cd      	beq.n	8005760 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d129      	bne.n	800582e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2319      	movs	r3, #25
 8005806:	2201      	movs	r2, #1
 8005808:	4921      	ldr	r1, [pc, #132]	; (8005890 <HAL_I2C_IsDeviceReady+0x254>)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fa44 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e036      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e02c      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005846:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2319      	movs	r3, #25
 800584e:	2201      	movs	r2, #1
 8005850:	490f      	ldr	r1, [pc, #60]	; (8005890 <HAL_I2C_IsDeviceReady+0x254>)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fa20 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e012      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3301      	adds	r3, #1
 8005866:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	f4ff af32 	bcc.w	80056d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	00100002 	.word	0x00100002
 8005894:	ffff0000 	.word	0xffff0000

08005898 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	460b      	mov	r3, r1
 80058a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d006      	beq.n	80058c2 <I2C_MasterRequestWrite+0x2a>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d003      	beq.n	80058c2 <I2C_MasterRequestWrite+0x2a>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058c0:	d108      	bne.n	80058d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e00b      	b.n	80058ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	2b12      	cmp	r3, #18
 80058da:	d107      	bne.n	80058ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f9cd 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	d103      	bne.n	800591c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e035      	b.n	800598c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005928:	d108      	bne.n	800593c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	e01b      	b.n	8005974 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800593c:	897b      	ldrh	r3, [r7, #10]
 800593e:	11db      	asrs	r3, r3, #7
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0306 	and.w	r3, r3, #6
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f063 030f 	orn	r3, r3, #15
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	490e      	ldr	r1, [pc, #56]	; (8005994 <I2C_MasterRequestWrite+0xfc>)
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f9f3 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e010      	b.n	800598c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800596a:	897b      	ldrh	r3, [r7, #10]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4907      	ldr	r1, [pc, #28]	; (8005998 <I2C_MasterRequestWrite+0x100>)
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f9e3 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	00010008 	.word	0x00010008
 8005998:	00010002 	.word	0x00010002

0800599c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4603      	mov	r3, r0
 80059ac:	817b      	strh	r3, [r7, #10]
 80059ae:	460b      	mov	r3, r1
 80059b0:	813b      	strh	r3, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f960 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ec:	d103      	bne.n	80059f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e05f      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059fa:	897b      	ldrh	r3, [r7, #10]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	492d      	ldr	r1, [pc, #180]	; (8005ac4 <I2C_RequestMemoryWrite+0x128>)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f998 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e04c      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	6a39      	ldr	r1, [r7, #32]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa02 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d107      	bne.n	8005a5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e02b      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a68:	893b      	ldrh	r3, [r7, #8]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	611a      	str	r2, [r3, #16]
 8005a72:	e021      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	6a39      	ldr	r1, [r7, #32]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9dc 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d107      	bne.n	8005aaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e005      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	893b      	ldrh	r3, [r7, #8]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	00010002 	.word	0x00010002

08005ac8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	460b      	mov	r3, r1
 8005adc:	813b      	strh	r3, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f8c2 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00d      	beq.n	8005b36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b28:	d103      	bne.n	8005b32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e0aa      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	4952      	ldr	r1, [pc, #328]	; (8005c94 <I2C_RequestMemoryRead+0x1cc>)
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f8fa 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e097      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	6a39      	ldr	r1, [r7, #32]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f964 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d107      	bne.n	8005b9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e076      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d105      	bne.n	8005bb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba4:	893b      	ldrh	r3, [r7, #8]
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	611a      	str	r2, [r3, #16]
 8005bae:	e021      	b.n	8005bf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	6a39      	ldr	r1, [r7, #32]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f93e 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00d      	beq.n	8005bea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d107      	bne.n	8005be6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e050      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bea:	893b      	ldrh	r3, [r7, #8]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	6a39      	ldr	r1, [r7, #32]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f923 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d107      	bne.n	8005c1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e035      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f82b 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c56:	d103      	bne.n	8005c60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e013      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c64:	897b      	ldrh	r3, [r7, #10]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	4906      	ldr	r1, [pc, #24]	; (8005c94 <I2C_RequestMemoryRead+0x1cc>)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f863 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	00010002 	.word	0x00010002

08005c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ca8:	e025      	b.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb0:	d021      	beq.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fc fea3 	bl	80029fc <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e023      	b.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10d      	bne.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	43da      	mvns	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	e00c      	b.n	8005d36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d0b6      	beq.n	8005caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d54:	e051      	b.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d123      	bne.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0204 	orr.w	r2, r3, #4
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e046      	b.n	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db4:	d021      	beq.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7fc fe21 	bl	80029fc <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d116      	bne.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e020      	b.n	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10c      	bne.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e00b      	b.n	8005e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	43da      	mvns	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d18d      	bne.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e50:	e02d      	b.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f8ce 	bl	8005ff4 <I2C_IsAcknowledgeFailed>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e02d      	b.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e68:	d021      	beq.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6a:	f7fc fdc7 	bl	80029fc <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d302      	bcc.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d116      	bne.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e007      	b.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d1ca      	bne.n	8005e52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed2:	e02d      	b.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f88d 	bl	8005ff4 <I2C_IsAcknowledgeFailed>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e02d      	b.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eea:	d021      	beq.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eec:	f7fc fd86 	bl	80029fc <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d116      	bne.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e007      	b.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d1ca      	bne.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f54:	e042      	b.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d119      	bne.n	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0210 	mvn.w	r2, #16
 8005f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e029      	b.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f98:	f7fc fd30 	bl	80029fc <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d302      	bcc.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d116      	bne.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e007      	b.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d1b5      	bne.n	8005f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600a:	d11b      	bne.n	8006044 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006014:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0204 	orr.w	r2, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e128      	b.n	80062b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a90      	ldr	r2, [pc, #576]	; (80062c0 <HAL_I2S_Init+0x26c>)
 800607e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fc fa1f 	bl	80024c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800609c:	f023 030f 	bic.w	r3, r3, #15
 80060a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2202      	movs	r2, #2
 80060a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d060      	beq.n	8006174 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80060ba:	2310      	movs	r3, #16
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e001      	b.n	80060c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80060c0:	2320      	movs	r3, #32
 80060c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d802      	bhi.n	80060d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80060d2:	2001      	movs	r0, #1
 80060d4:	f001 f9e6 	bl	80074a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80060d8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e2:	d125      	bne.n	8006130 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	3305      	adds	r3, #5
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e01f      	b.n	800614e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	fbb2 f2f3 	udiv	r2, r2, r3
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	fbb2 f3f3 	udiv	r3, r2, r3
 800612a:	3305      	adds	r3, #5
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	e00e      	b.n	800614e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	fbb2 f2f3 	udiv	r2, r2, r3
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	461a      	mov	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	fbb2 f3f3 	udiv	r3, r2, r3
 800614a:	3305      	adds	r3, #5
 800614c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4a5c      	ldr	r2, [pc, #368]	; (80062c4 <HAL_I2S_Init+0x270>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e003      	b.n	800617c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006174:	2302      	movs	r3, #2
 8006176:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d902      	bls.n	8006188 <HAL_I2S_Init+0x134>
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2bff      	cmp	r3, #255	; 0xff
 8006186:	d907      	bls.n	8006198 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	f043 0210 	orr.w	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e08f      	b.n	80062b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	ea42 0103 	orr.w	r1, r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061b6:	f023 030f 	bic.w	r3, r3, #15
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6851      	ldr	r1, [r2, #4]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6892      	ldr	r2, [r2, #8]
 80061c2:	4311      	orrs	r1, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68d2      	ldr	r2, [r2, #12]
 80061c8:	4311      	orrs	r1, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6992      	ldr	r2, [r2, #24]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d161      	bne.n	80062a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a38      	ldr	r2, [pc, #224]	; (80062c8 <HAL_I2S_Init+0x274>)
 80061e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a37      	ldr	r2, [pc, #220]	; (80062cc <HAL_I2S_Init+0x278>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d101      	bne.n	80061f8 <HAL_I2S_Init+0x1a4>
 80061f4:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <HAL_I2S_Init+0x27c>)
 80061f6:	e001      	b.n	80061fc <HAL_I2S_Init+0x1a8>
 80061f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	4932      	ldr	r1, [pc, #200]	; (80062cc <HAL_I2S_Init+0x278>)
 8006204:	428a      	cmp	r2, r1
 8006206:	d101      	bne.n	800620c <HAL_I2S_Init+0x1b8>
 8006208:	4a31      	ldr	r2, [pc, #196]	; (80062d0 <HAL_I2S_Init+0x27c>)
 800620a:	e001      	b.n	8006210 <HAL_I2S_Init+0x1bc>
 800620c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006210:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006214:	f023 030f 	bic.w	r3, r3, #15
 8006218:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <HAL_I2S_Init+0x278>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d101      	bne.n	8006228 <HAL_I2S_Init+0x1d4>
 8006224:	4b2a      	ldr	r3, [pc, #168]	; (80062d0 <HAL_I2S_Init+0x27c>)
 8006226:	e001      	b.n	800622c <HAL_I2S_Init+0x1d8>
 8006228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800622c:	2202      	movs	r2, #2
 800622e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <HAL_I2S_Init+0x278>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <HAL_I2S_Init+0x1ea>
 800623a:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <HAL_I2S_Init+0x27c>)
 800623c:	e001      	b.n	8006242 <HAL_I2S_Init+0x1ee>
 800623e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624e:	d003      	beq.n	8006258 <HAL_I2S_Init+0x204>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	e001      	b.n	8006264 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800626e:	4313      	orrs	r3, r2
 8006270:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006278:	4313      	orrs	r3, r2
 800627a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006282:	4313      	orrs	r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	897b      	ldrh	r3, [r7, #10]
 8006288:	4313      	orrs	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006290:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <HAL_I2S_Init+0x278>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d101      	bne.n	80062a0 <HAL_I2S_Init+0x24c>
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <HAL_I2S_Init+0x27c>)
 800629e:	e001      	b.n	80062a4 <HAL_I2S_Init+0x250>
 80062a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062a4:	897a      	ldrh	r2, [r7, #10]
 80062a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	080063cb 	.word	0x080063cb
 80062c4:	cccccccd 	.word	0xcccccccd
 80062c8:	080064e1 	.word	0x080064e1
 80062cc:	40003800 	.word	0x40003800
 80062d0:	40003400 	.word	0x40003400

080062d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10e      	bne.n	8006364 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006354:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ffb8 	bl	80062d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	b292      	uxth	r2, r2
 8006380:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10e      	bne.n	80063c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff93 	bl	80062e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d13a      	bne.n	800645c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d109      	bne.n	8006404 <I2S_IRQHandler+0x3a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d102      	bne.n	8006404 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ffb4 	bl	800636c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d126      	bne.n	800645c <I2S_IRQHandler+0x92>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b20      	cmp	r3, #32
 800641a:	d11f      	bne.n	800645c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800642a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	f043 0202 	orr.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff ff50 	bl	80062fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b03      	cmp	r3, #3
 8006466:	d136      	bne.n	80064d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d109      	bne.n	8006486 <I2S_IRQHandler+0xbc>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d102      	bne.n	8006486 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ff45 	bl	8006310 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d122      	bne.n	80064d6 <I2S_IRQHandler+0x10c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b20      	cmp	r3, #32
 800649c:	d11b      	bne.n	80064d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c8:	f043 0204 	orr.w	r2, r3, #4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff13 	bl	80062fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064d6:	bf00      	nop
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4aa2      	ldr	r2, [pc, #648]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d101      	bne.n	80064fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80064fa:	4ba2      	ldr	r3, [pc, #648]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064fc:	e001      	b.n	8006502 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80064fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a9b      	ldr	r2, [pc, #620]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006518:	4b9a      	ldr	r3, [pc, #616]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800651a:	e001      	b.n	8006520 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800651c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652c:	d004      	beq.n	8006538 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 8099 	bne.w	800666a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d107      	bne.n	8006552 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f925 	bl	800679c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d107      	bne.n	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9c8 	bl	80068fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d13a      	bne.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d035      	beq.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a7e      	ldr	r2, [pc, #504]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800658a:	4b7e      	ldr	r3, [pc, #504]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800658c:	e001      	b.n	8006592 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800658e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4979      	ldr	r1, [pc, #484]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800659a:	428b      	cmp	r3, r1
 800659c:	d101      	bne.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800659e:	4b79      	ldr	r3, [pc, #484]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065a0:	e001      	b.n	80065a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80065a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f043 0202 	orr.w	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fe88 	bl	80062fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	f040 80be 	bne.w	8006774 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80b8 	beq.w	8006774 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006612:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a59      	ldr	r2, [pc, #356]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d101      	bne.n	8006622 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800661e:	4b59      	ldr	r3, [pc, #356]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006620:	e001      	b.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4954      	ldr	r1, [pc, #336]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800662e:	428b      	cmp	r3, r1
 8006630:	d101      	bne.n	8006636 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006632:	4b54      	ldr	r3, [pc, #336]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006634:	e001      	b.n	800663a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800663a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800663e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006640:	2300      	movs	r3, #0
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	f043 0204 	orr.w	r2, r3, #4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff fe4a 	bl	80062fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006668:	e084      	b.n	8006774 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d107      	bne.n	8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8be 	bl	8006800 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	d107      	bne.n	800669e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8fd 	bl	8006898 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d12f      	bne.n	8006708 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02a      	beq.n	8006708 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2e      	ldr	r2, [pc, #184]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d101      	bne.n	80066d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80066cc:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066ce:	e001      	b.n	80066d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80066d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4929      	ldr	r1, [pc, #164]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066dc:	428b      	cmp	r3, r1
 80066de:	d101      	bne.n	80066e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066e2:	e001      	b.n	80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80066e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	f043 0202 	orr.w	r2, r3, #2
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fdfa 	bl	80062fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b08      	cmp	r3, #8
 8006710:	d131      	bne.n	8006776 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d02c      	beq.n	8006776 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a17      	ldr	r2, [pc, #92]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006726:	4b17      	ldr	r3, [pc, #92]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006728:	e001      	b.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800672a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4912      	ldr	r1, [pc, #72]	; (8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006736:	428b      	cmp	r3, r1
 8006738:	d101      	bne.n	800673e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800673c:	e001      	b.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800673e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006742:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006746:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006756:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	f043 0204 	orr.w	r2, r3, #4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fdc5 	bl	80062fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006772:	e000      	b.n	8006776 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006774:	bf00      	nop
}
 8006776:	bf00      	nop
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40003800 	.word	0x40003800
 8006784:	40003400 	.word	0x40003400

08006788 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	1c99      	adds	r1, r3, #2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6251      	str	r1, [r2, #36]	; 0x24
 80067ae:	881a      	ldrh	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d113      	bne.n	80067f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d106      	bne.n	80067f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ffc9 	bl	8006788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	1c99      	adds	r1, r3, #2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6251      	str	r1, [r2, #36]	; 0x24
 8006812:	8819      	ldrh	r1, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <I2SEx_TxISR_I2SExt+0x90>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d101      	bne.n	8006822 <I2SEx_TxISR_I2SExt+0x22>
 800681e:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <I2SEx_TxISR_I2SExt+0x94>)
 8006820:	e001      	b.n	8006826 <I2SEx_TxISR_I2SExt+0x26>
 8006822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006826:	460a      	mov	r2, r1
 8006828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d121      	bne.n	8006886 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a12      	ldr	r2, [pc, #72]	; (8006890 <I2SEx_TxISR_I2SExt+0x90>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <I2SEx_TxISR_I2SExt+0x50>
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <I2SEx_TxISR_I2SExt+0x94>)
 800684e:	e001      	b.n	8006854 <I2SEx_TxISR_I2SExt+0x54>
 8006850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	490d      	ldr	r1, [pc, #52]	; (8006890 <I2SEx_TxISR_I2SExt+0x90>)
 800685c:	428b      	cmp	r3, r1
 800685e:	d101      	bne.n	8006864 <I2SEx_TxISR_I2SExt+0x64>
 8006860:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <I2SEx_TxISR_I2SExt+0x94>)
 8006862:	e001      	b.n	8006868 <I2SEx_TxISR_I2SExt+0x68>
 8006864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800686c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ff81 	bl	8006788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40003800 	.word	0x40003800
 8006894:	40003400 	.word	0x40003400

08006898 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68d8      	ldr	r0, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	1c99      	adds	r1, r3, #2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068b0:	b282      	uxth	r2, r0
 80068b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d113      	bne.n	80068f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff ff4a 	bl	8006788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <I2SEx_RxISR_I2SExt+0x90>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <I2SEx_RxISR_I2SExt+0x16>
 800690e:	4b20      	ldr	r3, [pc, #128]	; (8006990 <I2SEx_RxISR_I2SExt+0x94>)
 8006910:	e001      	b.n	8006916 <I2SEx_RxISR_I2SExt+0x1a>
 8006912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006916:	68d8      	ldr	r0, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	1c99      	adds	r1, r3, #2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006922:	b282      	uxth	r2, r0
 8006924:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d121      	bne.n	8006982 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a12      	ldr	r2, [pc, #72]	; (800698c <I2SEx_RxISR_I2SExt+0x90>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d101      	bne.n	800694c <I2SEx_RxISR_I2SExt+0x50>
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <I2SEx_RxISR_I2SExt+0x94>)
 800694a:	e001      	b.n	8006950 <I2SEx_RxISR_I2SExt+0x54>
 800694c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	490d      	ldr	r1, [pc, #52]	; (800698c <I2SEx_RxISR_I2SExt+0x90>)
 8006958:	428b      	cmp	r3, r1
 800695a:	d101      	bne.n	8006960 <I2SEx_RxISR_I2SExt+0x64>
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <I2SEx_RxISR_I2SExt+0x94>)
 800695e:	e001      	b.n	8006964 <I2SEx_RxISR_I2SExt+0x68>
 8006960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006968:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ff03 	bl	8006788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40003800 	.word	0x40003800
 8006990:	40003400 	.word	0x40003400

08006994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e264      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d075      	beq.n	8006a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069b2:	4ba3      	ldr	r3, [pc, #652]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d00c      	beq.n	80069d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069be:	4ba0      	ldr	r3, [pc, #640]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069c6:	2b08      	cmp	r3, #8
 80069c8:	d112      	bne.n	80069f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ca:	4b9d      	ldr	r3, [pc, #628]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d6:	d10b      	bne.n	80069f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d8:	4b99      	ldr	r3, [pc, #612]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d05b      	beq.n	8006a9c <HAL_RCC_OscConfig+0x108>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d157      	bne.n	8006a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e23f      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f8:	d106      	bne.n	8006a08 <HAL_RCC_OscConfig+0x74>
 80069fa:	4b91      	ldr	r3, [pc, #580]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a90      	ldr	r2, [pc, #576]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e01d      	b.n	8006a44 <HAL_RCC_OscConfig+0xb0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a10:	d10c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x98>
 8006a12:	4b8b      	ldr	r3, [pc, #556]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a8a      	ldr	r2, [pc, #552]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4b88      	ldr	r3, [pc, #544]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a87      	ldr	r2, [pc, #540]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e00b      	b.n	8006a44 <HAL_RCC_OscConfig+0xb0>
 8006a2c:	4b84      	ldr	r3, [pc, #528]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a83      	ldr	r2, [pc, #524]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	4b81      	ldr	r3, [pc, #516]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a80      	ldr	r2, [pc, #512]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d013      	beq.n	8006a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fb ffd6 	bl	80029fc <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a54:	f7fb ffd2 	bl	80029fc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e204      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	4b76      	ldr	r3, [pc, #472]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0xc0>
 8006a72:	e014      	b.n	8006a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a74:	f7fb ffc2 	bl	80029fc <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a7c:	f7fb ffbe 	bl	80029fc <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	; 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e1f0      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0xe8>
 8006a9a:	e000      	b.n	8006a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d063      	beq.n	8006b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aaa:	4b65      	ldr	r3, [pc, #404]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00b      	beq.n	8006ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab6:	4b62      	ldr	r3, [pc, #392]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	d11c      	bne.n	8006afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ac2:	4b5f      	ldr	r3, [pc, #380]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d116      	bne.n	8006afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ace:	4b5c      	ldr	r3, [pc, #368]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x152>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d001      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e1c4      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae6:	4b56      	ldr	r3, [pc, #344]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4952      	ldr	r1, [pc, #328]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afa:	e03a      	b.n	8006b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d020      	beq.n	8006b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b04:	4b4f      	ldr	r3, [pc, #316]	; (8006c44 <HAL_RCC_OscConfig+0x2b0>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0a:	f7fb ff77 	bl	80029fc <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b12:	f7fb ff73 	bl	80029fc <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e1a5      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b24:	4b46      	ldr	r3, [pc, #280]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0f0      	beq.n	8006b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b30:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	4940      	ldr	r1, [pc, #256]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	600b      	str	r3, [r1, #0]
 8006b44:	e015      	b.n	8006b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b46:	4b3f      	ldr	r3, [pc, #252]	; (8006c44 <HAL_RCC_OscConfig+0x2b0>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fb ff56 	bl	80029fc <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b54:	f7fb ff52 	bl	80029fc <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e184      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b66:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d030      	beq.n	8006be0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d016      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b86:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <HAL_RCC_OscConfig+0x2b4>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8c:	f7fb ff36 	bl	80029fc <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b94:	f7fb ff32 	bl	80029fc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e164      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba6:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x200>
 8006bb2:	e015      	b.n	8006be0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <HAL_RCC_OscConfig+0x2b4>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bba:	f7fb ff1f 	bl	80029fc <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bc2:	f7fb ff1b 	bl	80029fc <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e14d      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f0      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80a0 	beq.w	8006d2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	4a0e      	ldr	r2, [pc, #56]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1e:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <HAL_RCC_OscConfig+0x2b8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d121      	bne.n	8006c6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c2a:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <HAL_RCC_OscConfig+0x2b8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a07      	ldr	r2, [pc, #28]	; (8006c4c <HAL_RCC_OscConfig+0x2b8>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c36:	f7fb fee1 	bl	80029fc <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3c:	e011      	b.n	8006c62 <HAL_RCC_OscConfig+0x2ce>
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	42470000 	.word	0x42470000
 8006c48:	42470e80 	.word	0x42470e80
 8006c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c50:	f7fb fed4 	bl	80029fc <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e106      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c62:	4b85      	ldr	r3, [pc, #532]	; (8006e78 <HAL_RCC_OscConfig+0x4e4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d106      	bne.n	8006c84 <HAL_RCC_OscConfig+0x2f0>
 8006c76:	4b81      	ldr	r3, [pc, #516]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	4a80      	ldr	r2, [pc, #512]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	6713      	str	r3, [r2, #112]	; 0x70
 8006c82:	e01c      	b.n	8006cbe <HAL_RCC_OscConfig+0x32a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	d10c      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x312>
 8006c8c:	4b7b      	ldr	r3, [pc, #492]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4a7a      	ldr	r2, [pc, #488]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006c92:	f043 0304 	orr.w	r3, r3, #4
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
 8006c98:	4b78      	ldr	r3, [pc, #480]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9c:	4a77      	ldr	r2, [pc, #476]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca4:	e00b      	b.n	8006cbe <HAL_RCC_OscConfig+0x32a>
 8006ca6:	4b75      	ldr	r3, [pc, #468]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	4a74      	ldr	r2, [pc, #464]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb2:	4b72      	ldr	r3, [pc, #456]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	4a71      	ldr	r2, [pc, #452]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006cb8:	f023 0304 	bic.w	r3, r3, #4
 8006cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d015      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc6:	f7fb fe99 	bl	80029fc <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ccc:	e00a      	b.n	8006ce4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cce:	f7fb fe95 	bl	80029fc <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e0c5      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce4:	4b65      	ldr	r3, [pc, #404]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0ee      	beq.n	8006cce <HAL_RCC_OscConfig+0x33a>
 8006cf0:	e014      	b.n	8006d1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf2:	f7fb fe83 	bl	80029fc <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cf8:	e00a      	b.n	8006d10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cfa:	f7fb fe7f 	bl	80029fc <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e0af      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d10:	4b5a      	ldr	r3, [pc, #360]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1ee      	bne.n	8006cfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d105      	bne.n	8006d2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d22:	4b56      	ldr	r3, [pc, #344]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	4a55      	ldr	r2, [pc, #340]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 809b 	beq.w	8006e6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d38:	4b50      	ldr	r3, [pc, #320]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d05c      	beq.n	8006dfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d141      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4c:	4b4c      	ldr	r3, [pc, #304]	; (8006e80 <HAL_RCC_OscConfig+0x4ec>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d52:	f7fb fe53 	bl	80029fc <HAL_GetTick>
 8006d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d58:	e008      	b.n	8006d6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d5a:	f7fb fe4f 	bl	80029fc <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e081      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6c:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1f0      	bne.n	8006d5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	019b      	lsls	r3, r3, #6
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	3b01      	subs	r3, #1
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	061b      	lsls	r3, r3, #24
 8006d9c:	4937      	ldr	r1, [pc, #220]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006da2:	4b37      	ldr	r3, [pc, #220]	; (8006e80 <HAL_RCC_OscConfig+0x4ec>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7fb fe28 	bl	80029fc <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fb fe24 	bl	80029fc <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e056      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc2:	4b2e      	ldr	r3, [pc, #184]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f0      	beq.n	8006db0 <HAL_RCC_OscConfig+0x41c>
 8006dce:	e04e      	b.n	8006e6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <HAL_RCC_OscConfig+0x4ec>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd6:	f7fb fe11 	bl	80029fc <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dde:	f7fb fe0d 	bl	80029fc <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e03f      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df0:	4b22      	ldr	r3, [pc, #136]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f0      	bne.n	8006dde <HAL_RCC_OscConfig+0x44a>
 8006dfc:	e037      	b.n	8006e6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e032      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e0a:	4b1c      	ldr	r3, [pc, #112]	; (8006e7c <HAL_RCC_OscConfig+0x4e8>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d028      	beq.n	8006e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d121      	bne.n	8006e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d11a      	bne.n	8006e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d111      	bne.n	8006e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	3b01      	subs	r3, #1
 8006e54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d107      	bne.n	8006e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d001      	beq.n	8006e6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40007000 	.word	0x40007000
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	42470060 	.word	0x42470060

08006e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0cc      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e98:	4b68      	ldr	r3, [pc, #416]	; (800703c <HAL_RCC_ClockConfig+0x1b8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d90c      	bls.n	8006ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b65      	ldr	r3, [pc, #404]	; (800703c <HAL_RCC_ClockConfig+0x1b8>)
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b63      	ldr	r3, [pc, #396]	; (800703c <HAL_RCC_ClockConfig+0x1b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0b8      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d020      	beq.n	8006f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ed8:	4b59      	ldr	r3, [pc, #356]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	4a58      	ldr	r2, [pc, #352]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ef0:	4b53      	ldr	r3, [pc, #332]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4a52      	ldr	r2, [pc, #328]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006efc:	4b50      	ldr	r3, [pc, #320]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	494d      	ldr	r1, [pc, #308]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d044      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d107      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f22:	4b47      	ldr	r3, [pc, #284]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d119      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e07f      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d003      	beq.n	8006f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d107      	bne.n	8006f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f42:	4b3f      	ldr	r3, [pc, #252]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e06f      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f52:	4b3b      	ldr	r3, [pc, #236]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e067      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f62:	4b37      	ldr	r3, [pc, #220]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f023 0203 	bic.w	r2, r3, #3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4934      	ldr	r1, [pc, #208]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f74:	f7fb fd42 	bl	80029fc <HAL_GetTick>
 8006f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f7c:	f7fb fd3e 	bl	80029fc <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e04f      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f92:	4b2b      	ldr	r3, [pc, #172]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 020c 	and.w	r2, r3, #12
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d1eb      	bne.n	8006f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa4:	4b25      	ldr	r3, [pc, #148]	; (800703c <HAL_RCC_ClockConfig+0x1b8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d20c      	bcs.n	8006fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb2:	4b22      	ldr	r3, [pc, #136]	; (800703c <HAL_RCC_ClockConfig+0x1b8>)
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b20      	ldr	r3, [pc, #128]	; (800703c <HAL_RCC_ClockConfig+0x1b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e032      	b.n	8007032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fd8:	4b19      	ldr	r3, [pc, #100]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4916      	ldr	r1, [pc, #88]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0308 	and.w	r3, r3, #8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ff6:	4b12      	ldr	r3, [pc, #72]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	490e      	ldr	r1, [pc, #56]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	4313      	orrs	r3, r2
 8007008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800700a:	f000 f821 	bl	8007050 <HAL_RCC_GetSysClockFreq>
 800700e:	4602      	mov	r2, r0
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	490a      	ldr	r1, [pc, #40]	; (8007044 <HAL_RCC_ClockConfig+0x1c0>)
 800701c:	5ccb      	ldrb	r3, [r1, r3]
 800701e:	fa22 f303 	lsr.w	r3, r2, r3
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <HAL_RCC_ClockConfig+0x1c4>)
 8007024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <HAL_RCC_ClockConfig+0x1c8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f7fb fb70 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	40023c00 	.word	0x40023c00
 8007040:	40023800 	.word	0x40023800
 8007044:	08010f30 	.word	0x08010f30
 8007048:	20000000 	.word	0x20000000
 800704c:	20000004 	.word	0x20000004

08007050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	607b      	str	r3, [r7, #4]
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	2300      	movs	r3, #0
 8007062:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007068:	4b67      	ldr	r3, [pc, #412]	; (8007208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 030c 	and.w	r3, r3, #12
 8007070:	2b08      	cmp	r3, #8
 8007072:	d00d      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x40>
 8007074:	2b08      	cmp	r3, #8
 8007076:	f200 80bd 	bhi.w	80071f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_RCC_GetSysClockFreq+0x34>
 800707e:	2b04      	cmp	r3, #4
 8007080:	d003      	beq.n	800708a <HAL_RCC_GetSysClockFreq+0x3a>
 8007082:	e0b7      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007084:	4b61      	ldr	r3, [pc, #388]	; (800720c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007086:	60bb      	str	r3, [r7, #8]
       break;
 8007088:	e0b7      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800708a:	4b61      	ldr	r3, [pc, #388]	; (8007210 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800708c:	60bb      	str	r3, [r7, #8]
      break;
 800708e:	e0b4      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007090:	4b5d      	ldr	r3, [pc, #372]	; (8007208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007098:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800709a:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d04d      	beq.n	8007142 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070a6:	4b58      	ldr	r3, [pc, #352]	; (8007208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	099b      	lsrs	r3, r3, #6
 80070ac:	461a      	mov	r2, r3
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070b6:	f04f 0100 	mov.w	r1, #0
 80070ba:	ea02 0800 	and.w	r8, r2, r0
 80070be:	ea03 0901 	and.w	r9, r3, r1
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	f04f 0200 	mov.w	r2, #0
 80070ca:	f04f 0300 	mov.w	r3, #0
 80070ce:	014b      	lsls	r3, r1, #5
 80070d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070d4:	0142      	lsls	r2, r0, #5
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	ebb0 0008 	subs.w	r0, r0, r8
 80070de:	eb61 0109 	sbc.w	r1, r1, r9
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	018b      	lsls	r3, r1, #6
 80070ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070f0:	0182      	lsls	r2, r0, #6
 80070f2:	1a12      	subs	r2, r2, r0
 80070f4:	eb63 0301 	sbc.w	r3, r3, r1
 80070f8:	f04f 0000 	mov.w	r0, #0
 80070fc:	f04f 0100 	mov.w	r1, #0
 8007100:	00d9      	lsls	r1, r3, #3
 8007102:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007106:	00d0      	lsls	r0, r2, #3
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	eb12 0208 	adds.w	r2, r2, r8
 8007110:	eb43 0309 	adc.w	r3, r3, r9
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f04f 0100 	mov.w	r1, #0
 800711c:	0259      	lsls	r1, r3, #9
 800711e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007122:	0250      	lsls	r0, r2, #9
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4610      	mov	r0, r2
 800712a:	4619      	mov	r1, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	461a      	mov	r2, r3
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	f7f9 fd1a 	bl	8000b6c <__aeabi_uldivmod>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4613      	mov	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e04a      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007142:	4b31      	ldr	r3, [pc, #196]	; (8007208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	099b      	lsrs	r3, r3, #6
 8007148:	461a      	mov	r2, r3
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007152:	f04f 0100 	mov.w	r1, #0
 8007156:	ea02 0400 	and.w	r4, r2, r0
 800715a:	ea03 0501 	and.w	r5, r3, r1
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	014b      	lsls	r3, r1, #5
 800716c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007170:	0142      	lsls	r2, r0, #5
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	1b00      	subs	r0, r0, r4
 8007178:	eb61 0105 	sbc.w	r1, r1, r5
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	018b      	lsls	r3, r1, #6
 8007186:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800718a:	0182      	lsls	r2, r0, #6
 800718c:	1a12      	subs	r2, r2, r0
 800718e:	eb63 0301 	sbc.w	r3, r3, r1
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	00d9      	lsls	r1, r3, #3
 800719c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a0:	00d0      	lsls	r0, r2, #3
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	1912      	adds	r2, r2, r4
 80071a8:	eb45 0303 	adc.w	r3, r5, r3
 80071ac:	f04f 0000 	mov.w	r0, #0
 80071b0:	f04f 0100 	mov.w	r1, #0
 80071b4:	0299      	lsls	r1, r3, #10
 80071b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071ba:	0290      	lsls	r0, r2, #10
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4610      	mov	r0, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	f7f9 fcce 	bl	8000b6c <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4613      	mov	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	3301      	adds	r3, #1
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	60bb      	str	r3, [r7, #8]
      break;
 80071f2:	e002      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071f6:	60bb      	str	r3, [r7, #8]
      break;
 80071f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071fa:	68bb      	ldr	r3, [r7, #8]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007206:	bf00      	nop
 8007208:	40023800 	.word	0x40023800
 800720c:	00f42400 	.word	0x00f42400
 8007210:	007a1200 	.word	0x007a1200

08007214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007218:	4b03      	ldr	r3, [pc, #12]	; (8007228 <HAL_RCC_GetHCLKFreq+0x14>)
 800721a:	681b      	ldr	r3, [r3, #0]
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20000000 	.word	0x20000000

0800722c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007230:	f7ff fff0 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0a9b      	lsrs	r3, r3, #10
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	08010f40 	.word	0x08010f40

08007254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007258:	f7ff ffdc 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	0b5b      	lsrs	r3, r3, #13
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4903      	ldr	r1, [pc, #12]	; (8007278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007270:	4618      	mov	r0, r3
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40023800 	.word	0x40023800
 8007278:	08010f40 	.word	0x08010f40

0800727c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220f      	movs	r2, #15
 800728a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800728c:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <HAL_RCC_GetClockConfig+0x5c>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0203 	and.w	r2, r3, #3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <HAL_RCC_GetClockConfig+0x5c>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <HAL_RCC_GetClockConfig+0x5c>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <HAL_RCC_GetClockConfig+0x5c>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	08db      	lsrs	r3, r3, #3
 80072b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <HAL_RCC_GetClockConfig+0x60>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0207 	and.w	r2, r3, #7
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	601a      	str	r2, [r3, #0]
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40023800 	.word	0x40023800
 80072dc:	40023c00 	.word	0x40023c00

080072e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d105      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007304:	2b00      	cmp	r3, #0
 8007306:	d035      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007308:	4b62      	ldr	r3, [pc, #392]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800730e:	f7fb fb75 	bl	80029fc <HAL_GetTick>
 8007312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007314:	e008      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007316:	f7fb fb71 	bl	80029fc <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e0b0      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007328:	4b5b      	ldr	r3, [pc, #364]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f0      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	019a      	lsls	r2, r3, #6
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	071b      	lsls	r3, r3, #28
 8007340:	4955      	ldr	r1, [pc, #340]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007348:	4b52      	ldr	r3, [pc, #328]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800734e:	f7fb fb55 	bl	80029fc <HAL_GetTick>
 8007352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007354:	e008      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007356:	f7fb fb51 	bl	80029fc <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e090      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007368:	4b4b      	ldr	r3, [pc, #300]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8083 	beq.w	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	4b44      	ldr	r3, [pc, #272]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	4a43      	ldr	r2, [pc, #268]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800738c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007390:	6413      	str	r3, [r2, #64]	; 0x40
 8007392:	4b41      	ldr	r3, [pc, #260]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800739e:	4b3f      	ldr	r3, [pc, #252]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a3e      	ldr	r2, [pc, #248]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073aa:	f7fb fb27 	bl	80029fc <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073b0:	e008      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073b2:	f7fb fb23 	bl	80029fc <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e062      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073c4:	4b35      	ldr	r3, [pc, #212]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073d0:	4b31      	ldr	r3, [pc, #196]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d02f      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d028      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ee:	4b2a      	ldr	r3, [pc, #168]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073f8:	4b29      	ldr	r3, [pc, #164]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073fe:	4b28      	ldr	r3, [pc, #160]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007404:	4a24      	ldr	r2, [pc, #144]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800740a:	4b23      	ldr	r3, [pc, #140]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b01      	cmp	r3, #1
 8007414:	d114      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007416:	f7fb faf1 	bl	80029fc <HAL_GetTick>
 800741a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741c:	e00a      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800741e:	f7fb faed 	bl	80029fc <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	f241 3288 	movw	r2, #5000	; 0x1388
 800742c:	4293      	cmp	r3, r2
 800742e:	d901      	bls.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e02a      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007434:	4b18      	ldr	r3, [pc, #96]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0ee      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800744c:	d10d      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800745e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007462:	490d      	ldr	r1, [pc, #52]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007464:	4313      	orrs	r3, r2
 8007466:	608b      	str	r3, [r1, #8]
 8007468:	e005      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4a0a      	ldr	r2, [pc, #40]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007470:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007474:	6093      	str	r3, [r2, #8]
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007478:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007482:	4905      	ldr	r1, [pc, #20]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007484:	4313      	orrs	r3, r2
 8007486:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	42470068 	.word	0x42470068
 8007498:	40023800 	.word	0x40023800
 800749c:	40007000 	.word	0x40007000
 80074a0:	42470e40 	.word	0x42470e40

080074a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d13e      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074c2:	4b23      	ldr	r3, [pc, #140]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d12f      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074da:	617b      	str	r3, [r7, #20]
          break;
 80074dc:	e02f      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ea:	d108      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074ec:	4b18      	ldr	r3, [pc, #96]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f4:	4a18      	ldr	r2, [pc, #96]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	e007      	b.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007506:	4a15      	ldr	r2, [pc, #84]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007514:	099b      	lsrs	r3, r3, #6
 8007516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	fb02 f303 	mul.w	r3, r2, r3
 8007520:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007528:	0f1b      	lsrs	r3, r3, #28
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	617b      	str	r3, [r7, #20]
          break;
 8007536:	e002      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
          break;
 800753c:	bf00      	nop
        }
      }
      break;
 800753e:	bf00      	nop
    }
  }
  return frequency;
 8007540:	697b      	ldr	r3, [r7, #20]
}
 8007542:	4618      	mov	r0, r3
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40023800 	.word	0x40023800
 8007554:	00bb8000 	.word	0x00bb8000
 8007558:	007a1200 	.word	0x007a1200
 800755c:	00f42400 	.word	0x00f42400

08007560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e07b      	b.n	800766a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007582:	d009      	beq.n	8007598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	61da      	str	r2, [r3, #28]
 800758a:	e005      	b.n	8007598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fa ffee 	bl	8002594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	ea42 0103 	orr.w	r1, r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	f003 0104 	and.w	r1, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	f003 0210 	and.w	r2, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e041      	b.n	8007708 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fa ffc3 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f000 fa91 	bl	8007bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d001      	beq.n	8007728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e04e      	b.n	80077c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d022      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007752:	d01d      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d018      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <HAL_TIM_Base_Start_IT+0xcc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d013      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00e      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d009      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x80>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a18      	ldr	r2, [pc, #96]	; (80077ec <HAL_TIM_Base_Start_IT+0xdc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d111      	bne.n	80077b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 0307 	and.w	r3, r3, #7
 800779a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b06      	cmp	r3, #6
 80077a0:	d010      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b2:	e007      	b.n	80077c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40010000 	.word	0x40010000
 80077d8:	40000400 	.word	0x40000400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40000c00 	.word	0x40000c00
 80077e4:	40010400 	.word	0x40010400
 80077e8:	40014000 	.word	0x40014000
 80077ec:	40001800 	.word	0x40001800

080077f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b02      	cmp	r3, #2
 8007804:	d122      	bne.n	800784c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d11b      	bne.n	800784c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0202 	mvn.w	r2, #2
 800781c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9b2 	bl	8007b9c <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9a4 	bl	8007b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9b5 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b04      	cmp	r3, #4
 8007858:	d122      	bne.n	80078a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b04      	cmp	r3, #4
 8007866:	d11b      	bne.n	80078a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0204 	mvn.w	r2, #4
 8007870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f988 	bl	8007b9c <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f97a 	bl	8007b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f98b 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d122      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d11b      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0208 	mvn.w	r2, #8
 80078c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2204      	movs	r2, #4
 80078ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f95e 	bl	8007b9c <HAL_TIM_IC_CaptureCallback>
 80078e0:	e005      	b.n	80078ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f950 	bl	8007b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f961 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d122      	bne.n	8007948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b10      	cmp	r3, #16
 800790e:	d11b      	bne.n	8007948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f06f 0210 	mvn.w	r2, #16
 8007918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2208      	movs	r2, #8
 800791e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f934 	bl	8007b9c <HAL_TIM_IC_CaptureCallback>
 8007934:	e005      	b.n	8007942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f926 	bl	8007b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f937 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10e      	bne.n	8007974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d107      	bne.n	8007974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0201 	mvn.w	r2, #1
 800796c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fa f838 	bl	80019e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798c:	2b80      	cmp	r3, #128	; 0x80
 800798e:	d107      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fadc 	bl	8007f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079aa:	2b40      	cmp	r3, #64	; 0x40
 80079ac:	d10e      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8fc 	bl	8007bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d10e      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d107      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0220 	mvn.w	r2, #32
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 faa6 	bl	8007f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_TIM_ConfigClockSource+0x18>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e0b3      	b.n	8007b80 <HAL_TIM_ConfigClockSource+0x180>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a50:	d03e      	beq.n	8007ad0 <HAL_TIM_ConfigClockSource+0xd0>
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a56:	f200 8087 	bhi.w	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	f000 8085 	beq.w	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a66:	d87f      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a68:	2b70      	cmp	r3, #112	; 0x70
 8007a6a:	d01a      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0xa2>
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	d87b      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a70:	2b60      	cmp	r3, #96	; 0x60
 8007a72:	d050      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x116>
 8007a74:	2b60      	cmp	r3, #96	; 0x60
 8007a76:	d877      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a78:	2b50      	cmp	r3, #80	; 0x50
 8007a7a:	d03c      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0xf6>
 8007a7c:	2b50      	cmp	r3, #80	; 0x50
 8007a7e:	d873      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d058      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x136>
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d86f      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d064      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x156>
 8007a8c:	2b30      	cmp	r3, #48	; 0x30
 8007a8e:	d86b      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d060      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x156>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d867      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d05c      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x156>
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d05a      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007aa0:	e062      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6899      	ldr	r1, [r3, #8]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f000 f9ab 	bl	8007e0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ac4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	609a      	str	r2, [r3, #8]
      break;
 8007ace:	e04e      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	6899      	ldr	r1, [r3, #8]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f000 f994 	bl	8007e0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689a      	ldr	r2, [r3, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af2:	609a      	str	r2, [r3, #8]
      break;
 8007af4:	e03b      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f000 f908 	bl	8007d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2150      	movs	r1, #80	; 0x50
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 f961 	bl	8007dd6 <TIM_ITRx_SetConfig>
      break;
 8007b14:	e02b      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 f927 	bl	8007d76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2160      	movs	r1, #96	; 0x60
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 f951 	bl	8007dd6 <TIM_ITRx_SetConfig>
      break;
 8007b34:	e01b      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f000 f8e8 	bl	8007d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2140      	movs	r1, #64	; 0x40
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f941 	bl	8007dd6 <TIM_ITRx_SetConfig>
      break;
 8007b54:	e00b      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f000 f938 	bl	8007dd6 <TIM_ITRx_SetConfig>
        break;
 8007b66:	e002      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e000      	b.n	8007b6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a40      	ldr	r2, [pc, #256]	; (8007cec <TIM_Base_SetConfig+0x114>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <TIM_Base_SetConfig+0x40>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf6:	d00f      	beq.n	8007c18 <TIM_Base_SetConfig+0x40>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a3d      	ldr	r2, [pc, #244]	; (8007cf0 <TIM_Base_SetConfig+0x118>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00b      	beq.n	8007c18 <TIM_Base_SetConfig+0x40>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a3c      	ldr	r2, [pc, #240]	; (8007cf4 <TIM_Base_SetConfig+0x11c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d007      	beq.n	8007c18 <TIM_Base_SetConfig+0x40>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a3b      	ldr	r2, [pc, #236]	; (8007cf8 <TIM_Base_SetConfig+0x120>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_Base_SetConfig+0x40>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a3a      	ldr	r2, [pc, #232]	; (8007cfc <TIM_Base_SetConfig+0x124>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d108      	bne.n	8007c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a2f      	ldr	r2, [pc, #188]	; (8007cec <TIM_Base_SetConfig+0x114>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d02b      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c38:	d027      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a2c      	ldr	r2, [pc, #176]	; (8007cf0 <TIM_Base_SetConfig+0x118>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d023      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a2b      	ldr	r2, [pc, #172]	; (8007cf4 <TIM_Base_SetConfig+0x11c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d01f      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2a      	ldr	r2, [pc, #168]	; (8007cf8 <TIM_Base_SetConfig+0x120>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d01b      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a29      	ldr	r2, [pc, #164]	; (8007cfc <TIM_Base_SetConfig+0x124>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d017      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a28      	ldr	r2, [pc, #160]	; (8007d00 <TIM_Base_SetConfig+0x128>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a27      	ldr	r2, [pc, #156]	; (8007d04 <TIM_Base_SetConfig+0x12c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00f      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a26      	ldr	r2, [pc, #152]	; (8007d08 <TIM_Base_SetConfig+0x130>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00b      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a25      	ldr	r2, [pc, #148]	; (8007d0c <TIM_Base_SetConfig+0x134>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d007      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a24      	ldr	r2, [pc, #144]	; (8007d10 <TIM_Base_SetConfig+0x138>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d003      	beq.n	8007c8a <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a23      	ldr	r2, [pc, #140]	; (8007d14 <TIM_Base_SetConfig+0x13c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d108      	bne.n	8007c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <TIM_Base_SetConfig+0x114>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_Base_SetConfig+0xf8>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a0c      	ldr	r2, [pc, #48]	; (8007cfc <TIM_Base_SetConfig+0x124>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d103      	bne.n	8007cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	615a      	str	r2, [r3, #20]
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40010000 	.word	0x40010000
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800
 8007cf8:	40000c00 	.word	0x40000c00
 8007cfc:	40010400 	.word	0x40010400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800
 8007d0c:	40001800 	.word	0x40001800
 8007d10:	40001c00 	.word	0x40001c00
 8007d14:	40002000 	.word	0x40002000

08007d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f023 0201 	bic.w	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f023 030a 	bic.w	r3, r3, #10
 8007d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	621a      	str	r2, [r3, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	371c      	adds	r7, #28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b087      	sub	sp, #28
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f023 0210 	bic.w	r2, r3, #16
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	031b      	lsls	r3, r3, #12
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007db2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	621a      	str	r2, [r3, #32]
}
 8007dca:	bf00      	nop
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f043 0307 	orr.w	r3, r3, #7
 8007df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	609a      	str	r2, [r3, #8]
}
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	021a      	lsls	r2, r3, #8
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	609a      	str	r2, [r3, #8]
}
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e05a      	b.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a21      	ldr	r2, [pc, #132]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d022      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb0:	d01d      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1d      	ldr	r2, [pc, #116]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d018      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a1a      	ldr	r2, [pc, #104]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00e      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d009      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a15      	ldr	r2, [pc, #84]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d10c      	bne.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40010000 	.word	0x40010000
 8007f2c:	40000400 	.word	0x40000400
 8007f30:	40000800 	.word	0x40000800
 8007f34:	40000c00 	.word	0x40000c00
 8007f38:	40010400 	.word	0x40010400
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40001800 	.word	0x40001800

08007f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e03f      	b.n	8007ffe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fa fb6c 	bl	8002670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2224      	movs	r2, #36	; 0x24
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fcbd 	bl	8008930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b08a      	sub	sp, #40	; 0x28
 800800a:	af02      	add	r7, sp, #8
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b20      	cmp	r3, #32
 8008024:	d17c      	bne.n	8008120 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <HAL_UART_Transmit+0x2c>
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e075      	b.n	8008122 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_UART_Transmit+0x3e>
 8008040:	2302      	movs	r3, #2
 8008042:	e06e      	b.n	8008122 <HAL_UART_Transmit+0x11c>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2221      	movs	r2, #33	; 0x21
 8008056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800805a:	f7fa fccf 	bl	80029fc <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008074:	d108      	bne.n	8008088 <HAL_UART_Transmit+0x82>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e003      	b.n	8008090 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008098:	e02a      	b.n	80080f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fab9 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e036      	b.n	8008122 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	3302      	adds	r3, #2
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e007      	b.n	80080e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1cf      	bne.n	800809a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2200      	movs	r2, #0
 8008102:	2140      	movs	r1, #64	; 0x40
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fa89 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e006      	b.n	8008122 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e000      	b.n	8008122 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b08a      	sub	sp, #40	; 0x28
 800812e:	af02      	add	r7, sp, #8
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b20      	cmp	r3, #32
 8008148:	f040 808c 	bne.w	8008264 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Receive+0x2e>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e084      	b.n	8008266 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_UART_Receive+0x40>
 8008166:	2302      	movs	r3, #2
 8008168:	e07d      	b.n	8008266 <HAL_UART_Receive+0x13c>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2222      	movs	r2, #34	; 0x22
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008186:	f7fa fc39 	bl	80029fc <HAL_GetTick>
 800818a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	88fa      	ldrh	r2, [r7, #6]
 8008196:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a0:	d108      	bne.n	80081b4 <HAL_UART_Receive+0x8a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d104      	bne.n	80081b4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	61bb      	str	r3, [r7, #24]
 80081b2:	e003      	b.n	80081bc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80081c4:	e043      	b.n	800824e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2200      	movs	r2, #0
 80081ce:	2120      	movs	r1, #32
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fa23 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e042      	b.n	8008266 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10c      	bne.n	8008200 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	3302      	adds	r3, #2
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	e01f      	b.n	8008240 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008208:	d007      	beq.n	800821a <HAL_UART_Receive+0xf0>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <HAL_UART_Receive+0xfe>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	b2da      	uxtb	r2, r3
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	e008      	b.n	800823a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008234:	b2da      	uxtb	r2, r3
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	3301      	adds	r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1b6      	bne.n	80081c6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008264:	2302      	movs	r3, #2
  }
}
 8008266:	4618      	mov	r0, r3
 8008268:	3720      	adds	r7, #32
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	; 0x28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008294:	2300      	movs	r3, #0
 8008296:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10d      	bne.n	80082c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <HAL_UART_IRQHandler+0x52>
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 faa1 	bl	8008802 <UART_Receive_IT>
      return;
 80082c0:	e17c      	b.n	80085bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80b1 	beq.w	800842c <HAL_UART_IRQHandler+0x1bc>
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <HAL_UART_IRQHandler+0x70>
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80a6 	beq.w	800842c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_UART_IRQHandler+0x90>
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	f043 0201 	orr.w	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <HAL_UART_IRQHandler+0xb0>
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	f043 0202 	orr.w	r2, r3, #2
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_UART_IRQHandler+0xd0>
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	f043 0204 	orr.w	r2, r3, #4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	f003 0308 	and.w	r3, r3, #8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00f      	beq.n	800836a <HAL_UART_IRQHandler+0xfa>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d104      	bne.n	800835e <HAL_UART_IRQHandler+0xee>
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f043 0208 	orr.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 811f 	beq.w	80085b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <HAL_UART_IRQHandler+0x11e>
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa3a 	bl	8008802 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <HAL_UART_IRQHandler+0x146>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d031      	beq.n	800841a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f97a 	bl	80086b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d123      	bne.n	8008412 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	695a      	ldr	r2, [r3, #20]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d013      	beq.n	800840a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	4a77      	ldr	r2, [pc, #476]	; (80085c4 <HAL_UART_IRQHandler+0x354>)
 80083e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fa fc86 	bl	8002d00 <HAL_DMA_Abort_IT>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d016      	beq.n	8008428 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008404:	4610      	mov	r0, r2
 8008406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	e00e      	b.n	8008428 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f8f0 	bl	80085f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008410:	e00a      	b.n	8008428 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f8ec 	bl	80085f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008418:	e006      	b.n	8008428 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8e8 	bl	80085f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008426:	e0c4      	b.n	80085b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008428:	bf00      	nop
    return;
 800842a:	e0c2      	b.n	80085b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 80a2 	bne.w	800857a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 809c 	beq.w	800857a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8096 	beq.w	800857a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d14f      	bne.n	8008512 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800847c:	8a3b      	ldrh	r3, [r7, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8099 	beq.w	80085b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008488:	8a3a      	ldrh	r2, [r7, #16]
 800848a:	429a      	cmp	r2, r3
 800848c:	f080 8093 	bcs.w	80085b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	8a3a      	ldrh	r2, [r7, #16]
 8008494:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	d02b      	beq.n	80084fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	695a      	ldr	r2, [r3, #20]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0201 	bic.w	r2, r2, #1
 80084c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	695a      	ldr	r2, [r3, #20]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0210 	bic.w	r2, r2, #16
 80084ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fa fb93 	bl	8002c20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008502:	b29b      	uxth	r3, r3
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	b29b      	uxth	r3, r3
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f87a 	bl	8008604 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008510:	e051      	b.n	80085b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800851a:	b29b      	uxth	r3, r3
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d047      	beq.n	80085ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800852a:	8a7b      	ldrh	r3, [r7, #18]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d044      	beq.n	80085ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800853e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	695a      	ldr	r2, [r3, #20]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0201 	bic.w	r2, r2, #1
 800854e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0210 	bic.w	r2, r2, #16
 800856c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800856e:	8a7b      	ldrh	r3, [r7, #18]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f846 	bl	8008604 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008578:	e01f      	b.n	80085ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008580:	2b00      	cmp	r3, #0
 8008582:	d008      	beq.n	8008596 <HAL_UART_IRQHandler+0x326>
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f8cf 	bl	8008732 <UART_Transmit_IT>
    return;
 8008594:	e012      	b.n	80085bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00d      	beq.n	80085bc <HAL_UART_IRQHandler+0x34c>
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d008      	beq.n	80085bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f911 	bl	80087d2 <UART_EndTransmit_IT>
    return;
 80085b0:	e004      	b.n	80085bc <HAL_UART_IRQHandler+0x34c>
    return;
 80085b2:	bf00      	nop
 80085b4:	e002      	b.n	80085bc <HAL_UART_IRQHandler+0x34c>
      return;
 80085b6:	bf00      	nop
 80085b8:	e000      	b.n	80085bc <HAL_UART_IRQHandler+0x34c>
      return;
 80085ba:	bf00      	nop
  }
}
 80085bc:	3728      	adds	r7, #40	; 0x28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	0800870b 	.word	0x0800870b

080085c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862c:	e02c      	b.n	8008688 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008634:	d028      	beq.n	8008688 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <UART_WaitOnFlagUntilTimeout+0x30>
 800863c:	f7fa f9de 	bl	80029fc <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	429a      	cmp	r2, r3
 800864a:	d21d      	bcs.n	8008688 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800865a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695a      	ldr	r2, [r3, #20]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e00f      	b.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4013      	ands	r3, r2
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	429a      	cmp	r2, r3
 8008696:	bf0c      	ite	eq
 8008698:	2301      	moveq	r3, #1
 800869a:	2300      	movne	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d0c3      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695a      	ldr	r2, [r3, #20]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0201 	bic.w	r2, r2, #1
 80086d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d107      	bne.n	80086f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0210 	bic.w	r2, r2, #16
 80086ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff ff63 	bl	80085f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b21      	cmp	r3, #33	; 0x21
 8008744:	d13e      	bne.n	80087c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874e:	d114      	bne.n	800877a <UART_Transmit_IT+0x48>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d110      	bne.n	800877a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800876c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	1c9a      	adds	r2, r3, #2
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	621a      	str	r2, [r3, #32]
 8008778:	e008      	b.n	800878c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	1c59      	adds	r1, r3, #1
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6211      	str	r1, [r2, #32]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008790:	b29b      	uxth	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	b29b      	uxth	r3, r3
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4619      	mov	r1, r3
 800879a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10f      	bne.n	80087c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e000      	b.n	80087c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087c4:	2302      	movs	r3, #2
  }
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fee8 	bl	80085c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b22      	cmp	r3, #34	; 0x22
 8008814:	f040 8087 	bne.w	8008926 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008820:	d117      	bne.n	8008852 <UART_Receive_IT+0x50>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d113      	bne.n	8008852 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008840:	b29a      	uxth	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	1c9a      	adds	r2, r3, #2
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	629a      	str	r2, [r3, #40]	; 0x28
 8008850:	e026      	b.n	80088a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008858:	2300      	movs	r3, #0
 800885a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008864:	d007      	beq.n	8008876 <UART_Receive_IT+0x74>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <UART_Receive_IT+0x82>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	e008      	b.n	8008896 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008890:	b2da      	uxtb	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4619      	mov	r1, r3
 80088ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d136      	bne.n	8008922 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0220 	bic.w	r2, r2, #32
 80088c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695a      	ldr	r2, [r3, #20]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0201 	bic.w	r2, r2, #1
 80088e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10e      	bne.n	8008912 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0210 	bic.w	r2, r2, #16
 8008902:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fe7a 	bl	8008604 <HAL_UARTEx_RxEventCallback>
 8008910:	e002      	b.n	8008918 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fe62 	bl	80085dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	e002      	b.n	8008928 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	e000      	b.n	8008928 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008926:	2302      	movs	r3, #2
  }
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	b09f      	sub	sp, #124	; 0x7c
 8008936:	af00      	add	r7, sp, #0
 8008938:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008946:	68d9      	ldr	r1, [r3, #12]
 8008948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	ea40 0301 	orr.w	r3, r0, r1
 8008950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	431a      	orrs	r2, r3
 800895c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	431a      	orrs	r2, r3
 8008962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	4313      	orrs	r3, r2
 8008968:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800896a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008974:	f021 010c 	bic.w	r1, r1, #12
 8008978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800897e:	430b      	orrs	r3, r1
 8008980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800898c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898e:	6999      	ldr	r1, [r3, #24]
 8008990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	ea40 0301 	orr.w	r3, r0, r1
 8008998:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800899a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	4bc5      	ldr	r3, [pc, #788]	; (8008cb4 <UART_SetConfig+0x384>)
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d004      	beq.n	80089ae <UART_SetConfig+0x7e>
 80089a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4bc3      	ldr	r3, [pc, #780]	; (8008cb8 <UART_SetConfig+0x388>)
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d103      	bne.n	80089b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089ae:	f7fe fc51 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 80089b2:	6778      	str	r0, [r7, #116]	; 0x74
 80089b4:	e002      	b.n	80089bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089b6:	f7fe fc39 	bl	800722c <HAL_RCC_GetPCLK1Freq>
 80089ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089c4:	f040 80b6 	bne.w	8008b34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ca:	461c      	mov	r4, r3
 80089cc:	f04f 0500 	mov.w	r5, #0
 80089d0:	4622      	mov	r2, r4
 80089d2:	462b      	mov	r3, r5
 80089d4:	1891      	adds	r1, r2, r2
 80089d6:	6439      	str	r1, [r7, #64]	; 0x40
 80089d8:	415b      	adcs	r3, r3
 80089da:	647b      	str	r3, [r7, #68]	; 0x44
 80089dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089e0:	1912      	adds	r2, r2, r4
 80089e2:	eb45 0303 	adc.w	r3, r5, r3
 80089e6:	f04f 0000 	mov.w	r0, #0
 80089ea:	f04f 0100 	mov.w	r1, #0
 80089ee:	00d9      	lsls	r1, r3, #3
 80089f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089f4:	00d0      	lsls	r0, r2, #3
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	1911      	adds	r1, r2, r4
 80089fc:	6639      	str	r1, [r7, #96]	; 0x60
 80089fe:	416b      	adcs	r3, r5
 8008a00:	667b      	str	r3, [r7, #100]	; 0x64
 8008a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	1891      	adds	r1, r2, r2
 8008a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a10:	415b      	adcs	r3, r3
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008a1c:	f7f8 f8a6 	bl	8000b6c <__aeabi_uldivmod>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4ba5      	ldr	r3, [pc, #660]	; (8008cbc <UART_SetConfig+0x38c>)
 8008a26:	fba3 2302 	umull	r2, r3, r3, r2
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	011e      	lsls	r6, r3, #4
 8008a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a30:	461c      	mov	r4, r3
 8008a32:	f04f 0500 	mov.w	r5, #0
 8008a36:	4622      	mov	r2, r4
 8008a38:	462b      	mov	r3, r5
 8008a3a:	1891      	adds	r1, r2, r2
 8008a3c:	6339      	str	r1, [r7, #48]	; 0x30
 8008a3e:	415b      	adcs	r3, r3
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
 8008a42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a46:	1912      	adds	r2, r2, r4
 8008a48:	eb45 0303 	adc.w	r3, r5, r3
 8008a4c:	f04f 0000 	mov.w	r0, #0
 8008a50:	f04f 0100 	mov.w	r1, #0
 8008a54:	00d9      	lsls	r1, r3, #3
 8008a56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a5a:	00d0      	lsls	r0, r2, #3
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	1911      	adds	r1, r2, r4
 8008a62:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a64:	416b      	adcs	r3, r5
 8008a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f04f 0300 	mov.w	r3, #0
 8008a72:	1891      	adds	r1, r2, r2
 8008a74:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a76:	415b      	adcs	r3, r3
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a82:	f7f8 f873 	bl	8000b6c <__aeabi_uldivmod>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4b8c      	ldr	r3, [pc, #560]	; (8008cbc <UART_SetConfig+0x38c>)
 8008a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a90:	095b      	lsrs	r3, r3, #5
 8008a92:	2164      	movs	r1, #100	; 0x64
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	3332      	adds	r3, #50	; 0x32
 8008a9e:	4a87      	ldr	r2, [pc, #540]	; (8008cbc <UART_SetConfig+0x38c>)
 8008aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008aac:	441e      	add	r6, r3
 8008aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f04f 0100 	mov.w	r1, #0
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	1894      	adds	r4, r2, r2
 8008abc:	623c      	str	r4, [r7, #32]
 8008abe:	415b      	adcs	r3, r3
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ac6:	1812      	adds	r2, r2, r0
 8008ac8:	eb41 0303 	adc.w	r3, r1, r3
 8008acc:	f04f 0400 	mov.w	r4, #0
 8008ad0:	f04f 0500 	mov.w	r5, #0
 8008ad4:	00dd      	lsls	r5, r3, #3
 8008ad6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ada:	00d4      	lsls	r4, r2, #3
 8008adc:	4622      	mov	r2, r4
 8008ade:	462b      	mov	r3, r5
 8008ae0:	1814      	adds	r4, r2, r0
 8008ae2:	653c      	str	r4, [r7, #80]	; 0x50
 8008ae4:	414b      	adcs	r3, r1
 8008ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	461a      	mov	r2, r3
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	1891      	adds	r1, r2, r2
 8008af4:	61b9      	str	r1, [r7, #24]
 8008af6:	415b      	adcs	r3, r3
 8008af8:	61fb      	str	r3, [r7, #28]
 8008afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008afe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008b02:	f7f8 f833 	bl	8000b6c <__aeabi_uldivmod>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4b6c      	ldr	r3, [pc, #432]	; (8008cbc <UART_SetConfig+0x38c>)
 8008b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b10:	095b      	lsrs	r3, r3, #5
 8008b12:	2164      	movs	r1, #100	; 0x64
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	3332      	adds	r3, #50	; 0x32
 8008b1e:	4a67      	ldr	r2, [pc, #412]	; (8008cbc <UART_SetConfig+0x38c>)
 8008b20:	fba2 2303 	umull	r2, r3, r2, r3
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	f003 0207 	and.w	r2, r3, #7
 8008b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4432      	add	r2, r6
 8008b30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b32:	e0b9      	b.n	8008ca8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b36:	461c      	mov	r4, r3
 8008b38:	f04f 0500 	mov.w	r5, #0
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	462b      	mov	r3, r5
 8008b40:	1891      	adds	r1, r2, r2
 8008b42:	6139      	str	r1, [r7, #16]
 8008b44:	415b      	adcs	r3, r3
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b4c:	1912      	adds	r2, r2, r4
 8008b4e:	eb45 0303 	adc.w	r3, r5, r3
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f04f 0100 	mov.w	r1, #0
 8008b5a:	00d9      	lsls	r1, r3, #3
 8008b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b60:	00d0      	lsls	r0, r2, #3
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	eb12 0804 	adds.w	r8, r2, r4
 8008b6a:	eb43 0905 	adc.w	r9, r3, r5
 8008b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f04f 0100 	mov.w	r1, #0
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	f04f 0300 	mov.w	r3, #0
 8008b80:	008b      	lsls	r3, r1, #2
 8008b82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b86:	0082      	lsls	r2, r0, #2
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	f7f7 ffee 	bl	8000b6c <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4b49      	ldr	r3, [pc, #292]	; (8008cbc <UART_SetConfig+0x38c>)
 8008b96:	fba3 2302 	umull	r2, r3, r3, r2
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	011e      	lsls	r6, r3, #4
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f04f 0100 	mov.w	r1, #0
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	1894      	adds	r4, r2, r2
 8008bac:	60bc      	str	r4, [r7, #8]
 8008bae:	415b      	adcs	r3, r3
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bb6:	1812      	adds	r2, r2, r0
 8008bb8:	eb41 0303 	adc.w	r3, r1, r3
 8008bbc:	f04f 0400 	mov.w	r4, #0
 8008bc0:	f04f 0500 	mov.w	r5, #0
 8008bc4:	00dd      	lsls	r5, r3, #3
 8008bc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bca:	00d4      	lsls	r4, r2, #3
 8008bcc:	4622      	mov	r2, r4
 8008bce:	462b      	mov	r3, r5
 8008bd0:	1814      	adds	r4, r2, r0
 8008bd2:	64bc      	str	r4, [r7, #72]	; 0x48
 8008bd4:	414b      	adcs	r3, r1
 8008bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f04f 0100 	mov.w	r1, #0
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	008b      	lsls	r3, r1, #2
 8008bec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bf0:	0082      	lsls	r2, r0, #2
 8008bf2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bf6:	f7f7 ffb9 	bl	8000b6c <__aeabi_uldivmod>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4b2f      	ldr	r3, [pc, #188]	; (8008cbc <UART_SetConfig+0x38c>)
 8008c00:	fba3 1302 	umull	r1, r3, r3, r2
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	2164      	movs	r1, #100	; 0x64
 8008c08:	fb01 f303 	mul.w	r3, r1, r3
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	3332      	adds	r3, #50	; 0x32
 8008c12:	4a2a      	ldr	r2, [pc, #168]	; (8008cbc <UART_SetConfig+0x38c>)
 8008c14:	fba2 2303 	umull	r2, r3, r2, r3
 8008c18:	095b      	lsrs	r3, r3, #5
 8008c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c1e:	441e      	add	r6, r3
 8008c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c22:	4618      	mov	r0, r3
 8008c24:	f04f 0100 	mov.w	r1, #0
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	1894      	adds	r4, r2, r2
 8008c2e:	603c      	str	r4, [r7, #0]
 8008c30:	415b      	adcs	r3, r3
 8008c32:	607b      	str	r3, [r7, #4]
 8008c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c38:	1812      	adds	r2, r2, r0
 8008c3a:	eb41 0303 	adc.w	r3, r1, r3
 8008c3e:	f04f 0400 	mov.w	r4, #0
 8008c42:	f04f 0500 	mov.w	r5, #0
 8008c46:	00dd      	lsls	r5, r3, #3
 8008c48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c4c:	00d4      	lsls	r4, r2, #3
 8008c4e:	4622      	mov	r2, r4
 8008c50:	462b      	mov	r3, r5
 8008c52:	eb12 0a00 	adds.w	sl, r2, r0
 8008c56:	eb43 0b01 	adc.w	fp, r3, r1
 8008c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f04f 0100 	mov.w	r1, #0
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	008b      	lsls	r3, r1, #2
 8008c6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c72:	0082      	lsls	r2, r0, #2
 8008c74:	4650      	mov	r0, sl
 8008c76:	4659      	mov	r1, fp
 8008c78:	f7f7 ff78 	bl	8000b6c <__aeabi_uldivmod>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4b0e      	ldr	r3, [pc, #56]	; (8008cbc <UART_SetConfig+0x38c>)
 8008c82:	fba3 1302 	umull	r1, r3, r3, r2
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	2164      	movs	r1, #100	; 0x64
 8008c8a:	fb01 f303 	mul.w	r3, r1, r3
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	3332      	adds	r3, #50	; 0x32
 8008c94:	4a09      	ldr	r2, [pc, #36]	; (8008cbc <UART_SetConfig+0x38c>)
 8008c96:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9a:	095b      	lsrs	r3, r3, #5
 8008c9c:	f003 020f 	and.w	r2, r3, #15
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4432      	add	r2, r6
 8008ca6:	609a      	str	r2, [r3, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	377c      	adds	r7, #124	; 0x7c
 8008cac:	46bd      	mov	sp, r7
 8008cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40011000 	.word	0x40011000
 8008cb8:	40011400 	.word	0x40011400
 8008cbc:	51eb851f 	.word	0x51eb851f

08008cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	f107 001c 	add.w	r0, r7, #28
 8008cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d122      	bne.n	8008d1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d105      	bne.n	8008d12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f94a 	bl	8008fac <USB_CoreReset>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
 8008d1c:	e01a      	b.n	8008d54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f93e 	bl	8008fac <USB_CoreReset>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38
 8008d46:	e005      	b.n	8008d54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d10b      	bne.n	8008d72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f043 0206 	orr.w	r2, r3, #6
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f043 0220 	orr.w	r2, r3, #32
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d7e:	b004      	add	sp, #16
 8008d80:	4770      	bx	lr

08008d82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f043 0201 	orr.w	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f023 0201 	bic.w	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dde:	78fb      	ldrb	r3, [r7, #3]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d106      	bne.n	8008df2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60da      	str	r2, [r3, #12]
 8008df0:	e00b      	b.n	8008e0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60da      	str	r2, [r3, #12]
 8008e04:	e001      	b.n	8008e0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e003      	b.n	8008e12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008e0a:	2032      	movs	r0, #50	; 0x32
 8008e0c:	f7f9 fe02 	bl	8002a14 <HAL_Delay>

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	019b      	lsls	r3, r3, #6
 8008e2e:	f043 0220 	orr.w	r2, r3, #32
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <USB_FlushTxFifo+0x48>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e006      	b.n	8008e56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d0f0      	beq.n	8008e36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	00030d40 	.word	0x00030d40

08008e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2210      	movs	r2, #16
 8008e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <USB_FlushRxFifo+0x40>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e006      	b.n	8008e9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0310 	and.w	r3, r3, #16
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d0f0      	beq.n	8008e7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	00030d40 	.word	0x00030d40

08008eac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b089      	sub	sp, #36	; 0x24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	461a      	mov	r2, r3
 8008eba:	460b      	mov	r3, r1
 8008ebc:	71fb      	strb	r3, [r7, #7]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008eca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d11a      	bne.n	8008f08 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ed2:	88bb      	ldrh	r3, [r7, #4]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008eda:	2300      	movs	r3, #0
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	e00f      	b.n	8008f00 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	031a      	lsls	r2, r3, #12
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eec:	461a      	mov	r2, r3
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	3301      	adds	r3, #1
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d3eb      	bcc.n	8008ee0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3724      	adds	r7, #36	; 0x24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b089      	sub	sp, #36	; 0x24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	4613      	mov	r3, r2
 8008f22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	3303      	adds	r3, #3
 8008f30:	089b      	lsrs	r3, r3, #2
 8008f32:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008f34:	2300      	movs	r3, #0
 8008f36:	61bb      	str	r3, [r7, #24]
 8008f38:	e00b      	b.n	8008f52 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d3ef      	bcc.n	8008f3a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3724      	adds	r7, #36	; 0x24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f80:	68fb      	ldr	r3, [r7, #12]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	4a13      	ldr	r2, [pc, #76]	; (8009010 <USB_CoreReset+0x64>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d901      	bls.n	8008fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e01b      	b.n	8009002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	daf2      	bge.n	8008fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f043 0201 	orr.w	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a09      	ldr	r2, [pc, #36]	; (8009010 <USB_CoreReset+0x64>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e006      	b.n	8009002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d0f0      	beq.n	8008fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	00030d40 	.word	0x00030d40

08009014 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009014:	b084      	sub	sp, #16
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	f107 001c 	add.w	r0, r7, #28
 8009022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009030:	461a      	mov	r2, r3
 8009032:	2300      	movs	r3, #0
 8009034:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009062:	2b00      	cmp	r3, #0
 8009064:	d018      	beq.n	8009098 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	2b01      	cmp	r3, #1
 800906a:	d10a      	bne.n	8009082 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800907a:	f043 0304 	orr.w	r3, r3, #4
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e014      	b.n	80090ac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009090:	f023 0304 	bic.w	r3, r3, #4
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	e009      	b.n	80090ac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090a6:	f023 0304 	bic.w	r3, r3, #4
 80090aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80090ac:	2110      	movs	r1, #16
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff feb4 	bl	8008e1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fed7 	bl	8008e68 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e015      	b.n	80090ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090cc:	461a      	mov	r2, r3
 80090ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e0:	461a      	mov	r2, r3
 80090e2:	2300      	movs	r3, #0
 80090e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3301      	adds	r3, #1
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d3e5      	bcc.n	80090c0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80090f4:	2101      	movs	r1, #1
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f8ac 	bl	8009254 <USB_DriveVbus>

  HAL_Delay(200U);
 80090fc:	20c8      	movs	r0, #200	; 0xc8
 80090fe:	f7f9 fc89 	bl	8002a14 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800910e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009122:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a14      	ldr	r2, [pc, #80]	; (8009178 <USB_HostInit+0x164>)
 8009128:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a13      	ldr	r2, [pc, #76]	; (800917c <USB_HostInit+0x168>)
 800912e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009132:	e009      	b.n	8009148 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2280      	movs	r2, #128	; 0x80
 8009138:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a10      	ldr	r2, [pc, #64]	; (8009180 <USB_HostInit+0x16c>)
 800913e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a10      	ldr	r2, [pc, #64]	; (8009184 <USB_HostInit+0x170>)
 8009144:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f043 0210 	orr.w	r2, r3, #16
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	4b0a      	ldr	r3, [pc, #40]	; (8009188 <USB_HostInit+0x174>)
 8009160:	4313      	orrs	r3, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009172:	b004      	add	sp, #16
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	01000200 	.word	0x01000200
 800917c:	00e00300 	.word	0x00e00300
 8009180:	00600080 	.word	0x00600080
 8009184:	004000e0 	.word	0x004000e0
 8009188:	a3200008 	.word	0xa3200008

0800918c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091c4:	4313      	orrs	r3, r2
 80091c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d107      	bne.n	80091de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091d4:	461a      	mov	r2, r3
 80091d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091da:	6053      	str	r3, [r2, #4]
 80091dc:	e009      	b.n	80091f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d106      	bne.n	80091f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ea:	461a      	mov	r2, r3
 80091ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80091f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009220:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800922a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800922e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009230:	2064      	movs	r0, #100	; 0x64
 8009232:	f7f9 fbef 	bl	8002a14 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800923e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009242:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009244:	200a      	movs	r0, #10
 8009246:	f7f9 fbe5 	bl	8002a14 <HAL_Delay>

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009278:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <USB_DriveVbus+0x44>
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d106      	bne.n	8009298 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009296:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a2:	d109      	bne.n	80092b8 <USB_DriveVbus+0x64>
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80092b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	0c5b      	lsrs	r3, r3, #17
 80092e4:	f003 0303 	and.w	r3, r3, #3
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	b29b      	uxth	r3, r3
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
	...

08009318 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	4608      	mov	r0, r1
 8009322:	4611      	mov	r1, r2
 8009324:	461a      	mov	r2, r3
 8009326:	4603      	mov	r3, r0
 8009328:	70fb      	strb	r3, [r7, #3]
 800932a:	460b      	mov	r3, r1
 800932c:	70bb      	strb	r3, [r7, #2]
 800932e:	4613      	mov	r3, r2
 8009330:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4413      	add	r3, r2
 8009342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009346:	461a      	mov	r2, r3
 8009348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800934c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800934e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009352:	2b03      	cmp	r3, #3
 8009354:	d87e      	bhi.n	8009454 <USB_HC_Init+0x13c>
 8009356:	a201      	add	r2, pc, #4	; (adr r2, 800935c <USB_HC_Init+0x44>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	0800936d 	.word	0x0800936d
 8009360:	08009417 	.word	0x08009417
 8009364:	0800936d 	.word	0x0800936d
 8009368:	080093d9 	.word	0x080093d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	4413      	add	r3, r2
 8009374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009378:	461a      	mov	r2, r3
 800937a:	f240 439d 	movw	r3, #1181	; 0x49d
 800937e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009380:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009384:	2b00      	cmp	r3, #0
 8009386:	da10      	bge.n	80093aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	440a      	add	r2, r1
 800939e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093a6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80093a8:	e057      	b.n	800945a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d051      	beq.n	800945a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80093d4:	60d3      	str	r3, [r2, #12]
      break;
 80093d6:	e040      	b.n	800945a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e4:	461a      	mov	r2, r3
 80093e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80093ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	da34      	bge.n	800945e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	0151      	lsls	r1, r2, #5
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	440a      	add	r2, r1
 800940a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800940e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009412:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009414:	e023      	b.n	800945e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	461a      	mov	r2, r3
 8009424:	f240 2325 	movw	r3, #549	; 0x225
 8009428:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800942a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da17      	bge.n	8009462 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	4413      	add	r3, r2
 800943a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	440a      	add	r2, r1
 8009448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009450:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009452:	e006      	b.n	8009462 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	77fb      	strb	r3, [r7, #31]
      break;
 8009458:	e004      	b.n	8009464 <USB_HC_Init+0x14c>
      break;
 800945a:	bf00      	nop
 800945c:	e002      	b.n	8009464 <USB_HC_Init+0x14c>
      break;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <USB_HC_Init+0x14c>
      break;
 8009462:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	2101      	movs	r1, #1
 8009474:	fa01 f303 	lsl.w	r3, r1, r3
 8009478:	6939      	ldr	r1, [r7, #16]
 800947a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800947e:	4313      	orrs	r3, r2
 8009480:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800948e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009492:	2b00      	cmp	r3, #0
 8009494:	da03      	bge.n	800949e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e001      	b.n	80094a2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff ff0f 	bl	80092c6 <USB_GetHostSpeed>
 80094a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80094aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d106      	bne.n	80094c0 <USB_HC_Init+0x1a8>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d003      	beq.n	80094c0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80094b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	e001      	b.n	80094c4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094c4:	787b      	ldrb	r3, [r7, #1]
 80094c6:	059b      	lsls	r3, r3, #22
 80094c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094cc:	78bb      	ldrb	r3, [r7, #2]
 80094ce:	02db      	lsls	r3, r3, #11
 80094d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094da:	049b      	lsls	r3, r3, #18
 80094dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	0159      	lsls	r1, r3, #5
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	440b      	add	r3, r1
 80094f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009500:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009502:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009506:	2b03      	cmp	r3, #3
 8009508:	d10f      	bne.n	800952a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	4413      	add	r3, r2
 8009512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	440a      	add	r2, r1
 8009520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009528:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800952a:	7ffb      	ldrb	r3, [r7, #31]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3720      	adds	r7, #32
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08c      	sub	sp, #48	; 0x30
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800954c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009550:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955a:	2b00      	cmp	r3, #0
 800955c:	d02d      	beq.n	80095ba <USB_HC_StartXfer+0x86>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	791b      	ldrb	r3, [r3, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d129      	bne.n	80095ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d117      	bne.n	800959c <USB_HC_StartXfer+0x68>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	79db      	ldrb	r3, [r3, #7]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <USB_HC_StartXfer+0x48>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	79db      	ldrb	r3, [r3, #7]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d10f      	bne.n	800959c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	4413      	add	r3, r2
 8009584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	0151      	lsls	r1, r2, #5
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	440a      	add	r2, r1
 8009592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <USB_HC_StartXfer+0x86>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	795b      	ldrb	r3, [r3, #5]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d107      	bne.n	80095ba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	785b      	ldrb	r3, [r3, #1]
 80095ae:	4619      	mov	r1, r3
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fa2f 	bl	8009a14 <USB_DoPing>
      return HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	e0f8      	b.n	80097ac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	8912      	ldrh	r2, [r2, #8]
 80095ca:	4413      	add	r3, r2
 80095cc:	3b01      	subs	r3, #1
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	8912      	ldrh	r2, [r2, #8]
 80095d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80095d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095da:	8b7b      	ldrh	r3, [r7, #26]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d90b      	bls.n	80095f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80095e0:	8b7b      	ldrh	r3, [r7, #26]
 80095e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	8912      	ldrh	r2, [r2, #8]
 80095ea:	fb02 f203 	mul.w	r2, r2, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	611a      	str	r2, [r3, #16]
 80095f2:	e001      	b.n	80095f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80095f4:	2301      	movs	r3, #1
 80095f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	78db      	ldrb	r3, [r3, #3]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d007      	beq.n	8009610 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	8912      	ldrh	r2, [r2, #8]
 8009606:	fb02 f203 	mul.w	r2, r2, r3
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	611a      	str	r2, [r3, #16]
 800960e:	e003      	b.n	8009618 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	695a      	ldr	r2, [r3, #20]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009622:	04d9      	lsls	r1, r3, #19
 8009624:	4b63      	ldr	r3, [pc, #396]	; (80097b4 <USB_HC_StartXfer+0x280>)
 8009626:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009628:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	7a9b      	ldrb	r3, [r3, #10]
 800962e:	075b      	lsls	r3, r3, #29
 8009630:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009634:	69f9      	ldr	r1, [r7, #28]
 8009636:	0148      	lsls	r0, r1, #5
 8009638:	6a39      	ldr	r1, [r7, #32]
 800963a:	4401      	add	r1, r0
 800963c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009640:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009642:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	68d9      	ldr	r1, [r3, #12]
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	4413      	add	r3, r2
 8009656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800965a:	460a      	mov	r2, r1
 800965c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	bf0c      	ite	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	2300      	movne	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	4413      	add	r3, r2
 800967e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	0151      	lsls	r1, r2, #5
 8009688:	6a3a      	ldr	r2, [r7, #32]
 800968a:	440a      	add	r2, r1
 800968c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009690:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009694:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	4413      	add	r3, r2
 800969e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	7e7b      	ldrb	r3, [r7, #25]
 80096a6:	075b      	lsls	r3, r3, #29
 80096a8:	69f9      	ldr	r1, [r7, #28]
 80096aa:	0148      	lsls	r0, r1, #5
 80096ac:	6a39      	ldr	r1, [r7, #32]
 80096ae:	4401      	add	r1, r0
 80096b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80096b4:	4313      	orrs	r3, r2
 80096b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096ce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	78db      	ldrb	r3, [r3, #3]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	e003      	b.n	80096ea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096e8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096f0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fe:	461a      	mov	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	e04e      	b.n	80097ac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	78db      	ldrb	r3, [r3, #3]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d149      	bne.n	80097aa <USB_HC_StartXfer+0x276>
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d045      	beq.n	80097aa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	79db      	ldrb	r3, [r3, #7]
 8009722:	2b03      	cmp	r3, #3
 8009724:	d830      	bhi.n	8009788 <USB_HC_StartXfer+0x254>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <USB_HC_StartXfer+0x1f8>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800973d 	.word	0x0800973d
 8009730:	08009761 	.word	0x08009761
 8009734:	0800973d 	.word	0x0800973d
 8009738:	08009761 	.word	0x08009761
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	3303      	adds	r3, #3
 8009742:	089b      	lsrs	r3, r3, #2
 8009744:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009746:	8afa      	ldrh	r2, [r7, #22]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	b29b      	uxth	r3, r3
 800974e:	429a      	cmp	r2, r3
 8009750:	d91c      	bls.n	800978c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f043 0220 	orr.w	r2, r3, #32
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	619a      	str	r2, [r3, #24]
        }
        break;
 800975e:	e015      	b.n	800978c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	3303      	adds	r3, #3
 8009766:	089b      	lsrs	r3, r3, #2
 8009768:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800976a:	8afa      	ldrh	r2, [r7, #22]
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	b29b      	uxth	r3, r3
 8009776:	429a      	cmp	r2, r3
 8009778:	d90a      	bls.n	8009790 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	619a      	str	r2, [r3, #24]
        }
        break;
 8009786:	e003      	b.n	8009790 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009788:	bf00      	nop
 800978a:	e002      	b.n	8009792 <USB_HC_StartXfer+0x25e>
        break;
 800978c:	bf00      	nop
 800978e:	e000      	b.n	8009792 <USB_HC_StartXfer+0x25e>
        break;
 8009790:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	68d9      	ldr	r1, [r3, #12]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	785a      	ldrb	r2, [r3, #1]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	2000      	movs	r0, #0
 80097a2:	9000      	str	r0, [sp, #0]
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7ff fb81 	bl	8008eac <USB_WritePacket>
  }

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3728      	adds	r7, #40	; 0x28
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	1ff80000 	.word	0x1ff80000

080097b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	b29b      	uxth	r3, r3
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097da:	b480      	push	{r7}
 80097dc:	b089      	sub	sp, #36	; 0x24
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	0c9b      	lsrs	r3, r3, #18
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	0fdb      	lsrs	r3, r3, #31
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b20      	cmp	r3, #32
 8009828:	d104      	bne.n	8009834 <USB_HC_Halt+0x5a>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	e0e8      	b.n	8009a06 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d002      	beq.n	8009840 <USB_HC_Halt+0x66>
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d173      	bne.n	8009928 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	4413      	add	r3, r2
 8009848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	0151      	lsls	r1, r2, #5
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	440a      	add	r2, r1
 8009856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800985a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800985e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 80cb 	bne.w	8009a04 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009872:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d143      	bne.n	8009902 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	4413      	add	r3, r2
 8009882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	0151      	lsls	r1, r2, #5
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	440a      	add	r2, r1
 8009890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009898:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098d8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	3301      	adds	r3, #1
 80098de:	61fb      	str	r3, [r7, #28]
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098e6:	d81d      	bhi.n	8009924 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098fe:	d0ec      	beq.n	80098da <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009900:	e080      	b.n	8009a04 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	4413      	add	r3, r2
 800990a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	0151      	lsls	r1, r2, #5
 8009914:	69ba      	ldr	r2, [r7, #24]
 8009916:	440a      	add	r2, r1
 8009918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800991c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009920:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009922:	e06f      	b.n	8009a04 <USB_HC_Halt+0x22a>
            break;
 8009924:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009926:	e06d      	b.n	8009a04 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	4413      	add	r3, r2
 8009930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	0151      	lsls	r1, r2, #5
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	440a      	add	r2, r1
 800993e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009946:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d143      	bne.n	80099e0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	4413      	add	r3, r2
 8009960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	440a      	add	r2, r1
 800996e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009976:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	4413      	add	r3, r2
 8009980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	0151      	lsls	r1, r2, #5
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	440a      	add	r2, r1
 800998e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009996:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	3301      	adds	r3, #1
 80099bc:	61fb      	str	r3, [r7, #28]
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099c4:	d81d      	bhi.n	8009a02 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099dc:	d0ec      	beq.n	80099b8 <USB_HC_Halt+0x1de>
 80099de:	e011      	b.n	8009a04 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	e000      	b.n	8009a04 <USB_HC_Halt+0x22a>
          break;
 8009a02:	bf00      	nop
    }
  }

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3724      	adds	r7, #36	; 0x24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	04da      	lsls	r2, r3, #19
 8009a30:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <USB_DoPing+0x74>)
 8009a32:	4013      	ands	r3, r2
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a72:	461a      	mov	r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	1ff80000 	.word	0x1ff80000

08009a8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff f981 	bl	8008da4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009aa2:	2110      	movs	r1, #16
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff f9b9 	bl	8008e1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7ff f9dc 	bl	8008e68 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	613b      	str	r3, [r7, #16]
 8009ab4:	e01f      	b.n	8009af6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009acc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ad4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009adc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aea:	461a      	mov	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	3301      	adds	r3, #1
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b0f      	cmp	r3, #15
 8009afa:	d9dc      	bls.n	8009ab6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009afc:	2300      	movs	r3, #0
 8009afe:	613b      	str	r3, [r7, #16]
 8009b00:	e034      	b.n	8009b6c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b36:	461a      	mov	r2, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	617b      	str	r3, [r7, #20]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b48:	d80c      	bhi.n	8009b64 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b60:	d0ec      	beq.n	8009b3c <USB_StopHost+0xb0>
 8009b62:	e000      	b.n	8009b66 <USB_StopHost+0xda>
        break;
 8009b64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d9c7      	bls.n	8009b02 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff f8fa 	bl	8008d82 <USB_EnableGlobalInt>

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b089      	sub	sp, #36	; 0x24
 8009b9c:	af04      	add	r7, sp, #16
 8009b9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	2102      	movs	r1, #2
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fcb2 	bl	800a510 <USBH_FindInterface>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	2bff      	cmp	r3, #255	; 0xff
 8009bb4:	d002      	beq.n	8009bbc <USBH_CDC_InterfaceInit+0x24>
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d901      	bls.n	8009bc0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e13d      	b.n	8009e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc87 	bl	800a4d8 <USBH_SelectInterface>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	e131      	b.n	8009e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009bde:	2050      	movs	r0, #80	; 0x50
 8009be0:	f005 fbd0 	bl	800f384 <malloc>
 8009be4:	4603      	mov	r3, r0
 8009be6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e11f      	b.n	8009e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009bfc:	2250      	movs	r2, #80	; 0x50
 8009bfe:	2100      	movs	r1, #0
 8009c00:	68b8      	ldr	r0, [r7, #8]
 8009c02:	f005 fbdd 	bl	800f3c0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	211a      	movs	r1, #26
 8009c0c:	fb01 f303 	mul.w	r3, r1, r3
 8009c10:	4413      	add	r3, r2
 8009c12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	b25b      	sxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da15      	bge.n	8009c4a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	211a      	movs	r1, #26
 8009c24:	fb01 f303 	mul.w	r3, r1, r3
 8009c28:	4413      	add	r3, r2
 8009c2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	211a      	movs	r1, #26
 8009c3a:	fb01 f303 	mul.w	r3, r1, r3
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f002 f88c 	bl	800bd6e <USBH_AllocPipe>
 8009c56:	4603      	mov	r3, r0
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	7819      	ldrb	r1, [r3, #0]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	7858      	ldrb	r0, [r3, #1]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	8952      	ldrh	r2, [r2, #10]
 8009c76:	9202      	str	r2, [sp, #8]
 8009c78:	2203      	movs	r2, #3
 8009c7a:	9201      	str	r2, [sp, #4]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	4623      	mov	r3, r4
 8009c80:	4602      	mov	r2, r0
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f002 f844 	bl	800bd10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f005 fac9 	bl	800f228 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	210a      	movs	r1, #10
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fc37 	bl	800a510 <USBH_FindInterface>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2bff      	cmp	r3, #255	; 0xff
 8009caa:	d002      	beq.n	8009cb2 <USBH_CDC_InterfaceInit+0x11a>
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d901      	bls.n	8009cb6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e0c2      	b.n	8009e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	211a      	movs	r1, #26
 8009cbc:	fb01 f303 	mul.w	r3, r1, r3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b25b      	sxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da16      	bge.n	8009cfc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	211a      	movs	r1, #26
 8009cd4:	fb01 f303 	mul.w	r3, r1, r3
 8009cd8:	4413      	add	r3, r2
 8009cda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	211a      	movs	r1, #26
 8009cea:	fb01 f303 	mul.w	r3, r1, r3
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009cf4:	881a      	ldrh	r2, [r3, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	835a      	strh	r2, [r3, #26]
 8009cfa:	e015      	b.n	8009d28 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	211a      	movs	r1, #26
 8009d02:	fb01 f303 	mul.w	r3, r1, r3
 8009d06:	4413      	add	r3, r2
 8009d08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	211a      	movs	r1, #26
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d22:	881a      	ldrh	r2, [r3, #0]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	211a      	movs	r1, #26
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b25b      	sxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da16      	bge.n	8009d6e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	211a      	movs	r1, #26
 8009d46:	fb01 f303 	mul.w	r3, r1, r3
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	211a      	movs	r1, #26
 8009d5c:	fb01 f303 	mul.w	r3, r1, r3
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	835a      	strh	r2, [r3, #26]
 8009d6c:	e015      	b.n	8009d9a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	211a      	movs	r1, #26
 8009d74:	fb01 f303 	mul.w	r3, r1, r3
 8009d78:	4413      	add	r3, r2
 8009d7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	211a      	movs	r1, #26
 8009d8a:	fb01 f303 	mul.w	r3, r1, r3
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d94:	881a      	ldrh	r2, [r3, #0]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	7b9b      	ldrb	r3, [r3, #14]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 ffe4 	bl	800bd6e <USBH_AllocPipe>
 8009da6:	4603      	mov	r3, r0
 8009da8:	461a      	mov	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	7bdb      	ldrb	r3, [r3, #15]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 ffda 	bl	800bd6e <USBH_AllocPipe>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	7b59      	ldrb	r1, [r3, #13]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	7b98      	ldrb	r0, [r3, #14]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	8b12      	ldrh	r2, [r2, #24]
 8009dda:	9202      	str	r2, [sp, #8]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	9201      	str	r2, [sp, #4]
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	4623      	mov	r3, r4
 8009de4:	4602      	mov	r2, r0
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 ff92 	bl	800bd10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	7b19      	ldrb	r1, [r3, #12]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	7bd8      	ldrb	r0, [r3, #15]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	8b52      	ldrh	r2, [r2, #26]
 8009e04:	9202      	str	r2, [sp, #8]
 8009e06:	2202      	movs	r2, #2
 8009e08:	9201      	str	r2, [sp, #4]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 ff7d 	bl	800bd10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	7b5b      	ldrb	r3, [r3, #13]
 8009e22:	2200      	movs	r2, #0
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f005 f9fe 	bl	800f228 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	7b1b      	ldrb	r3, [r3, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f005 f9f7 	bl	800f228 <USBH_LL_SetToggle>

  return USBH_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd90      	pop	{r4, r7, pc}

08009e44 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e52:	69db      	ldr	r3, [r3, #28]
 8009e54:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 ff72 	bl	800bd4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 ff9d 	bl	800bdb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	7b1b      	ldrb	r3, [r3, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00e      	beq.n	8009ea2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	7b1b      	ldrb	r3, [r3, #12]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 ff5f 	bl	800bd4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7b1b      	ldrb	r3, [r3, #12]
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 ff8a 	bl	800bdb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	7b5b      	ldrb	r3, [r3, #13]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00e      	beq.n	8009ec8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	7b5b      	ldrb	r3, [r3, #13]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 ff4c 	bl	800bd4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	7b5b      	ldrb	r3, [r3, #13]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 ff77 	bl	800bdb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f005 fa59 	bl	800f394 <free>
    phost->pActiveClass->pData = 0U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ee8:	2200      	movs	r2, #0
 8009eea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3340      	adds	r3, #64	; 0x40
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f8b1 	bl	800a076 <GetLineCoding>
 8009f14:	4603      	mov	r3, r0
 8009f16:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f24:	2102      	movs	r1, #2
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	d877      	bhi.n	800a048 <USBH_CDC_Process+0x114>
 8009f58:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <USBH_CDC_Process+0x2c>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f75 	.word	0x08009f75
 8009f64:	08009f7b 	.word	0x08009f7b
 8009f68:	08009fab 	.word	0x08009fab
 8009f6c:	0800a01f 	.word	0x0800a01f
 8009f70:	0800a02d 	.word	0x0800a02d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73fb      	strb	r3, [r7, #15]
      break;
 8009f78:	e06d      	b.n	800a056 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f897 	bl	800a0b4 <SetLineCoding>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f98:	e058      	b.n	800a04c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d055      	beq.n	800a04c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009fa8:	e050      	b.n	800a04c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	3340      	adds	r3, #64	; 0x40
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f860 	bl	800a076 <GetLineCoding>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d126      	bne.n	800a00e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d13b      	bne.n	800a050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d133      	bne.n	800a050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d12b      	bne.n	800a050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a000:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a002:	429a      	cmp	r2, r3
 800a004:	d124      	bne.n	800a050 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f982 	bl	800a310 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a00c:	e020      	b.n	800a050 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d01d      	beq.n	800a050 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2204      	movs	r2, #4
 800a018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a01c:	e018      	b.n	800a050 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f867 	bl	800a0f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f8f6 	bl	800a216 <CDC_ProcessReception>
      break;
 800a02a:	e014      	b.n	800a056 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 f94d 	bl	800b2ce <USBH_ClrFeature>
 800a034:	4603      	mov	r3, r0
 800a036:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a046:	e005      	b.n	800a054 <USBH_CDC_Process+0x120>

    default:
      break;
 800a048:	bf00      	nop
 800a04a:	e004      	b.n	800a056 <USBH_CDC_Process+0x122>
      break;
 800a04c:	bf00      	nop
 800a04e:	e002      	b.n	800a056 <USBH_CDC_Process+0x122>
      break;
 800a050:	bf00      	nop
 800a052:	e000      	b.n	800a056 <USBH_CDC_Process+0x122>
      break;
 800a054:	bf00      	nop

  }

  return status;
 800a056:	7bfb      	ldrb	r3, [r7, #15]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	22a1      	movs	r2, #161	; 0xa1
 800a084:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2221      	movs	r2, #33	; 0x21
 800a08a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2207      	movs	r2, #7
 800a09c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 faf2 	bl	800b68e <USBH_CtlReq>
 800a0aa:	4603      	mov	r3, r0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2221      	movs	r2, #33	; 0x21
 800a0c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2207      	movs	r2, #7
 800a0da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2207      	movs	r2, #7
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fad3 	bl	800b68e <USBH_CtlReq>
 800a0e8:	4603      	mov	r3, r0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b086      	sub	sp, #24
 800a0f6:	af02      	add	r7, sp, #8
 800a0f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a104:	2300      	movs	r3, #0
 800a106:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d002      	beq.n	800a118 <CDC_ProcessTransmission+0x26>
 800a112:	2b02      	cmp	r3, #2
 800a114:	d023      	beq.n	800a15e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a116:	e07a      	b.n	800a20e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	8b12      	ldrh	r2, [r2, #24]
 800a120:	4293      	cmp	r3, r2
 800a122:	d90b      	bls.n	800a13c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	69d9      	ldr	r1, [r3, #28]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8b1a      	ldrh	r2, [r3, #24]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	7b5b      	ldrb	r3, [r3, #13]
 800a130:	2001      	movs	r0, #1
 800a132:	9000      	str	r0, [sp, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 fda8 	bl	800bc8a <USBH_BulkSendData>
 800a13a:	e00b      	b.n	800a154 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	7b5b      	ldrb	r3, [r3, #13]
 800a14a:	2001      	movs	r0, #1
 800a14c:	9000      	str	r0, [sp, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 fd9b 	bl	800bc8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a15c:	e057      	b.n	800a20e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	7b5b      	ldrb	r3, [r3, #13]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f005 f835 	bl	800f1d4 <USBH_LL_GetURBState>
 800a16a:	4603      	mov	r3, r0
 800a16c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d136      	bne.n	800a1e2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	8b12      	ldrh	r2, [r2, #24]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d90e      	bls.n	800a19e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	8b12      	ldrh	r2, [r2, #24]
 800a188:	1a9a      	subs	r2, r3, r2
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	8b12      	ldrh	r2, [r2, #24]
 800a196:	441a      	add	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	61da      	str	r2, [r3, #28]
 800a19c:	e002      	b.n	800a1a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a1b4:	e006      	b.n	800a1c4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f892 	bl	800a2e8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2204      	movs	r2, #4
 800a1c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f001 ffd8 	bl	800c190 <osMessageQueuePut>
      break;
 800a1e0:	e014      	b.n	800a20c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d111      	bne.n	800a20c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2204      	movs	r2, #4
 800a1f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a204:	2300      	movs	r3, #0
 800a206:	2200      	movs	r2, #0
 800a208:	f001 ffc2 	bl	800c190 <osMessageQueuePut>
      break;
 800a20c:	bf00      	nop
  }
}
 800a20e:	bf00      	nop
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a228:	2300      	movs	r3, #0
 800a22a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a232:	2b03      	cmp	r3, #3
 800a234:	d002      	beq.n	800a23c <CDC_ProcessReception+0x26>
 800a236:	2b04      	cmp	r3, #4
 800a238:	d00e      	beq.n	800a258 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a23a:	e051      	b.n	800a2e0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	6a19      	ldr	r1, [r3, #32]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	8b5a      	ldrh	r2, [r3, #26]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	7b1b      	ldrb	r3, [r3, #12]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 fd43 	bl	800bcd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2204      	movs	r2, #4
 800a252:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a256:	e043      	b.n	800a2e0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	7b1b      	ldrb	r3, [r3, #12]
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f004 ffb8 	bl	800f1d4 <USBH_LL_GetURBState>
 800a264:	4603      	mov	r3, r0
 800a266:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a268:	7cfb      	ldrb	r3, [r7, #19]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d137      	bne.n	800a2de <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	7b1b      	ldrb	r3, [r3, #12]
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f004 ff1b 	bl	800f0b0 <USBH_LL_GetLastXferSize>
 800a27a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	429a      	cmp	r2, r3
 800a284:	d016      	beq.n	800a2b4 <CDC_ProcessReception+0x9e>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	8b5b      	ldrh	r3, [r3, #26]
 800a28a:	461a      	mov	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4293      	cmp	r3, r2
 800a290:	d910      	bls.n	800a2b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	1ad2      	subs	r2, r2, r3
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	6a1a      	ldr	r2, [r3, #32]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	441a      	add	r2, r3
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2203      	movs	r2, #3
 800a2ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a2b2:	e006      	b.n	800a2c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f81d 	bl	800a2fc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2204      	movs	r2, #4
 800a2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f001 ff59 	bl	800c190 <osMessageQueuePut>
      break;
 800a2de:	bf00      	nop
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	4613      	mov	r3, r2
 800a330:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a338:	2302      	movs	r3, #2
 800a33a:	e044      	b.n	800a3c6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	79fa      	ldrb	r2, [r7, #7]
 800a340:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f841 	bl	800a3dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a388:	2200      	movs	r2, #0
 800a38a:	2104      	movs	r1, #4
 800a38c:	2010      	movs	r0, #16
 800a38e:	f001 fe8c 	bl	800c0aa <osMessageQueueNew>
 800a392:	4602      	mov	r2, r0
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <USBH_Init+0xac>)
 800a39c:	4a0d      	ldr	r2, [pc, #52]	; (800a3d4 <USBH_Init+0xb0>)
 800a39e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <USBH_Init+0xac>)
 800a3a2:	2280      	movs	r2, #128	; 0x80
 800a3a4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <USBH_Init+0xac>)
 800a3a8:	2218      	movs	r2, #24
 800a3aa:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a3ac:	4a08      	ldr	r2, [pc, #32]	; (800a3d0 <USBH_Init+0xac>)
 800a3ae:	68f9      	ldr	r1, [r7, #12]
 800a3b0:	4809      	ldr	r0, [pc, #36]	; (800a3d8 <USBH_Init+0xb4>)
 800a3b2:	f001 fdcd 	bl	800bf50 <osThreadNew>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f004 fdc2 	bl	800ef48 <USBH_LL_Init>

  return USBH_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	2000506c 	.word	0x2000506c
 800a3d4:	0800f6e8 	.word	0x0800f6e8
 800a3d8:	0800b045 	.word	0x0800b045

0800a3dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	e009      	b.n	800a402 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	33e0      	adds	r3, #224	; 0xe0
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b0e      	cmp	r3, #14
 800a406:	d9f2      	bls.n	800a3ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	e009      	b.n	800a422 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a428:	d3f1      	bcc.n	800a40e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2240      	movs	r2, #64	; 0x40
 800a44e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d016      	beq.n	800a4c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10e      	bne.n	800a4c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4a8:	1c59      	adds	r1, r3, #1
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	33de      	adds	r3, #222	; 0xde
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
 800a4be:	e004      	b.n	800a4ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	73fb      	strb	r3, [r7, #15]
 800a4c4:	e001      	b.n	800a4ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d204      	bcs.n	800a4fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a4fc:	e001      	b.n	800a502 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a4fe:	2302      	movs	r3, #2
 800a500:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	4608      	mov	r0, r1
 800a51a:	4611      	mov	r1, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	4603      	mov	r3, r0
 800a520:	70fb      	strb	r3, [r7, #3]
 800a522:	460b      	mov	r3, r1
 800a524:	70bb      	strb	r3, [r7, #2]
 800a526:	4613      	mov	r3, r2
 800a528:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a538:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a53a:	e025      	b.n	800a588 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	221a      	movs	r2, #26
 800a540:	fb02 f303 	mul.w	r3, r2, r3
 800a544:	3308      	adds	r3, #8
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4413      	add	r3, r2
 800a54a:	3302      	adds	r3, #2
 800a54c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	795b      	ldrb	r3, [r3, #5]
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	429a      	cmp	r2, r3
 800a556:	d002      	beq.n	800a55e <USBH_FindInterface+0x4e>
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	2bff      	cmp	r3, #255	; 0xff
 800a55c:	d111      	bne.n	800a582 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a562:	78ba      	ldrb	r2, [r7, #2]
 800a564:	429a      	cmp	r2, r3
 800a566:	d002      	beq.n	800a56e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a568:	78bb      	ldrb	r3, [r7, #2]
 800a56a:	2bff      	cmp	r3, #255	; 0xff
 800a56c:	d109      	bne.n	800a582 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a572:	787a      	ldrb	r2, [r7, #1]
 800a574:	429a      	cmp	r2, r3
 800a576:	d002      	beq.n	800a57e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a578:	787b      	ldrb	r3, [r7, #1]
 800a57a:	2bff      	cmp	r3, #255	; 0xff
 800a57c:	d101      	bne.n	800a582 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	e006      	b.n	800a590 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	3301      	adds	r3, #1
 800a586:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d9d6      	bls.n	800a53c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a58e:	23ff      	movs	r3, #255	; 0xff
}
 800a590:	4618      	mov	r0, r3
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f004 fd0b 	bl	800efc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f004 fe24 	bl	800f1fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af04      	add	r7, sp, #16
 800a5c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d102      	bne.n	800a5de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2203      	movs	r2, #3
 800a5dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b0b      	cmp	r3, #11
 800a5e6:	f200 823c 	bhi.w	800aa62 <USBH_Process+0x4a6>
 800a5ea:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <USBH_Process+0x34>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a621 	.word	0x0800a621
 800a5f4:	0800a66f 	.word	0x0800a66f
 800a5f8:	0800a6f3 	.word	0x0800a6f3
 800a5fc:	0800a9e1 	.word	0x0800a9e1
 800a600:	0800aa63 	.word	0x0800aa63
 800a604:	0800a7b3 	.word	0x0800a7b3
 800a608:	0800a96b 	.word	0x0800a96b
 800a60c:	0800a805 	.word	0x0800a805
 800a610:	0800a841 	.word	0x0800a841
 800a614:	0800a87b 	.word	0x0800a87b
 800a618:	0800a8c3 	.word	0x0800a8c3
 800a61c:	0800a9c9 	.word	0x0800a9c9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 821c 	beq.w	800aa66 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a634:	20c8      	movs	r0, #200	; 0xc8
 800a636:	f004 fe27 	bl	800f288 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f004 fd1d 	bl	800f07a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a664:	2300      	movs	r3, #0
 800a666:	2200      	movs	r2, #0
 800a668:	f001 fd92 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a66c:	e1fb      	b.n	800aa66 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a674:	2b01      	cmp	r3, #1
 800a676:	d107      	bne.n	800a688 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e025      	b.n	800a6d4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a68e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a692:	d914      	bls.n	800a6be <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a69a:	3301      	adds	r3, #1
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d903      	bls.n	800a6b6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	220d      	movs	r2, #13
 800a6b2:	701a      	strb	r2, [r3, #0]
 800a6b4:	e00e      	b.n	800a6d4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	e00a      	b.n	800a6d4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6c4:	f103 020a 	add.w	r2, r3, #10
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a6ce:	200a      	movs	r0, #10
 800a6d0:	f004 fdda 	bl	800f288 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f001 fd50 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800a6f0:	e1c0      	b.n	800aa74 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a702:	2104      	movs	r1, #4
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a708:	2064      	movs	r0, #100	; 0x64
 800a70a:	f004 fdbd 	bl	800f288 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f004 fc8c 	bl	800f02c <USBH_LL_GetSpeed>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2205      	movs	r2, #5
 800a722:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a724:	2100      	movs	r1, #0
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 fb21 	bl	800bd6e <USBH_AllocPipe>
 800a72c:	4603      	mov	r3, r0
 800a72e:	461a      	mov	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a734:	2180      	movs	r1, #128	; 0x80
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 fb19 	bl	800bd6e <USBH_AllocPipe>
 800a73c:	4603      	mov	r3, r0
 800a73e:	461a      	mov	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	7919      	ldrb	r1, [r3, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a758:	b292      	uxth	r2, r2
 800a75a:	9202      	str	r2, [sp, #8]
 800a75c:	2200      	movs	r2, #0
 800a75e:	9201      	str	r2, [sp, #4]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4603      	mov	r3, r0
 800a764:	2280      	movs	r2, #128	; 0x80
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fad2 	bl	800bd10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7959      	ldrb	r1, [r3, #5]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a780:	b292      	uxth	r2, r2
 800a782:	9202      	str	r2, [sp, #8]
 800a784:	2200      	movs	r2, #0
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	4603      	mov	r3, r0
 800a78c:	2200      	movs	r2, #0
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 fabe 	bl	800bd10 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f001 fcf0 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800a7b0:	e160      	b.n	800aa74 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f964 	bl	800aa80 <USBH_HandleEnum>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 8152 	bne.w	800aa6a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d103      	bne.n	800a7e0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2208      	movs	r2, #8
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2207      	movs	r2, #7
 800a7e4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2205      	movs	r2, #5
 800a7ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f001 fcc7 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a802:	e132      	b.n	800aa6a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 812f 	beq.w	800aa6e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a816:	2101      	movs	r1, #1
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2208      	movs	r2, #8
 800a820:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2205      	movs	r2, #5
 800a826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a836:	2300      	movs	r3, #0
 800a838:	2200      	movs	r2, #0
 800a83a:	f001 fca9 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a83e:	e116      	b.n	800aa6e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a846:	b29b      	uxth	r3, r3
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fcf8 	bl	800b240 <USBH_SetCfg>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2209      	movs	r2, #9
 800a85a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a870:	2300      	movs	r3, #0
 800a872:	2200      	movs	r2, #0
 800a874:	f001 fc8c 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800a878:	e0fc      	b.n	800aa74 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a888:	2101      	movs	r1, #1
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fcfb 	bl	800b286 <USBH_SetFeature>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	220a      	movs	r2, #10
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	e002      	b.n	800a8a4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f001 fc68 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800a8c0:	e0d8      	b.n	800aa74 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d03f      	beq.n	800a94c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
 800a8d8:	e016      	b.n	800a908 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a8da:	7bfa      	ldrb	r2, [r7, #15]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	32de      	adds	r2, #222	; 0xde
 800a8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e4:	791a      	ldrb	r2, [r3, #4]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d108      	bne.n	800a902 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a8f0:	7bfa      	ldrb	r2, [r7, #15]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	32de      	adds	r2, #222	; 0xde
 800a8f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a900:	e005      	b.n	800a90e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	3301      	adds	r3, #1
 800a906:	73fb      	strb	r3, [r7, #15]
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0e5      	beq.n	800a8da <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d016      	beq.n	800a946 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	4798      	blx	r3
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d109      	bne.n	800a93e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2206      	movs	r2, #6
 800a92e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a936:	2103      	movs	r1, #3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
 800a93c:	e006      	b.n	800a94c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	220d      	movs	r2, #13
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e002      	b.n	800a94c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	220d      	movs	r2, #13
 800a94a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2205      	movs	r2, #5
 800a950:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a960:	2300      	movs	r3, #0
 800a962:	2200      	movs	r2, #0
 800a964:	f001 fc14 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800a968:	e084      	b.n	800aa74 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a970:	2b00      	cmp	r3, #0
 800a972:	d017      	beq.n	800a9a4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	4798      	blx	r3
 800a980:	4603      	mov	r3, r0
 800a982:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d103      	bne.n	800a994 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	220b      	movs	r2, #11
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	e00a      	b.n	800a9aa <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d106      	bne.n	800a9aa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	220d      	movs	r2, #13
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	e002      	b.n	800a9aa <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	220d      	movs	r2, #13
 800a9a8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2205      	movs	r2, #5
 800a9ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9be:	2300      	movs	r3, #0
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f001 fbe5 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800a9c6:	e055      	b.n	800aa74 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d04f      	beq.n	800aa72 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
      }
      break;
 800a9de:	e048      	b.n	800aa72 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff fcf7 	bl	800a3dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa1c:	2105      	movs	r1, #5
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d107      	bne.n	800aa3e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff fdb0 	bl	800a59c <USBH_Start>
 800aa3c:	e002      	b.n	800aa44 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f004 fabe 	bl	800efc0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f001 fb98 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      break;
 800aa60:	e008      	b.n	800aa74 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa62:	bf00      	nop
 800aa64:	e006      	b.n	800aa74 <USBH_Process+0x4b8>
      break;
 800aa66:	bf00      	nop
 800aa68:	e004      	b.n	800aa74 <USBH_Process+0x4b8>
      break;
 800aa6a:	bf00      	nop
 800aa6c:	e002      	b.n	800aa74 <USBH_Process+0x4b8>
    break;
 800aa6e:	bf00      	nop
 800aa70:	e000      	b.n	800aa74 <USBH_Process+0x4b8>
      break;
 800aa72:	bf00      	nop
  }
  return USBH_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop

0800aa80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af04      	add	r7, sp, #16
 800aa86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	785b      	ldrb	r3, [r3, #1]
 800aa94:	2b07      	cmp	r3, #7
 800aa96:	f200 8208 	bhi.w	800aeaa <USBH_HandleEnum+0x42a>
 800aa9a:	a201      	add	r2, pc, #4	; (adr r2, 800aaa0 <USBH_HandleEnum+0x20>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aac1 	.word	0x0800aac1
 800aaa4:	0800ab7f 	.word	0x0800ab7f
 800aaa8:	0800abe9 	.word	0x0800abe9
 800aaac:	0800ac77 	.word	0x0800ac77
 800aab0:	0800ace1 	.word	0x0800ace1
 800aab4:	0800ad51 	.word	0x0800ad51
 800aab8:	0800aded 	.word	0x0800aded
 800aabc:	0800ae6b 	.word	0x0800ae6b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aac0:	2108      	movs	r1, #8
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 faec 	bl	800b0a0 <USBH_Get_DevDesc>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d130      	bne.n	800ab34 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	7919      	ldrb	r1, [r3, #4]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aaf6:	b292      	uxth	r2, r2
 800aaf8:	9202      	str	r2, [sp, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	9201      	str	r2, [sp, #4]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	4603      	mov	r3, r0
 800ab02:	2280      	movs	r2, #128	; 0x80
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f001 f903 	bl	800bd10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7959      	ldrb	r1, [r3, #5]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab1e:	b292      	uxth	r2, r2
 800ab20:	9202      	str	r2, [sp, #8]
 800ab22:	2200      	movs	r2, #0
 800ab24:	9201      	str	r2, [sp, #4]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f8ef 	bl	800bd10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab32:	e1bc      	b.n	800aeae <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	f040 81b9 	bne.w	800aeae <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab42:	3301      	adds	r3, #1
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d903      	bls.n	800ab5e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	220d      	movs	r2, #13
 800ab5a:	701a      	strb	r2, [r3, #0]
      break;
 800ab5c:	e1a7      	b.n	800aeae <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	795b      	ldrb	r3, [r3, #5]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f923 	bl	800bdb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	791b      	ldrb	r3, [r3, #4]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f91d 	bl	800bdb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
      break;
 800ab7c:	e197      	b.n	800aeae <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab7e:	2112      	movs	r1, #18
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fa8d 	bl	800b0a0 <USBH_Get_DevDesc>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d103      	bne.n	800ab98 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2202      	movs	r2, #2
 800ab94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab96:	e18c      	b.n	800aeb2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	f040 8189 	bne.w	800aeb2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aba6:	3301      	adds	r3, #1
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	d903      	bls.n	800abc2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	220d      	movs	r2, #13
 800abbe:	701a      	strb	r2, [r3, #0]
      break;
 800abc0:	e177      	b.n	800aeb2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	795b      	ldrb	r3, [r3, #5]
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 f8f1 	bl	800bdb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f001 f8eb 	bl	800bdb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	701a      	strb	r2, [r3, #0]
      break;
 800abe6:	e164      	b.n	800aeb2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800abe8:	2101      	movs	r1, #1
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fb04 	bl	800b1f8 <USBH_SetAddress>
 800abf0:	4603      	mov	r3, r0
 800abf2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abf4:	7bbb      	ldrb	r3, [r7, #14]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d132      	bne.n	800ac60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800abfa:	2002      	movs	r0, #2
 800abfc:	f004 fb44 	bl	800f288 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2203      	movs	r2, #3
 800ac0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7919      	ldrb	r1, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac22:	b292      	uxth	r2, r2
 800ac24:	9202      	str	r2, [sp, #8]
 800ac26:	2200      	movs	r2, #0
 800ac28:	9201      	str	r2, [sp, #4]
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2280      	movs	r2, #128	; 0x80
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 f86d 	bl	800bd10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	7959      	ldrb	r1, [r3, #5]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac4a:	b292      	uxth	r2, r2
 800ac4c:	9202      	str	r2, [sp, #8]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	9201      	str	r2, [sp, #4]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	4603      	mov	r3, r0
 800ac56:	2200      	movs	r2, #0
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 f859 	bl	800bd10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac5e:	e12a      	b.n	800aeb6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	f040 8127 	bne.w	800aeb6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	220d      	movs	r2, #13
 800ac6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	705a      	strb	r2, [r3, #1]
      break;
 800ac74:	e11f      	b.n	800aeb6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac76:	2109      	movs	r1, #9
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fa39 	bl	800b0f0 <USBH_Get_CfgDesc>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d103      	bne.n	800ac90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2204      	movs	r2, #4
 800ac8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac8e:	e114      	b.n	800aeba <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	f040 8111 	bne.w	800aeba <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac9e:	3301      	adds	r3, #1
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d903      	bls.n	800acba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	220d      	movs	r2, #13
 800acb6:	701a      	strb	r2, [r3, #0]
      break;
 800acb8:	e0ff      	b.n	800aeba <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	795b      	ldrb	r3, [r3, #5]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 f875 	bl	800bdb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	791b      	ldrb	r3, [r3, #4]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 f86f 	bl	800bdb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	701a      	strb	r2, [r3, #0]
      break;
 800acde:	e0ec      	b.n	800aeba <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fa01 	bl	800b0f0 <USBH_Get_CfgDesc>
 800acee:	4603      	mov	r3, r0
 800acf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d103      	bne.n	800ad00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2205      	movs	r2, #5
 800acfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acfe:	e0de      	b.n	800aebe <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	2b03      	cmp	r3, #3
 800ad04:	f040 80db 	bne.w	800aebe <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad0e:	3301      	adds	r3, #1
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d903      	bls.n	800ad2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	220d      	movs	r2, #13
 800ad26:	701a      	strb	r2, [r3, #0]
      break;
 800ad28:	e0c9      	b.n	800aebe <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	795b      	ldrb	r3, [r3, #5]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 f83d 	bl	800bdb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 f837 	bl	800bdb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]
      break;
 800ad4e:	e0b6      	b.n	800aebe <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d036      	beq.n	800adc8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad66:	23ff      	movs	r3, #255	; 0xff
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f9e5 	bl	800b138 <USBH_Get_StringDesc>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d111      	bne.n	800ad9c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2206      	movs	r2, #6
 800ad7c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2205      	movs	r2, #5
 800ad82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad92:	2300      	movs	r3, #0
 800ad94:	2200      	movs	r2, #0
 800ad96:	f001 f9fb 	bl	800c190 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad9a:	e092      	b.n	800aec2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	f040 808f 	bne.w	800aec2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2206      	movs	r2, #6
 800ada8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2205      	movs	r2, #5
 800adae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adbe:	2300      	movs	r3, #0
 800adc0:	2200      	movs	r2, #0
 800adc2:	f001 f9e5 	bl	800c190 <osMessageQueuePut>
      break;
 800adc6:	e07c      	b.n	800aec2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2206      	movs	r2, #6
 800adcc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2205      	movs	r2, #5
 800add2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ade2:	2300      	movs	r3, #0
 800ade4:	2200      	movs	r2, #0
 800ade6:	f001 f9d3 	bl	800c190 <osMessageQueuePut>
      break;
 800adea:	e06a      	b.n	800aec2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d027      	beq.n	800ae46 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae02:	23ff      	movs	r3, #255	; 0xff
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f997 	bl	800b138 <USBH_Get_StringDesc>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d103      	bne.n	800ae1c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2207      	movs	r2, #7
 800ae18:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae1a:	e054      	b.n	800aec6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d151      	bne.n	800aec6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2207      	movs	r2, #7
 800ae26:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f001 f9a6 	bl	800c190 <osMessageQueuePut>
      break;
 800ae44:	e03f      	b.n	800aec6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2207      	movs	r2, #7
 800ae4a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2205      	movs	r2, #5
 800ae50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae60:	2300      	movs	r3, #0
 800ae62:	2200      	movs	r2, #0
 800ae64:	f001 f994 	bl	800c190 <osMessageQueuePut>
      break;
 800ae68:	e02d      	b.n	800aec6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d017      	beq.n	800aea4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae80:	23ff      	movs	r3, #255	; 0xff
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f958 	bl	800b138 <USBH_Get_StringDesc>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d102      	bne.n	800ae98 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ae96:	e018      	b.n	800aeca <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d115      	bne.n	800aeca <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
      break;
 800aea2:	e012      	b.n	800aeca <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73fb      	strb	r3, [r7, #15]
      break;
 800aea8:	e00f      	b.n	800aeca <USBH_HandleEnum+0x44a>

    default:
      break;
 800aeaa:	bf00      	nop
 800aeac:	e00e      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aeae:	bf00      	nop
 800aeb0:	e00c      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aeb2:	bf00      	nop
 800aeb4:	e00a      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aeb6:	bf00      	nop
 800aeb8:	e008      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aeba:	bf00      	nop
 800aebc:	e006      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aebe:	bf00      	nop
 800aec0:	e004      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aec2:	bf00      	nop
 800aec4:	e002      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aec6:	bf00      	nop
 800aec8:	e000      	b.n	800aecc <USBH_HandleEnum+0x44c>
      break;
 800aeca:	bf00      	nop
  }
  return Status;
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop

0800aed8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f804 	bl	800af1a <USBH_HandleSof>
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b0b      	cmp	r3, #11
 800af2a:	d10a      	bne.n	800af42 <USBH_HandleSof+0x28>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d005      	beq.n	800af42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	4798      	blx	r3
  }
}
 800af42:	bf00      	nop
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af6e:	2300      	movs	r3, #0
 800af70:	2200      	movs	r2, #0
 800af72:	f001 f90d 	bl	800c190 <osMessageQueuePut>
#endif
#endif

  return;
 800af76:	bf00      	nop
}
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800af8e:	bf00      	nop
}
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afce:	2300      	movs	r3, #0
 800afd0:	2200      	movs	r2, #0
 800afd2:	f001 f8dd 	bl	800c190 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f003 fff8 	bl	800eff6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	791b      	ldrb	r3, [r3, #4]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fecf 	bl	800bdb0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	795b      	ldrb	r3, [r3, #5]
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fec9 	bl	800bdb0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b032:	2300      	movs	r3, #0
 800b034:	2200      	movs	r2, #0
 800b036:	f001 f8ab 	bl	800c190 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b05c:	2200      	movs	r2, #0
 800b05e:	f001 f8f7 	bl	800c250 <osMessageQueueGet>
 800b062:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f0      	bne.n	800b04c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff faa6 	bl	800a5bc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b070:	e7ec      	b.n	800b04c <USBH_Process_OS+0x8>

0800b072 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b08e:	2300      	movs	r3, #0
 800b090:	2200      	movs	r2, #0
 800b092:	f001 f87d 	bl	800c190 <osMessageQueuePut>
#endif

  return USBH_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b0b2:	78fb      	ldrb	r3, [r7, #3]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f864 	bl	800b18e <USBH_GetDescriptor>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0dc:	78fa      	ldrb	r2, [r7, #3]
 800b0de:	b292      	uxth	r2, r2
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	f000 f918 	bl	800b316 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af02      	add	r7, sp, #8
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	331c      	adds	r3, #28
 800b100:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b102:	887b      	ldrh	r3, [r7, #2]
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b10c:	2100      	movs	r1, #0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f83d 	bl	800b18e <USBH_GetDescriptor>
 800b114:	4603      	mov	r3, r0
 800b116:	72fb      	strb	r3, [r7, #11]
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d107      	bne.n	800b12e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b124:	887a      	ldrh	r2, [r7, #2]
 800b126:	68f9      	ldr	r1, [r7, #12]
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 f964 	bl	800b3f6 <USBH_ParseCfgDesc>
  }

  return status;
 800b12e:	7afb      	ldrb	r3, [r7, #11]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af02      	add	r7, sp, #8
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	461a      	mov	r2, r3
 800b144:	460b      	mov	r3, r1
 800b146:	72fb      	strb	r3, [r7, #11]
 800b148:	4613      	mov	r3, r2
 800b14a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b14c:	7afb      	ldrb	r3, [r7, #11]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b154:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b15c:	893b      	ldrh	r3, [r7, #8]
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	460b      	mov	r3, r1
 800b162:	2100      	movs	r1, #0
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f812 	bl	800b18e <USBH_GetDescriptor>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d107      	bne.n	800b184 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b17a:	893a      	ldrh	r2, [r7, #8]
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fa37 	bl	800b5f2 <USBH_ParseStringDesc>
  }

  return status;
 800b184:	7dfb      	ldrb	r3, [r7, #23]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	607b      	str	r3, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	72fb      	strb	r3, [r7, #11]
 800b19c:	4613      	mov	r3, r2
 800b19e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	789b      	ldrb	r3, [r3, #2]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d11c      	bne.n	800b1e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2206      	movs	r2, #6
 800b1b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	893a      	ldrh	r2, [r7, #8]
 800b1be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b1c0:	893b      	ldrh	r3, [r7, #8]
 800b1c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1ca:	d104      	bne.n	800b1d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f240 4209 	movw	r2, #1033	; 0x409
 800b1d2:	829a      	strh	r2, [r3, #20]
 800b1d4:	e002      	b.n	800b1dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	8b3a      	ldrh	r2, [r7, #24]
 800b1e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b1e2:	8b3b      	ldrh	r3, [r7, #24]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 fa50 	bl	800b68e <USBH_CtlReq>
 800b1ee:	4603      	mov	r3, r0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	789b      	ldrb	r3, [r3, #2]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d10f      	bne.n	800b22c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2205      	movs	r2, #5
 800b216:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b22c:	2200      	movs	r2, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa2c 	bl	800b68e <USBH_CtlReq>
 800b236:	4603      	mov	r3, r0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	789b      	ldrb	r3, [r3, #2]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d10e      	bne.n	800b272 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2209      	movs	r2, #9
 800b25e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	887a      	ldrh	r2, [r7, #2]
 800b264:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b272:	2200      	movs	r2, #0
 800b274:	2100      	movs	r1, #0
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fa09 	bl	800b68e <USBH_CtlReq>
 800b27c:	4603      	mov	r3, r0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	789b      	ldrb	r3, [r3, #2]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d10f      	bne.n	800b2ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2a6:	78fb      	ldrb	r3, [r7, #3]
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2100      	movs	r1, #0
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f9e5 	bl	800b68e <USBH_CtlReq>
 800b2c4:	4603      	mov	r3, r0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	789b      	ldrb	r3, [r3, #2]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d10f      	bne.n	800b302 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b2f4:	78fb      	ldrb	r3, [r7, #3]
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b302:	2200      	movs	r2, #0
 800b304:	2100      	movs	r1, #0
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f9c1 	bl	800b68e <USBH_CtlReq>
 800b30c:	4603      	mov	r3, r0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	4613      	mov	r3, r2
 800b322:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	781a      	ldrb	r2, [r3, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	785a      	ldrb	r2, [r3, #1]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	3302      	adds	r3, #2
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	3303      	adds	r3, #3
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	b29b      	uxth	r3, r3
 800b348:	4313      	orrs	r3, r2
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	791a      	ldrb	r2, [r3, #4]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	795a      	ldrb	r2, [r3, #5]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	799a      	ldrb	r2, [r3, #6]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	79da      	ldrb	r2, [r3, #7]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b370:	88fb      	ldrh	r3, [r7, #6]
 800b372:	2b08      	cmp	r3, #8
 800b374:	d939      	bls.n	800b3ea <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	3308      	adds	r3, #8
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	3309      	adds	r3, #9
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	021b      	lsls	r3, r3, #8
 800b388:	b29b      	uxth	r3, r3
 800b38a:	4313      	orrs	r3, r2
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	330a      	adds	r3, #10
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	b29a      	uxth	r2, r3
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	330b      	adds	r3, #11
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	021b      	lsls	r3, r3, #8
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	330c      	adds	r3, #12
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	330d      	adds	r3, #13
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	021b      	lsls	r3, r3, #8
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	7b9a      	ldrb	r2, [r3, #14]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	7bda      	ldrb	r2, [r3, #15]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	7c1a      	ldrb	r2, [r3, #16]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	7c5a      	ldrb	r2, [r3, #17]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	745a      	strb	r2, [r3, #17]
  }
}
 800b3ea:	bf00      	nop
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b08a      	sub	sp, #40	; 0x28
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	4613      	mov	r3, r2
 800b402:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	781a      	ldrb	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	785a      	ldrb	r2, [r3, #1]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	3302      	adds	r3, #2
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b29a      	uxth	r2, r3
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3303      	adds	r3, #3
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b29b      	uxth	r3, r3
 800b438:	021b      	lsls	r3, r3, #8
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4313      	orrs	r3, r2
 800b43e:	b29a      	uxth	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	791a      	ldrb	r2, [r3, #4]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	795a      	ldrb	r2, [r3, #5]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	799a      	ldrb	r2, [r3, #6]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	79da      	ldrb	r2, [r3, #7]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	7a1a      	ldrb	r2, [r3, #8]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b46c:	88fb      	ldrh	r3, [r7, #6]
 800b46e:	2b09      	cmp	r3, #9
 800b470:	d95f      	bls.n	800b532 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b472:	2309      	movs	r3, #9
 800b474:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b476:	2300      	movs	r3, #0
 800b478:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b47a:	e051      	b.n	800b520 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b47c:	f107 0316 	add.w	r3, r7, #22
 800b480:	4619      	mov	r1, r3
 800b482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b484:	f000 f8e8 	bl	800b658 <USBH_GetNextDesc>
 800b488:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d146      	bne.n	800b520 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b496:	221a      	movs	r2, #26
 800b498:	fb02 f303 	mul.w	r3, r2, r3
 800b49c:	3308      	adds	r3, #8
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	3302      	adds	r3, #2
 800b4a4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b4a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4a8:	69f8      	ldr	r0, [r7, #28]
 800b4aa:	f000 f846 	bl	800b53a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b4b8:	e022      	b.n	800b500 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b4ba:	f107 0316 	add.w	r3, r7, #22
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4c2:	f000 f8c9 	bl	800b658 <USBH_GetNextDesc>
 800b4c6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b05      	cmp	r3, #5
 800b4ce:	d117      	bne.n	800b500 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b4d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b4d8:	3201      	adds	r2, #1
 800b4da:	00d2      	lsls	r2, r2, #3
 800b4dc:	211a      	movs	r1, #26
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4f0:	69b8      	ldr	r0, [r7, #24]
 800b4f2:	f000 f851 	bl	800b598 <USBH_ParseEPDesc>
            ep_ix++;
 800b4f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	791b      	ldrb	r3, [r3, #4]
 800b504:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b508:	429a      	cmp	r2, r3
 800b50a:	d204      	bcs.n	800b516 <USBH_ParseCfgDesc+0x120>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	885a      	ldrh	r2, [r3, #2]
 800b510:	8afb      	ldrh	r3, [r7, #22]
 800b512:	429a      	cmp	r2, r3
 800b514:	d8d1      	bhi.n	800b4ba <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b51a:	3301      	adds	r3, #1
 800b51c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b524:	2b01      	cmp	r3, #1
 800b526:	d804      	bhi.n	800b532 <USBH_ParseCfgDesc+0x13c>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	885a      	ldrh	r2, [r3, #2]
 800b52c:	8afb      	ldrh	r3, [r7, #22]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d8a4      	bhi.n	800b47c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b532:	bf00      	nop
 800b534:	3728      	adds	r7, #40	; 0x28
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781a      	ldrb	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	785a      	ldrb	r2, [r3, #1]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	789a      	ldrb	r2, [r3, #2]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	78da      	ldrb	r2, [r3, #3]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	791a      	ldrb	r2, [r3, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	795a      	ldrb	r2, [r3, #5]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	799a      	ldrb	r2, [r3, #6]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	79da      	ldrb	r2, [r3, #7]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	7a1a      	ldrb	r2, [r3, #8]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	721a      	strb	r2, [r3, #8]
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781a      	ldrb	r2, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	785a      	ldrb	r2, [r3, #1]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	789a      	ldrb	r2, [r3, #2]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	78da      	ldrb	r2, [r3, #3]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	3305      	adds	r3, #5
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	021b      	lsls	r3, r3, #8
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	799a      	ldrb	r2, [r3, #6]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	719a      	strb	r2, [r3, #6]
}
 800b5e6:	bf00      	nop
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b087      	sub	sp, #28
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	60f8      	str	r0, [r7, #12]
 800b5fa:	60b9      	str	r1, [r7, #8]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3301      	adds	r3, #1
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	2b03      	cmp	r3, #3
 800b608:	d120      	bne.n	800b64c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	1e9a      	subs	r2, r3, #2
 800b610:	88fb      	ldrh	r3, [r7, #6]
 800b612:	4293      	cmp	r3, r2
 800b614:	bf28      	it	cs
 800b616:	4613      	movcs	r3, r2
 800b618:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3302      	adds	r3, #2
 800b61e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b620:	2300      	movs	r3, #0
 800b622:	82fb      	strh	r3, [r7, #22]
 800b624:	e00b      	b.n	800b63e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b626:	8afb      	ldrh	r3, [r7, #22]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4413      	add	r3, r2
 800b62c:	781a      	ldrb	r2, [r3, #0]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	3301      	adds	r3, #1
 800b636:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b638:	8afb      	ldrh	r3, [r7, #22]
 800b63a:	3302      	adds	r3, #2
 800b63c:	82fb      	strh	r3, [r7, #22]
 800b63e:	8afa      	ldrh	r2, [r7, #22]
 800b640:	8abb      	ldrh	r3, [r7, #20]
 800b642:	429a      	cmp	r2, r3
 800b644:	d3ef      	bcc.n	800b626 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	701a      	strb	r2, [r3, #0]
  }
}
 800b64c:	bf00      	nop
 800b64e:	371c      	adds	r7, #28
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	881a      	ldrh	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	4413      	add	r3, r2
 800b66e:	b29a      	uxth	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b680:	68fb      	ldr	r3, [r7, #12]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b086      	sub	sp, #24
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	4613      	mov	r3, r2
 800b69a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b69c:	2301      	movs	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	789b      	ldrb	r3, [r3, #2]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d002      	beq.n	800b6ae <USBH_CtlReq+0x20>
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d01d      	beq.n	800b6e8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b6ac:	e043      	b.n	800b736 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	88fa      	ldrh	r2, [r7, #6]
 800b6b8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6de:	2300      	movs	r3, #0
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f000 fd55 	bl	800c190 <osMessageQueuePut>
      break;
 800b6e6:	e026      	b.n	800b736 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f829 	bl	800b740 <USBH_HandleControl>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b6f2:	7dfb      	ldrb	r3, [r7, #23]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <USBH_CtlReq+0x70>
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d106      	bne.n	800b70c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2201      	movs	r2, #1
 800b702:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	761a      	strb	r2, [r3, #24]
 800b70a:	e005      	b.n	800b718 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d102      	bne.n	800b718 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2201      	movs	r2, #1
 800b716:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2203      	movs	r2, #3
 800b71c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b72c:	2300      	movs	r3, #0
 800b72e:	2200      	movs	r2, #0
 800b730:	f000 fd2e 	bl	800c190 <osMessageQueuePut>
      break;
 800b734:	bf00      	nop
  }
  return status;
 800b736:	7dfb      	ldrb	r3, [r7, #23]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af02      	add	r7, sp, #8
 800b746:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b748:	2301      	movs	r3, #1
 800b74a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	7e1b      	ldrb	r3, [r3, #24]
 800b754:	3b01      	subs	r3, #1
 800b756:	2b0a      	cmp	r3, #10
 800b758:	f200 8229 	bhi.w	800bbae <USBH_HandleControl+0x46e>
 800b75c:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <USBH_HandleControl+0x24>)
 800b75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b762:	bf00      	nop
 800b764:	0800b791 	.word	0x0800b791
 800b768:	0800b7ab 	.word	0x0800b7ab
 800b76c:	0800b84d 	.word	0x0800b84d
 800b770:	0800b873 	.word	0x0800b873
 800b774:	0800b8ff 	.word	0x0800b8ff
 800b778:	0800b929 	.word	0x0800b929
 800b77c:	0800b9eb 	.word	0x0800b9eb
 800b780:	0800ba0d 	.word	0x0800ba0d
 800b784:	0800ba9f 	.word	0x0800ba9f
 800b788:	0800bac5 	.word	0x0800bac5
 800b78c:	0800bb57 	.word	0x0800bb57
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f103 0110 	add.w	r1, r3, #16
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	795b      	ldrb	r3, [r3, #5]
 800b79a:	461a      	mov	r2, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fa17 	bl	800bbd0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	761a      	strb	r2, [r3, #24]
      break;
 800b7a8:	e20c      	b.n	800bbc4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	795b      	ldrb	r3, [r3, #5]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f003 fd0f 	bl	800f1d4 <USBH_LL_GetURBState>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7ba:	7bbb      	ldrb	r3, [r7, #14]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d12c      	bne.n	800b81a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	7c1b      	ldrb	r3, [r3, #16]
 800b7c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	8adb      	ldrh	r3, [r3, #22]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00a      	beq.n	800b7e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7d2:	7b7b      	ldrb	r3, [r7, #13]
 800b7d4:	2b80      	cmp	r3, #128	; 0x80
 800b7d6:	d103      	bne.n	800b7e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	761a      	strb	r2, [r3, #24]
 800b7de:	e00d      	b.n	800b7fc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2205      	movs	r2, #5
 800b7e4:	761a      	strb	r2, [r3, #24]
 800b7e6:	e009      	b.n	800b7fc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b7e8:	7b7b      	ldrb	r3, [r7, #13]
 800b7ea:	2b80      	cmp	r3, #128	; 0x80
 800b7ec:	d103      	bne.n	800b7f6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2209      	movs	r2, #9
 800b7f2:	761a      	strb	r2, [r3, #24]
 800b7f4:	e002      	b.n	800b7fc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2207      	movs	r2, #7
 800b7fa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2203      	movs	r2, #3
 800b800:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b810:	2300      	movs	r3, #0
 800b812:	2200      	movs	r2, #0
 800b814:	f000 fcbc 	bl	800c190 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b818:	e1cb      	b.n	800bbb2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d003      	beq.n	800b828 <USBH_HandleControl+0xe8>
 800b820:	7bbb      	ldrb	r3, [r7, #14]
 800b822:	2b02      	cmp	r3, #2
 800b824:	f040 81c5 	bne.w	800bbb2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	220b      	movs	r2, #11
 800b82c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2203      	movs	r2, #3
 800b832:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b842:	2300      	movs	r3, #0
 800b844:	2200      	movs	r2, #0
 800b846:	f000 fca3 	bl	800c190 <osMessageQueuePut>
      break;
 800b84a:	e1b2      	b.n	800bbb2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b852:	b29a      	uxth	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6899      	ldr	r1, [r3, #8]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	899a      	ldrh	r2, [r3, #12]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	791b      	ldrb	r3, [r3, #4]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f9f2 	bl	800bc4e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2204      	movs	r2, #4
 800b86e:	761a      	strb	r2, [r3, #24]
      break;
 800b870:	e1a8      	b.n	800bbc4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	791b      	ldrb	r3, [r3, #4]
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f003 fcab 	bl	800f1d4 <USBH_LL_GetURBState>
 800b87e:	4603      	mov	r3, r0
 800b880:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b882:	7bbb      	ldrb	r3, [r7, #14]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d110      	bne.n	800b8aa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2209      	movs	r2, #9
 800b88c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2203      	movs	r2, #3
 800b892:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f000 fc73 	bl	800c190 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b05      	cmp	r3, #5
 800b8ae:	d110      	bne.n	800b8d2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2203      	movs	r2, #3
 800b8b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f000 fc60 	bl	800c190 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8d0:	e171      	b.n	800bbb6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	2b04      	cmp	r3, #4
 800b8d6:	f040 816e 	bne.w	800bbb6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	220b      	movs	r2, #11
 800b8de:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2203      	movs	r2, #3
 800b8e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f000 fc4a 	bl	800c190 <osMessageQueuePut>
      break;
 800b8fc:	e15b      	b.n	800bbb6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6899      	ldr	r1, [r3, #8]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	899a      	ldrh	r2, [r3, #12]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	795b      	ldrb	r3, [r3, #5]
 800b90a:	2001      	movs	r0, #1
 800b90c:	9000      	str	r0, [sp, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f978 	bl	800bc04 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2206      	movs	r2, #6
 800b924:	761a      	strb	r2, [r3, #24]
      break;
 800b926:	e14d      	b.n	800bbc4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	795b      	ldrb	r3, [r3, #5]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f003 fc50 	bl	800f1d4 <USBH_LL_GetURBState>
 800b934:	4603      	mov	r3, r0
 800b936:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d111      	bne.n	800b962 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2207      	movs	r2, #7
 800b942:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2203      	movs	r2, #3
 800b948:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	f000 fc18 	bl	800c190 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b960:	e12b      	b.n	800bbba <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	2b05      	cmp	r3, #5
 800b966:	d113      	bne.n	800b990 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	220c      	movs	r2, #12
 800b96c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b96e:	2303      	movs	r3, #3
 800b970:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2203      	movs	r2, #3
 800b976:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	f000 fc01 	bl	800c190 <osMessageQueuePut>
      break;
 800b98e:	e114      	b.n	800bbba <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b990:	7bbb      	ldrb	r3, [r7, #14]
 800b992:	2b02      	cmp	r3, #2
 800b994:	d111      	bne.n	800b9ba <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2205      	movs	r2, #5
 800b99a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2203      	movs	r2, #3
 800b9a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f000 fbec 	bl	800c190 <osMessageQueuePut>
      break;
 800b9b8:	e0ff      	b.n	800bbba <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b04      	cmp	r3, #4
 800b9be:	f040 80fc 	bne.w	800bbba <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	220b      	movs	r2, #11
 800b9c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2203      	movs	r2, #3
 800b9d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f000 fbd4 	bl	800c190 <osMessageQueuePut>
      break;
 800b9e8:	e0e7      	b.n	800bbba <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	791b      	ldrb	r3, [r3, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f92b 	bl	800bc4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2208      	movs	r2, #8
 800ba08:	761a      	strb	r2, [r3, #24]

      break;
 800ba0a:	e0db      	b.n	800bbc4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	791b      	ldrb	r3, [r3, #4]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f003 fbde 	bl	800f1d4 <USBH_LL_GetURBState>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d113      	bne.n	800ba4a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	220d      	movs	r2, #13
 800ba26:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2203      	movs	r2, #3
 800ba30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba40:	2300      	movs	r3, #0
 800ba42:	2200      	movs	r2, #0
 800ba44:	f000 fba4 	bl	800c190 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba48:	e0b9      	b.n	800bbbe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d111      	bne.n	800ba74 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	220b      	movs	r2, #11
 800ba54:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2203      	movs	r2, #3
 800ba5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f000 fb8f 	bl	800c190 <osMessageQueuePut>
      break;
 800ba72:	e0a4      	b.n	800bbbe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	2b05      	cmp	r3, #5
 800ba78:	f040 80a1 	bne.w	800bbbe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2203      	movs	r2, #3
 800ba84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba94:	2300      	movs	r3, #0
 800ba96:	2200      	movs	r2, #0
 800ba98:	f000 fb7a 	bl	800c190 <osMessageQueuePut>
      break;
 800ba9c:	e08f      	b.n	800bbbe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	795b      	ldrb	r3, [r3, #5]
 800baa2:	2201      	movs	r2, #1
 800baa4:	9200      	str	r2, [sp, #0]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f8aa 	bl	800bc04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	220a      	movs	r2, #10
 800bac0:	761a      	strb	r2, [r3, #24]
      break;
 800bac2:	e07f      	b.n	800bbc4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	795b      	ldrb	r3, [r3, #5]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f003 fb82 	bl	800f1d4 <USBH_LL_GetURBState>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d113      	bne.n	800bb02 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	220d      	movs	r2, #13
 800bae2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2203      	movs	r2, #3
 800bae8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800baf8:	2300      	movs	r3, #0
 800bafa:	2200      	movs	r2, #0
 800bafc:	f000 fb48 	bl	800c190 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb00:	e05f      	b.n	800bbc2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb02:	7bbb      	ldrb	r3, [r7, #14]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d111      	bne.n	800bb2c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2209      	movs	r2, #9
 800bb0c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2203      	movs	r2, #3
 800bb12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb22:	2300      	movs	r3, #0
 800bb24:	2200      	movs	r2, #0
 800bb26:	f000 fb33 	bl	800c190 <osMessageQueuePut>
      break;
 800bb2a:	e04a      	b.n	800bbc2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d147      	bne.n	800bbc2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	220b      	movs	r2, #11
 800bb36:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f000 fb1e 	bl	800c190 <osMessageQueuePut>
      break;
 800bb54:	e035      	b.n	800bbc2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7e5b      	ldrb	r3, [r3, #25]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	765a      	strb	r2, [r3, #25]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	7e5b      	ldrb	r3, [r3, #25]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d806      	bhi.n	800bb78 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb76:	e025      	b.n	800bbc4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb7e:	2106      	movs	r1, #6
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	795b      	ldrb	r3, [r3, #5]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f90d 	bl	800bdb0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	791b      	ldrb	r3, [r3, #4]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f907 	bl	800bdb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bba8:	2302      	movs	r3, #2
 800bbaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbac:	e00a      	b.n	800bbc4 <USBH_HandleControl+0x484>

    default:
      break;
 800bbae:	bf00      	nop
 800bbb0:	e008      	b.n	800bbc4 <USBH_HandleControl+0x484>
      break;
 800bbb2:	bf00      	nop
 800bbb4:	e006      	b.n	800bbc4 <USBH_HandleControl+0x484>
      break;
 800bbb6:	bf00      	nop
 800bbb8:	e004      	b.n	800bbc4 <USBH_HandleControl+0x484>
      break;
 800bbba:	bf00      	nop
 800bbbc:	e002      	b.n	800bbc4 <USBH_HandleControl+0x484>
      break;
 800bbbe:	bf00      	nop
 800bbc0:	e000      	b.n	800bbc4 <USBH_HandleControl+0x484>
      break;
 800bbc2:	bf00      	nop
  }

  return status;
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop

0800bbd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af04      	add	r7, sp, #16
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbde:	79f9      	ldrb	r1, [r7, #7]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9303      	str	r3, [sp, #12]
 800bbe4:	2308      	movs	r3, #8
 800bbe6:	9302      	str	r3, [sp, #8]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	2300      	movs	r3, #0
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f003 fabc 	bl	800f172 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af04      	add	r7, sp, #16
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	461a      	mov	r2, r3
 800bc12:	460b      	mov	r3, r1
 800bc14:	80fb      	strh	r3, [r7, #6]
 800bc16:	4613      	mov	r3, r2
 800bc18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc28:	7979      	ldrb	r1, [r7, #5]
 800bc2a:	7e3b      	ldrb	r3, [r7, #24]
 800bc2c:	9303      	str	r3, [sp, #12]
 800bc2e:	88fb      	ldrh	r3, [r7, #6]
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	2301      	movs	r3, #1
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f003 fa97 	bl	800f172 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b088      	sub	sp, #32
 800bc52:	af04      	add	r7, sp, #16
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	60b9      	str	r1, [r7, #8]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	80fb      	strh	r3, [r7, #6]
 800bc60:	4613      	mov	r3, r2
 800bc62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc64:	7979      	ldrb	r1, [r7, #5]
 800bc66:	2300      	movs	r3, #0
 800bc68:	9303      	str	r3, [sp, #12]
 800bc6a:	88fb      	ldrh	r3, [r7, #6]
 800bc6c:	9302      	str	r3, [sp, #8]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	2301      	movs	r3, #1
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	2300      	movs	r3, #0
 800bc78:	2201      	movs	r2, #1
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f003 fa79 	bl	800f172 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc80:	2300      	movs	r3, #0

}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b088      	sub	sp, #32
 800bc8e:	af04      	add	r7, sp, #16
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	4611      	mov	r1, r2
 800bc96:	461a      	mov	r2, r3
 800bc98:	460b      	mov	r3, r1
 800bc9a:	80fb      	strh	r3, [r7, #6]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcae:	7979      	ldrb	r1, [r7, #5]
 800bcb0:	7e3b      	ldrb	r3, [r7, #24]
 800bcb2:	9303      	str	r3, [sp, #12]
 800bcb4:	88fb      	ldrh	r3, [r7, #6]
 800bcb6:	9302      	str	r3, [sp, #8]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	9301      	str	r3, [sp, #4]
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	2302      	movs	r3, #2
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f003 fa54 	bl	800f172 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af04      	add	r7, sp, #16
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	4611      	mov	r1, r2
 800bce0:	461a      	mov	r2, r3
 800bce2:	460b      	mov	r3, r1
 800bce4:	80fb      	strh	r3, [r7, #6]
 800bce6:	4613      	mov	r3, r2
 800bce8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcea:	7979      	ldrb	r1, [r7, #5]
 800bcec:	2300      	movs	r3, #0
 800bcee:	9303      	str	r3, [sp, #12]
 800bcf0:	88fb      	ldrh	r3, [r7, #6]
 800bcf2:	9302      	str	r3, [sp, #8]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	2201      	movs	r2, #1
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f003 fa36 	bl	800f172 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af04      	add	r7, sp, #16
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	4608      	mov	r0, r1
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	70fb      	strb	r3, [r7, #3]
 800bd22:	460b      	mov	r3, r1
 800bd24:	70bb      	strb	r3, [r7, #2]
 800bd26:	4613      	mov	r3, r2
 800bd28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd2a:	7878      	ldrb	r0, [r7, #1]
 800bd2c:	78ba      	ldrb	r2, [r7, #2]
 800bd2e:	78f9      	ldrb	r1, [r7, #3]
 800bd30:	8b3b      	ldrh	r3, [r7, #24]
 800bd32:	9302      	str	r3, [sp, #8]
 800bd34:	7d3b      	ldrb	r3, [r7, #20]
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	7c3b      	ldrb	r3, [r7, #16]
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f003 f9c9 	bl	800f0d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	460b      	mov	r3, r1
 800bd58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f003 f9e8 	bl	800f134 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	460b      	mov	r3, r1
 800bd78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f836 	bl	800bdec <USBH_GetFreePipe>
 800bd80:	4603      	mov	r3, r0
 800bd82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd84:	89fb      	ldrh	r3, [r7, #14]
 800bd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d00a      	beq.n	800bda4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bd8e:	78fa      	ldrb	r2, [r7, #3]
 800bd90:	89fb      	ldrh	r3, [r7, #14]
 800bd92:	f003 030f 	and.w	r3, r3, #15
 800bd96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	33e0      	adds	r3, #224	; 0xe0
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	440b      	add	r3, r1
 800bda2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bda4:	89fb      	ldrh	r3, [r7, #14]
 800bda6:	b2db      	uxtb	r3, r3
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	2b0a      	cmp	r3, #10
 800bdc0:	d80d      	bhi.n	800bdde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bdc2:	78fb      	ldrb	r3, [r7, #3]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	33e0      	adds	r3, #224	; 0xe0
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bdd4:	6879      	ldr	r1, [r7, #4]
 800bdd6:	33e0      	adds	r3, #224	; 0xe0
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	440b      	add	r3, r1
 800bddc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
 800bdfc:	e00f      	b.n	800be1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	33e0      	adds	r3, #224	; 0xe0
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d102      	bne.n	800be18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	b29b      	uxth	r3, r3
 800be16:	e007      	b.n	800be28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	3301      	adds	r3, #1
 800be1c:	73fb      	strb	r3, [r7, #15]
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	2b0a      	cmp	r3, #10
 800be22:	d9ec      	bls.n	800bdfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <__NVIC_SetPriority>:
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	6039      	str	r1, [r7, #0]
 800be3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be44:	2b00      	cmp	r3, #0
 800be46:	db0a      	blt.n	800be5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	490c      	ldr	r1, [pc, #48]	; (800be80 <__NVIC_SetPriority+0x4c>)
 800be4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be52:	0112      	lsls	r2, r2, #4
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	440b      	add	r3, r1
 800be58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be5c:	e00a      	b.n	800be74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	b2da      	uxtb	r2, r3
 800be62:	4908      	ldr	r1, [pc, #32]	; (800be84 <__NVIC_SetPriority+0x50>)
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	f003 030f 	and.w	r3, r3, #15
 800be6a:	3b04      	subs	r3, #4
 800be6c:	0112      	lsls	r2, r2, #4
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	440b      	add	r3, r1
 800be72:	761a      	strb	r2, [r3, #24]
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	e000e100 	.word	0xe000e100
 800be84:	e000ed00 	.word	0xe000ed00

0800be88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be8c:	4b05      	ldr	r3, [pc, #20]	; (800bea4 <SysTick_Handler+0x1c>)
 800be8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be90:	f001 fee8 	bl	800dc64 <xTaskGetSchedulerState>
 800be94:	4603      	mov	r3, r0
 800be96:	2b01      	cmp	r3, #1
 800be98:	d001      	beq.n	800be9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be9a:	f002 fccd 	bl	800e838 <xPortSysTickHandler>
  }
}
 800be9e:	bf00      	nop
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	e000e010 	.word	0xe000e010

0800bea8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800beac:	2100      	movs	r1, #0
 800beae:	f06f 0004 	mvn.w	r0, #4
 800beb2:	f7ff ffbf 	bl	800be34 <__NVIC_SetPriority>
#endif
}
 800beb6:	bf00      	nop
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bec2:	f3ef 8305 	mrs	r3, IPSR
 800bec6:	603b      	str	r3, [r7, #0]
  return(result);
 800bec8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bece:	f06f 0305 	mvn.w	r3, #5
 800bed2:	607b      	str	r3, [r7, #4]
 800bed4:	e00c      	b.n	800bef0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bed6:	4b0a      	ldr	r3, [pc, #40]	; (800bf00 <osKernelInitialize+0x44>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bede:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <osKernelInitialize+0x44>)
 800bee0:	2201      	movs	r2, #1
 800bee2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bee4:	2300      	movs	r3, #0
 800bee6:	607b      	str	r3, [r7, #4]
 800bee8:	e002      	b.n	800bef0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800beea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bef0:	687b      	ldr	r3, [r7, #4]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	200004c0 	.word	0x200004c0

0800bf04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0a:	f3ef 8305 	mrs	r3, IPSR
 800bf0e:	603b      	str	r3, [r7, #0]
  return(result);
 800bf10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf16:	f06f 0305 	mvn.w	r3, #5
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	e010      	b.n	800bf40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <osKernelStart+0x48>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d109      	bne.n	800bf3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf26:	f7ff ffbf 	bl	800bea8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf2a:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <osKernelStart+0x48>)
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf30:	f001 fa50 	bl	800d3d4 <vTaskStartScheduler>
      stat = osOK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	607b      	str	r3, [r7, #4]
 800bf38:	e002      	b.n	800bf40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf40:	687b      	ldr	r3, [r7, #4]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200004c0 	.word	0x200004c0

0800bf50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08e      	sub	sp, #56	; 0x38
 800bf54:	af04      	add	r7, sp, #16
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf60:	f3ef 8305 	mrs	r3, IPSR
 800bf64:	617b      	str	r3, [r7, #20]
  return(result);
 800bf66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d17e      	bne.n	800c06a <osThreadNew+0x11a>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d07b      	beq.n	800c06a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf72:	2380      	movs	r3, #128	; 0x80
 800bf74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf76:	2318      	movs	r3, #24
 800bf78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d045      	beq.n	800c016 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <osThreadNew+0x48>
        name = attr->name;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d008      	beq.n	800bfbe <osThreadNew+0x6e>
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	2b38      	cmp	r3, #56	; 0x38
 800bfb0:	d805      	bhi.n	800bfbe <osThreadNew+0x6e>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f003 0301 	and.w	r3, r3, #1
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <osThreadNew+0x72>
        return (NULL);
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	e054      	b.n	800c06c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d003      	beq.n	800bfd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	089b      	lsrs	r3, r3, #2
 800bfd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00e      	beq.n	800bff8 <osThreadNew+0xa8>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	2b5b      	cmp	r3, #91	; 0x5b
 800bfe0:	d90a      	bls.n	800bff8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d006      	beq.n	800bff8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <osThreadNew+0xa8>
        mem = 1;
 800bff2:	2301      	movs	r3, #1
 800bff4:	61bb      	str	r3, [r7, #24]
 800bff6:	e010      	b.n	800c01a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10c      	bne.n	800c01a <osThreadNew+0xca>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d108      	bne.n	800c01a <osThreadNew+0xca>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d104      	bne.n	800c01a <osThreadNew+0xca>
          mem = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	61bb      	str	r3, [r7, #24]
 800c014:	e001      	b.n	800c01a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d110      	bne.n	800c042 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c028:	9202      	str	r2, [sp, #8]
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	6a3a      	ldr	r2, [r7, #32]
 800c034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f000 fff6 	bl	800d028 <xTaskCreateStatic>
 800c03c:	4603      	mov	r3, r0
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	e013      	b.n	800c06a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d110      	bne.n	800c06a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	f107 0310 	add.w	r3, r7, #16
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f001 f841 	bl	800d0e2 <xTaskCreate>
 800c060:	4603      	mov	r3, r0
 800c062:	2b01      	cmp	r3, #1
 800c064:	d001      	beq.n	800c06a <osThreadNew+0x11a>
            hTask = NULL;
 800c066:	2300      	movs	r3, #0
 800c068:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c06a:	693b      	ldr	r3, [r7, #16]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3728      	adds	r7, #40	; 0x28
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c07c:	f3ef 8305 	mrs	r3, IPSR
 800c080:	60bb      	str	r3, [r7, #8]
  return(result);
 800c082:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c084:	2b00      	cmp	r3, #0
 800c086:	d003      	beq.n	800c090 <osDelay+0x1c>
    stat = osErrorISR;
 800c088:	f06f 0305 	mvn.w	r3, #5
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e007      	b.n	800c0a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d002      	beq.n	800c0a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 f966 	bl	800d36c <vTaskDelay>
    }
  }

  return (stat);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b08a      	sub	sp, #40	; 0x28
 800c0ae:	af02      	add	r7, sp, #8
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	60b9      	str	r1, [r7, #8]
 800c0b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ba:	f3ef 8305 	mrs	r3, IPSR
 800c0be:	613b      	str	r3, [r7, #16]
  return(result);
 800c0c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d15f      	bne.n	800c186 <osMessageQueueNew+0xdc>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d05c      	beq.n	800c186 <osMessageQueueNew+0xdc>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d059      	beq.n	800c186 <osMessageQueueNew+0xdc>
    mem = -1;
 800c0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d029      	beq.n	800c132 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d012      	beq.n	800c10c <osMessageQueueNew+0x62>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	2b4f      	cmp	r3, #79	; 0x4f
 800c0ec:	d90e      	bls.n	800c10c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	695a      	ldr	r2, [r3, #20]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	fb01 f303 	mul.w	r3, r1, r3
 800c102:	429a      	cmp	r2, r3
 800c104:	d302      	bcc.n	800c10c <osMessageQueueNew+0x62>
        mem = 1;
 800c106:	2301      	movs	r3, #1
 800c108:	61bb      	str	r3, [r7, #24]
 800c10a:	e014      	b.n	800c136 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d110      	bne.n	800c136 <osMessageQueueNew+0x8c>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10c      	bne.n	800c136 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c120:	2b00      	cmp	r3, #0
 800c122:	d108      	bne.n	800c136 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <osMessageQueueNew+0x8c>
          mem = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61bb      	str	r3, [r7, #24]
 800c130:	e001      	b.n	800c136 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d10b      	bne.n	800c154 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	691a      	ldr	r2, [r3, #16]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	2100      	movs	r1, #0
 800c146:	9100      	str	r1, [sp, #0]
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fa2e 	bl	800c5ac <xQueueGenericCreateStatic>
 800c150:	61f8      	str	r0, [r7, #28]
 800c152:	e008      	b.n	800c166 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d105      	bne.n	800c166 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c15a:	2200      	movs	r2, #0
 800c15c:	68b9      	ldr	r1, [r7, #8]
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 fa9c 	bl	800c69c <xQueueGenericCreate>
 800c164:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00c      	beq.n	800c186 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <osMessageQueueNew+0xd0>
        name = attr->name;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	617b      	str	r3, [r7, #20]
 800c178:	e001      	b.n	800c17e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c17e:	6979      	ldr	r1, [r7, #20]
 800c180:	69f8      	ldr	r0, [r7, #28]
 800c182:	f000 fef3 	bl	800cf6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c186:	69fb      	ldr	r3, [r7, #28]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	4613      	mov	r3, r2
 800c19e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a8:	f3ef 8305 	mrs	r3, IPSR
 800c1ac:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d028      	beq.n	800c206 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <osMessageQueuePut+0x36>
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <osMessageQueuePut+0x36>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c1c6:	f06f 0303 	mvn.w	r3, #3
 800c1ca:	61fb      	str	r3, [r7, #28]
 800c1cc:	e038      	b.n	800c240 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c1d2:	f107 0210 	add.w	r2, r7, #16
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	69b8      	ldr	r0, [r7, #24]
 800c1dc:	f000 fbba 	bl	800c954 <xQueueGenericSendFromISR>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d003      	beq.n	800c1ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c1e6:	f06f 0302 	mvn.w	r3, #2
 800c1ea:	61fb      	str	r3, [r7, #28]
 800c1ec:	e028      	b.n	800c240 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d025      	beq.n	800c240 <osMessageQueuePut+0xb0>
 800c1f4:	4b15      	ldr	r3, [pc, #84]	; (800c24c <osMessageQueuePut+0xbc>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	e01c      	b.n	800c240 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d002      	beq.n	800c212 <osMessageQueuePut+0x82>
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d103      	bne.n	800c21a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c212:	f06f 0303 	mvn.w	r3, #3
 800c216:	61fb      	str	r3, [r7, #28]
 800c218:	e012      	b.n	800c240 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c21a:	2300      	movs	r3, #0
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	69b8      	ldr	r0, [r7, #24]
 800c222:	f000 fa99 	bl	800c758 <xQueueGenericSend>
 800c226:	4603      	mov	r3, r0
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d009      	beq.n	800c240 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c232:	f06f 0301 	mvn.w	r3, #1
 800c236:	61fb      	str	r3, [r7, #28]
 800c238:	e002      	b.n	800c240 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c23a:	f06f 0302 	mvn.w	r3, #2
 800c23e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c240:	69fb      	ldr	r3, [r7, #28]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	e000ed04 	.word	0xe000ed04

0800c250 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c266:	f3ef 8305 	mrs	r3, IPSR
 800c26a:	617b      	str	r3, [r7, #20]
  return(result);
 800c26c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d028      	beq.n	800c2c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <osMessageQueueGet+0x34>
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <osMessageQueueGet+0x34>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c284:	f06f 0303 	mvn.w	r3, #3
 800c288:	61fb      	str	r3, [r7, #28]
 800c28a:	e037      	b.n	800c2fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c28c:	2300      	movs	r3, #0
 800c28e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c290:	f107 0310 	add.w	r3, r7, #16
 800c294:	461a      	mov	r2, r3
 800c296:	68b9      	ldr	r1, [r7, #8]
 800c298:	69b8      	ldr	r0, [r7, #24]
 800c29a:	f000 fcd7 	bl	800cc4c <xQueueReceiveFromISR>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d003      	beq.n	800c2ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c2a4:	f06f 0302 	mvn.w	r3, #2
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	e027      	b.n	800c2fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d024      	beq.n	800c2fc <osMessageQueueGet+0xac>
 800c2b2:	4b15      	ldr	r3, [pc, #84]	; (800c308 <osMessageQueueGet+0xb8>)
 800c2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	e01b      	b.n	800c2fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <osMessageQueueGet+0x80>
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c2d0:	f06f 0303 	mvn.w	r3, #3
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e011      	b.n	800c2fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	69b8      	ldr	r0, [r7, #24]
 800c2de:	f000 fbd5 	bl	800ca8c <xQueueReceive>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d009      	beq.n	800c2fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c2ee:	f06f 0301 	mvn.w	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	e002      	b.n	800c2fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c2f6:	f06f 0302 	mvn.w	r3, #2
 800c2fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2fc:	69fb      	ldr	r3, [r7, #28]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3720      	adds	r7, #32
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	e000ed04 	.word	0xe000ed04

0800c30c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4a07      	ldr	r2, [pc, #28]	; (800c338 <vApplicationGetIdleTaskMemory+0x2c>)
 800c31c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	4a06      	ldr	r2, [pc, #24]	; (800c33c <vApplicationGetIdleTaskMemory+0x30>)
 800c322:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2280      	movs	r2, #128	; 0x80
 800c328:	601a      	str	r2, [r3, #0]
}
 800c32a:	bf00      	nop
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	200004c4 	.word	0x200004c4
 800c33c:	20000520 	.word	0x20000520

0800c340 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a07      	ldr	r2, [pc, #28]	; (800c36c <vApplicationGetTimerTaskMemory+0x2c>)
 800c350:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4a06      	ldr	r2, [pc, #24]	; (800c370 <vApplicationGetTimerTaskMemory+0x30>)
 800c356:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c35e:	601a      	str	r2, [r3, #0]
}
 800c360:	bf00      	nop
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	20000720 	.word	0x20000720
 800c370:	2000077c 	.word	0x2000077c

0800c374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f103 0208 	add.w	r2, r3, #8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c38c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f103 0208 	add.w	r2, r3, #8
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f103 0208 	add.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c42c:	d103      	bne.n	800c436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3308      	adds	r3, #8
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	e002      	b.n	800c444 <vListInsert+0x2e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d2f6      	bcs.n	800c43e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6892      	ldr	r2, [r2, #8]
 800c49e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	6852      	ldr	r2, [r2, #4]
 800c4a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d103      	bne.n	800c4bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10a      	bne.n	800c506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c506:	f002 f905 	bl	800e714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c512:	68f9      	ldr	r1, [r7, #12]
 800c514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c516:	fb01 f303 	mul.w	r3, r1, r3
 800c51a:	441a      	add	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c536:	3b01      	subs	r3, #1
 800c538:	68f9      	ldr	r1, [r7, #12]
 800c53a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c53c:	fb01 f303 	mul.w	r3, r1, r3
 800c540:	441a      	add	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	22ff      	movs	r2, #255	; 0xff
 800c54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	22ff      	movs	r2, #255	; 0xff
 800c552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d114      	bne.n	800c586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d01a      	beq.n	800c59a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3310      	adds	r3, #16
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 f9bd 	bl	800d8e8 <xTaskRemoveFromEventList>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c574:	4b0c      	ldr	r3, [pc, #48]	; (800c5a8 <xQueueGenericReset+0xcc>)
 800c576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	e009      	b.n	800c59a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3310      	adds	r3, #16
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff fef2 	bl	800c374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3324      	adds	r3, #36	; 0x24
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff feed 	bl	800c374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c59a:	f002 f8eb 	bl	800e774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c59e:	2301      	movs	r3, #1
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08e      	sub	sp, #56	; 0x38
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <xQueueGenericCreateStatic+0x52>
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <xQueueGenericCreateStatic+0x56>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <xQueueGenericCreateStatic+0x58>
 800c602:	2300      	movs	r3, #0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	623b      	str	r3, [r7, #32]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <xQueueGenericCreateStatic+0x7e>
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <xQueueGenericCreateStatic+0x82>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <xQueueGenericCreateStatic+0x84>
 800c62e:	2300      	movs	r3, #0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	61fb      	str	r3, [r7, #28]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c64a:	2350      	movs	r3, #80	; 0x50
 800c64c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2b50      	cmp	r3, #80	; 0x50
 800c652:	d00a      	beq.n	800c66a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	61bb      	str	r3, [r7, #24]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c66a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00d      	beq.n	800c692 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c67e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4613      	mov	r3, r2
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	68b9      	ldr	r1, [r7, #8]
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 f83f 	bl	800c710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c694:	4618      	mov	r0, r3
 800c696:	3730      	adds	r7, #48	; 0x30
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08a      	sub	sp, #40	; 0x28
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	613b      	str	r3, [r7, #16]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	fb02 f303 	mul.w	r3, r2, r3
 800c6ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	3350      	adds	r3, #80	; 0x50
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f002 f93f 	bl	800e958 <pvPortMalloc>
 800c6da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d011      	beq.n	800c706 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	3350      	adds	r3, #80	; 0x50
 800c6ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6f4:	79fa      	ldrb	r2, [r7, #7]
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	68b9      	ldr	r1, [r7, #8]
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f000 f805 	bl	800c710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c706:	69bb      	ldr	r3, [r7, #24]
	}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d103      	bne.n	800c72c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e002      	b.n	800c732 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c73e:	2101      	movs	r1, #1
 800c740:	69b8      	ldr	r0, [r7, #24]
 800c742:	f7ff fecb 	bl	800c4dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	78fa      	ldrb	r2, [r7, #3]
 800c74a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08e      	sub	sp, #56	; 0x38
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c766:	2300      	movs	r3, #0
 800c768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10a      	bne.n	800c78a <xQueueGenericSend+0x32>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c786:	bf00      	nop
 800c788:	e7fe      	b.n	800c788 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d103      	bne.n	800c798 <xQueueGenericSend+0x40>
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <xQueueGenericSend+0x44>
 800c798:	2301      	movs	r3, #1
 800c79a:	e000      	b.n	800c79e <xQueueGenericSend+0x46>
 800c79c:	2300      	movs	r3, #0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <xQueueGenericSend+0x60>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d103      	bne.n	800c7c6 <xQueueGenericSend+0x6e>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d101      	bne.n	800c7ca <xQueueGenericSend+0x72>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e000      	b.n	800c7cc <xQueueGenericSend+0x74>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	623b      	str	r3, [r7, #32]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7e6:	f001 fa3d 	bl	800dc64 <xTaskGetSchedulerState>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <xQueueGenericSend+0x9e>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <xQueueGenericSend+0xa2>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <xQueueGenericSend+0xa4>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xQueueGenericSend+0xbe>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	61fb      	str	r3, [r7, #28]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c816:	f001 ff7d 	bl	800e714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c822:	429a      	cmp	r2, r3
 800c824:	d302      	bcc.n	800c82c <xQueueGenericSend+0xd4>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d129      	bne.n	800c880 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	68b9      	ldr	r1, [r7, #8]
 800c830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c832:	f000 fa8b 	bl	800cd4c <prvCopyDataToQueue>
 800c836:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d010      	beq.n	800c862 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	3324      	adds	r3, #36	; 0x24
 800c844:	4618      	mov	r0, r3
 800c846:	f001 f84f 	bl	800d8e8 <xTaskRemoveFromEventList>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d013      	beq.n	800c878 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c850:	4b3f      	ldr	r3, [pc, #252]	; (800c950 <xQueueGenericSend+0x1f8>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	e00a      	b.n	800c878 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d007      	beq.n	800c878 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c868:	4b39      	ldr	r3, [pc, #228]	; (800c950 <xQueueGenericSend+0x1f8>)
 800c86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c878:	f001 ff7c 	bl	800e774 <vPortExitCritical>
				return pdPASS;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e063      	b.n	800c948 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c886:	f001 ff75 	bl	800e774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	e05c      	b.n	800c948 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c890:	2b00      	cmp	r3, #0
 800c892:	d106      	bne.n	800c8a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c894:	f107 0314 	add.w	r3, r7, #20
 800c898:	4618      	mov	r0, r3
 800c89a:	f001 f889 	bl	800d9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8a2:	f001 ff67 	bl	800e774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8a6:	f000 fdfb 	bl	800d4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8aa:	f001 ff33 	bl	800e714 <vPortEnterCritical>
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8b4:	b25b      	sxtb	r3, r3
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ba:	d103      	bne.n	800c8c4 <xQueueGenericSend+0x16c>
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ca:	b25b      	sxtb	r3, r3
 800c8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8d0:	d103      	bne.n	800c8da <xQueueGenericSend+0x182>
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8da:	f001 ff4b 	bl	800e774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8de:	1d3a      	adds	r2, r7, #4
 800c8e0:	f107 0314 	add.w	r3, r7, #20
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f001 f878 	bl	800d9dc <xTaskCheckForTimeOut>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d124      	bne.n	800c93c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8f4:	f000 fb22 	bl	800cf3c <prvIsQueueFull>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d018      	beq.n	800c930 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	3310      	adds	r3, #16
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	4611      	mov	r1, r2
 800c906:	4618      	mov	r0, r3
 800c908:	f000 ff9e 	bl	800d848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c90e:	f000 faad 	bl	800ce6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c912:	f000 fdd3 	bl	800d4bc <xTaskResumeAll>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f47f af7c 	bne.w	800c816 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c91e:	4b0c      	ldr	r3, [pc, #48]	; (800c950 <xQueueGenericSend+0x1f8>)
 800c920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c924:	601a      	str	r2, [r3, #0]
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	e772      	b.n	800c816 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c932:	f000 fa9b 	bl	800ce6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c936:	f000 fdc1 	bl	800d4bc <xTaskResumeAll>
 800c93a:	e76c      	b.n	800c816 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c93e:	f000 fa95 	bl	800ce6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c942:	f000 fdbb 	bl	800d4bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c946:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3738      	adds	r7, #56	; 0x38
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	e000ed04 	.word	0xe000ed04

0800c954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b090      	sub	sp, #64	; 0x40
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d103      	bne.n	800c990 <xQueueGenericSendFromISR+0x3c>
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <xQueueGenericSendFromISR+0x40>
 800c990:	2301      	movs	r3, #1
 800c992:	e000      	b.n	800c996 <xQueueGenericSendFromISR+0x42>
 800c994:	2300      	movs	r3, #0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10a      	bne.n	800c9b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d103      	bne.n	800c9be <xQueueGenericSendFromISR+0x6a>
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d101      	bne.n	800c9c2 <xQueueGenericSendFromISR+0x6e>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e000      	b.n	800c9c4 <xQueueGenericSendFromISR+0x70>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10a      	bne.n	800c9de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	623b      	str	r3, [r7, #32]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9de:	f001 ff7b 	bl	800e8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c9e2:	f3ef 8211 	mrs	r2, BASEPRI
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	61fa      	str	r2, [r7, #28]
 800c9f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c9fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d302      	bcc.n	800ca10 <xQueueGenericSendFromISR+0xbc>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d12f      	bne.n	800ca70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca26:	f000 f991 	bl	800cd4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca32:	d112      	bne.n	800ca5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d016      	beq.n	800ca6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	3324      	adds	r3, #36	; 0x24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 ff51 	bl	800d8e8 <xTaskRemoveFromEventList>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00e      	beq.n	800ca6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00b      	beq.n	800ca6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	e007      	b.n	800ca6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca5e:	3301      	adds	r3, #1
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	b25a      	sxtb	r2, r3
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ca6e:	e001      	b.n	800ca74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3740      	adds	r7, #64	; 0x40
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08c      	sub	sp, #48	; 0x30
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800caa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10a      	bne.n	800cabc <xQueueReceive+0x30>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	623b      	str	r3, [r7, #32]
}
 800cab8:	bf00      	nop
 800caba:	e7fe      	b.n	800caba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d103      	bne.n	800caca <xQueueReceive+0x3e>
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <xQueueReceive+0x42>
 800caca:	2301      	movs	r3, #1
 800cacc:	e000      	b.n	800cad0 <xQueueReceive+0x44>
 800cace:	2300      	movs	r3, #0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10a      	bne.n	800caea <xQueueReceive+0x5e>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	61fb      	str	r3, [r7, #28]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800caea:	f001 f8bb 	bl	800dc64 <xTaskGetSchedulerState>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d102      	bne.n	800cafa <xQueueReceive+0x6e>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d101      	bne.n	800cafe <xQueueReceive+0x72>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <xQueueReceive+0x74>
 800cafe:	2300      	movs	r3, #0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <xQueueReceive+0x8e>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	61bb      	str	r3, [r7, #24]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb1a:	f001 fdfb 	bl	800e714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d01f      	beq.n	800cb6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb2e:	f000 f977 	bl	800ce20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	1e5a      	subs	r2, r3, #1
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00f      	beq.n	800cb62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb44:	3310      	adds	r3, #16
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 fece 	bl	800d8e8 <xTaskRemoveFromEventList>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d007      	beq.n	800cb62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb52:	4b3d      	ldr	r3, [pc, #244]	; (800cc48 <xQueueReceive+0x1bc>)
 800cb54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb62:	f001 fe07 	bl	800e774 <vPortExitCritical>
				return pdPASS;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e069      	b.n	800cc3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb70:	f001 fe00 	bl	800e774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb74:	2300      	movs	r3, #0
 800cb76:	e062      	b.n	800cc3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb7e:	f107 0310 	add.w	r3, r7, #16
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 ff14 	bl	800d9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb8c:	f001 fdf2 	bl	800e774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb90:	f000 fc86 	bl	800d4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb94:	f001 fdbe 	bl	800e714 <vPortEnterCritical>
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb9e:	b25b      	sxtb	r3, r3
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cba4:	d103      	bne.n	800cbae <xQueueReceive+0x122>
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbba:	d103      	bne.n	800cbc4 <xQueueReceive+0x138>
 800cbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbc4:	f001 fdd6 	bl	800e774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbc8:	1d3a      	adds	r2, r7, #4
 800cbca:	f107 0310 	add.w	r3, r7, #16
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 ff03 	bl	800d9dc <xTaskCheckForTimeOut>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d123      	bne.n	800cc24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbde:	f000 f997 	bl	800cf10 <prvIsQueueEmpty>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d017      	beq.n	800cc18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	3324      	adds	r3, #36	; 0x24
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	4611      	mov	r1, r2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 fe29 	bl	800d848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf8:	f000 f938 	bl	800ce6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbfc:	f000 fc5e 	bl	800d4bc <xTaskResumeAll>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d189      	bne.n	800cb1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cc06:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <xQueueReceive+0x1bc>)
 800cc08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	e780      	b.n	800cb1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc1a:	f000 f927 	bl	800ce6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc1e:	f000 fc4d 	bl	800d4bc <xTaskResumeAll>
 800cc22:	e77a      	b.n	800cb1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc26:	f000 f921 	bl	800ce6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc2a:	f000 fc47 	bl	800d4bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc30:	f000 f96e 	bl	800cf10 <prvIsQueueEmpty>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f43f af6f 	beq.w	800cb1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3730      	adds	r7, #48	; 0x30
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	e000ed04 	.word	0xe000ed04

0800cc4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08e      	sub	sp, #56	; 0x38
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10a      	bne.n	800cc78 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	623b      	str	r3, [r7, #32]
}
 800cc74:	bf00      	nop
 800cc76:	e7fe      	b.n	800cc76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d103      	bne.n	800cc86 <xQueueReceiveFromISR+0x3a>
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <xQueueReceiveFromISR+0x3e>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <xQueueReceiveFromISR+0x40>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	61fb      	str	r3, [r7, #28]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cca6:	f001 fe17 	bl	800e8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800ccaa:	f3ef 8211 	mrs	r2, BASEPRI
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	61ba      	str	r2, [r7, #24]
 800ccc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ccc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d02f      	beq.n	800cd32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccdc:	68b9      	ldr	r1, [r7, #8]
 800ccde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cce0:	f000 f89e 	bl	800ce20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	1e5a      	subs	r2, r3, #1
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ccec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccf4:	d112      	bne.n	800cd1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d016      	beq.n	800cd2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	3310      	adds	r3, #16
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fdf0 	bl	800d8e8 <xTaskRemoveFromEventList>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00e      	beq.n	800cd2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	e007      	b.n	800cd2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd20:	3301      	adds	r3, #1
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	b25a      	sxtb	r2, r3
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd30:	e001      	b.n	800cd36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	; 0x34
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f383 8811 	msr	BASEPRI, r3
}
 800cd40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3738      	adds	r7, #56	; 0x38
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10d      	bne.n	800cd86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d14d      	bne.n	800ce0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 ff92 	bl	800dca0 <xTaskPriorityDisinherit>
 800cd7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	609a      	str	r2, [r3, #8]
 800cd84:	e043      	b.n	800ce0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d119      	bne.n	800cdc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6858      	ldr	r0, [r3, #4]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd94:	461a      	mov	r2, r3
 800cd96:	68b9      	ldr	r1, [r7, #8]
 800cd98:	f002 fb04 	bl	800f3a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda4:	441a      	add	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d32b      	bcc.n	800ce0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	605a      	str	r2, [r3, #4]
 800cdbe:	e026      	b.n	800ce0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	68d8      	ldr	r0, [r3, #12]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc8:	461a      	mov	r2, r3
 800cdca:	68b9      	ldr	r1, [r7, #8]
 800cdcc:	f002 faea 	bl	800f3a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	68da      	ldr	r2, [r3, #12]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd8:	425b      	negs	r3, r3
 800cdda:	441a      	add	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	68da      	ldr	r2, [r3, #12]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d207      	bcs.n	800cdfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	689a      	ldr	r2, [r3, #8]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf4:	425b      	negs	r3, r3
 800cdf6:	441a      	add	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d105      	bne.n	800ce0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ce16:	697b      	ldr	r3, [r7, #20]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3718      	adds	r7, #24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d018      	beq.n	800ce64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68da      	ldr	r2, [r3, #12]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3a:	441a      	add	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	68da      	ldr	r2, [r3, #12]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d303      	bcc.n	800ce54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68d9      	ldr	r1, [r3, #12]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	6838      	ldr	r0, [r7, #0]
 800ce60:	f002 faa0 	bl	800f3a4 <memcpy>
	}
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce74:	f001 fc4e 	bl	800e714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce80:	e011      	b.n	800cea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d012      	beq.n	800ceb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3324      	adds	r3, #36	; 0x24
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 fd2a 	bl	800d8e8 <xTaskRemoveFromEventList>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce9a:	f000 fe01 	bl	800daa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	dce9      	bgt.n	800ce82 <prvUnlockQueue+0x16>
 800ceae:	e000      	b.n	800ceb2 <prvUnlockQueue+0x46>
					break;
 800ceb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	22ff      	movs	r2, #255	; 0xff
 800ceb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ceba:	f001 fc5b 	bl	800e774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cebe:	f001 fc29 	bl	800e714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ceca:	e011      	b.n	800cef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	691b      	ldr	r3, [r3, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d012      	beq.n	800cefa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3310      	adds	r3, #16
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 fd05 	bl	800d8e8 <xTaskRemoveFromEventList>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cee4:	f000 fddc 	bl	800daa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	dce9      	bgt.n	800cecc <prvUnlockQueue+0x60>
 800cef8:	e000      	b.n	800cefc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cefa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	22ff      	movs	r2, #255	; 0xff
 800cf00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cf04:	f001 fc36 	bl	800e774 <vPortExitCritical>
}
 800cf08:	bf00      	nop
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf18:	f001 fbfc 	bl	800e714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d102      	bne.n	800cf2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf24:	2301      	movs	r3, #1
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	e001      	b.n	800cf2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf2e:	f001 fc21 	bl	800e774 <vPortExitCritical>

	return xReturn;
 800cf32:	68fb      	ldr	r3, [r7, #12]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf44:	f001 fbe6 	bl	800e714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d102      	bne.n	800cf5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	e001      	b.n	800cf5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf5e:	f001 fc09 	bl	800e774 <vPortExitCritical>

	return xReturn;
 800cf62:	68fb      	ldr	r3, [r7, #12]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf76:	2300      	movs	r3, #0
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	e014      	b.n	800cfa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cf7c:	4a0f      	ldr	r2, [pc, #60]	; (800cfbc <vQueueAddToRegistry+0x50>)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10b      	bne.n	800cfa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cf88:	490c      	ldr	r1, [pc, #48]	; (800cfbc <vQueueAddToRegistry+0x50>)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	683a      	ldr	r2, [r7, #0]
 800cf8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cf92:	4a0a      	ldr	r2, [pc, #40]	; (800cfbc <vQueueAddToRegistry+0x50>)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	4413      	add	r3, r2
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cf9e:	e006      	b.n	800cfae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b07      	cmp	r3, #7
 800cfaa:	d9e7      	bls.n	800cf7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	20005090 	.word	0x20005090

0800cfc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cfd0:	f001 fba0 	bl	800e714 <vPortEnterCritical>
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfda:	b25b      	sxtb	r3, r3
 800cfdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe0:	d103      	bne.n	800cfea <vQueueWaitForMessageRestricted+0x2a>
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cff0:	b25b      	sxtb	r3, r3
 800cff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cff6:	d103      	bne.n	800d000 <vQueueWaitForMessageRestricted+0x40>
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d000:	f001 fbb8 	bl	800e774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	3324      	adds	r3, #36	; 0x24
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	4618      	mov	r0, r3
 800d016:	f000 fc3b 	bl	800d890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d01a:	6978      	ldr	r0, [r7, #20]
 800d01c:	f7ff ff26 	bl	800ce6c <prvUnlockQueue>
	}
 800d020:	bf00      	nop
 800d022:	3718      	adds	r7, #24
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08e      	sub	sp, #56	; 0x38
 800d02c:	af04      	add	r7, sp, #16
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
 800d034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10a      	bne.n	800d052 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	623b      	str	r3, [r7, #32]
}
 800d04e:	bf00      	nop
 800d050:	e7fe      	b.n	800d050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10a      	bne.n	800d06e <xTaskCreateStatic+0x46>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	61fb      	str	r3, [r7, #28]
}
 800d06a:	bf00      	nop
 800d06c:	e7fe      	b.n	800d06c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d06e:	235c      	movs	r3, #92	; 0x5c
 800d070:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	2b5c      	cmp	r3, #92	; 0x5c
 800d076:	d00a      	beq.n	800d08e <xTaskCreateStatic+0x66>
	__asm volatile
 800d078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	61bb      	str	r3, [r7, #24]
}
 800d08a:	bf00      	nop
 800d08c:	e7fe      	b.n	800d08c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d08e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d092:	2b00      	cmp	r3, #0
 800d094:	d01e      	beq.n	800d0d4 <xTaskCreateStatic+0xac>
 800d096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d01b      	beq.n	800d0d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	9303      	str	r3, [sp, #12]
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	9302      	str	r3, [sp, #8]
 800d0b6:	f107 0314 	add.w	r3, r7, #20
 800d0ba:	9301      	str	r3, [sp, #4]
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	68b9      	ldr	r1, [r7, #8]
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f000 f850 	bl	800d16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0ce:	f000 f8dd 	bl	800d28c <prvAddNewTaskToReadyList>
 800d0d2:	e001      	b.n	800d0d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d0d8:	697b      	ldr	r3, [r7, #20]
	}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3728      	adds	r7, #40	; 0x28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b08c      	sub	sp, #48	; 0x30
 800d0e6:	af04      	add	r7, sp, #16
 800d0e8:	60f8      	str	r0, [r7, #12]
 800d0ea:	60b9      	str	r1, [r7, #8]
 800d0ec:	603b      	str	r3, [r7, #0]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0f2:	88fb      	ldrh	r3, [r7, #6]
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f001 fc2e 	bl	800e958 <pvPortMalloc>
 800d0fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00e      	beq.n	800d122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d104:	205c      	movs	r0, #92	; 0x5c
 800d106:	f001 fc27 	bl	800e958 <pvPortMalloc>
 800d10a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d003      	beq.n	800d11a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	631a      	str	r2, [r3, #48]	; 0x30
 800d118:	e005      	b.n	800d126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d11a:	6978      	ldr	r0, [r7, #20]
 800d11c:	f001 fce8 	bl	800eaf0 <vPortFree>
 800d120:	e001      	b.n	800d126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d017      	beq.n	800d15c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d134:	88fa      	ldrh	r2, [r7, #6]
 800d136:	2300      	movs	r3, #0
 800d138:	9303      	str	r3, [sp, #12]
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	9302      	str	r3, [sp, #8]
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	68b9      	ldr	r1, [r7, #8]
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f000 f80e 	bl	800d16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d150:	69f8      	ldr	r0, [r7, #28]
 800d152:	f000 f89b 	bl	800d28c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d156:	2301      	movs	r3, #1
 800d158:	61bb      	str	r3, [r7, #24]
 800d15a:	e002      	b.n	800d162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d162:	69bb      	ldr	r3, [r7, #24]
	}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	461a      	mov	r2, r3
 800d184:	21a5      	movs	r1, #165	; 0xa5
 800d186:	f002 f91b 	bl	800f3c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d194:	3b01      	subs	r3, #1
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	f023 0307 	bic.w	r3, r3, #7
 800d1a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00a      	beq.n	800d1c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	617b      	str	r3, [r7, #20]
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d01f      	beq.n	800d20a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	61fb      	str	r3, [r7, #28]
 800d1ce:	e012      	b.n	800d1f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	7819      	ldrb	r1, [r3, #0]
 800d1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	4413      	add	r3, r2
 800d1de:	3334      	adds	r3, #52	; 0x34
 800d1e0:	460a      	mov	r2, r1
 800d1e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	61fb      	str	r3, [r7, #28]
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	2b0f      	cmp	r3, #15
 800d1fa:	d9e9      	bls.n	800d1d0 <prvInitialiseNewTask+0x64>
 800d1fc:	e000      	b.n	800d200 <prvInitialiseNewTask+0x94>
			{
				break;
 800d1fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	2200      	movs	r2, #0
 800d204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d208:	e003      	b.n	800d212 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	2b37      	cmp	r3, #55	; 0x37
 800d216:	d901      	bls.n	800d21c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d218:	2337      	movs	r3, #55	; 0x37
 800d21a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d226:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22a:	2200      	movs	r2, #0
 800d22c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d230:	3304      	adds	r3, #4
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff f8be 	bl	800c3b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	3318      	adds	r3, #24
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff f8b9 	bl	800c3b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	2200      	movs	r2, #0
 800d25c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	68f9      	ldr	r1, [r7, #12]
 800d26a:	69b8      	ldr	r0, [r7, #24]
 800d26c:	f001 f928 	bl	800e4c0 <pxPortInitialiseStack>
 800d270:	4602      	mov	r2, r0
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d282:	bf00      	nop
 800d284:	3720      	adds	r7, #32
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d294:	f001 fa3e 	bl	800e714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d298:	4b2d      	ldr	r3, [pc, #180]	; (800d350 <prvAddNewTaskToReadyList+0xc4>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	4a2c      	ldr	r2, [pc, #176]	; (800d350 <prvAddNewTaskToReadyList+0xc4>)
 800d2a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d2a2:	4b2c      	ldr	r3, [pc, #176]	; (800d354 <prvAddNewTaskToReadyList+0xc8>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d109      	bne.n	800d2be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d2aa:	4a2a      	ldr	r2, [pc, #168]	; (800d354 <prvAddNewTaskToReadyList+0xc8>)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2b0:	4b27      	ldr	r3, [pc, #156]	; (800d350 <prvAddNewTaskToReadyList+0xc4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d110      	bne.n	800d2da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2b8:	f000 fc16 	bl	800dae8 <prvInitialiseTaskLists>
 800d2bc:	e00d      	b.n	800d2da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d2be:	4b26      	ldr	r3, [pc, #152]	; (800d358 <prvAddNewTaskToReadyList+0xcc>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d109      	bne.n	800d2da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2c6:	4b23      	ldr	r3, [pc, #140]	; (800d354 <prvAddNewTaskToReadyList+0xc8>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d802      	bhi.n	800d2da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d2d4:	4a1f      	ldr	r2, [pc, #124]	; (800d354 <prvAddNewTaskToReadyList+0xc8>)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d2da:	4b20      	ldr	r3, [pc, #128]	; (800d35c <prvAddNewTaskToReadyList+0xd0>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	4a1e      	ldr	r2, [pc, #120]	; (800d35c <prvAddNewTaskToReadyList+0xd0>)
 800d2e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d2e4:	4b1d      	ldr	r3, [pc, #116]	; (800d35c <prvAddNewTaskToReadyList+0xd0>)
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f0:	4b1b      	ldr	r3, [pc, #108]	; (800d360 <prvAddNewTaskToReadyList+0xd4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d903      	bls.n	800d300 <prvAddNewTaskToReadyList+0x74>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	4a18      	ldr	r2, [pc, #96]	; (800d360 <prvAddNewTaskToReadyList+0xd4>)
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4a15      	ldr	r2, [pc, #84]	; (800d364 <prvAddNewTaskToReadyList+0xd8>)
 800d30e:	441a      	add	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	4619      	mov	r1, r3
 800d316:	4610      	mov	r0, r2
 800d318:	f7ff f859 	bl	800c3ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d31c:	f001 fa2a 	bl	800e774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d320:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <prvAddNewTaskToReadyList+0xcc>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00e      	beq.n	800d346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d328:	4b0a      	ldr	r3, [pc, #40]	; (800d354 <prvAddNewTaskToReadyList+0xc8>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d332:	429a      	cmp	r2, r3
 800d334:	d207      	bcs.n	800d346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <prvAddNewTaskToReadyList+0xdc>)
 800d338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	20001050 	.word	0x20001050
 800d354:	20000b7c 	.word	0x20000b7c
 800d358:	2000105c 	.word	0x2000105c
 800d35c:	2000106c 	.word	0x2000106c
 800d360:	20001058 	.word	0x20001058
 800d364:	20000b80 	.word	0x20000b80
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d374:	2300      	movs	r3, #0
 800d376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d017      	beq.n	800d3ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <vTaskDelay+0x60>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00a      	beq.n	800d39c <vTaskDelay+0x30>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	60bb      	str	r3, [r7, #8]
}
 800d398:	bf00      	nop
 800d39a:	e7fe      	b.n	800d39a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d39c:	f000 f880 	bl	800d4a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fcea 	bl	800dd7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d3a8:	f000 f888 	bl	800d4bc <xTaskResumeAll>
 800d3ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d107      	bne.n	800d3c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <vTaskDelay+0x64>)
 800d3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3c4:	bf00      	nop
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20001078 	.word	0x20001078
 800d3d0:	e000ed04 	.word	0xe000ed04

0800d3d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08a      	sub	sp, #40	; 0x28
 800d3d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3e2:	463a      	mov	r2, r7
 800d3e4:	1d39      	adds	r1, r7, #4
 800d3e6:	f107 0308 	add.w	r3, r7, #8
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fe ff8e 	bl	800c30c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	9202      	str	r2, [sp, #8]
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	2300      	movs	r3, #0
 800d400:	460a      	mov	r2, r1
 800d402:	4921      	ldr	r1, [pc, #132]	; (800d488 <vTaskStartScheduler+0xb4>)
 800d404:	4821      	ldr	r0, [pc, #132]	; (800d48c <vTaskStartScheduler+0xb8>)
 800d406:	f7ff fe0f 	bl	800d028 <xTaskCreateStatic>
 800d40a:	4603      	mov	r3, r0
 800d40c:	4a20      	ldr	r2, [pc, #128]	; (800d490 <vTaskStartScheduler+0xbc>)
 800d40e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d410:	4b1f      	ldr	r3, [pc, #124]	; (800d490 <vTaskStartScheduler+0xbc>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d418:	2301      	movs	r3, #1
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	e001      	b.n	800d422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d41e:	2300      	movs	r3, #0
 800d420:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d102      	bne.n	800d42e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d428:	f000 fcfc 	bl	800de24 <xTimerCreateTimerTask>
 800d42c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d116      	bne.n	800d462 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	613b      	str	r3, [r7, #16]
}
 800d446:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d448:	4b12      	ldr	r3, [pc, #72]	; (800d494 <vTaskStartScheduler+0xc0>)
 800d44a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d44e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d450:	4b11      	ldr	r3, [pc, #68]	; (800d498 <vTaskStartScheduler+0xc4>)
 800d452:	2201      	movs	r2, #1
 800d454:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d456:	4b11      	ldr	r3, [pc, #68]	; (800d49c <vTaskStartScheduler+0xc8>)
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d45c:	f001 f8b8 	bl	800e5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d460:	e00e      	b.n	800d480 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d468:	d10a      	bne.n	800d480 <vTaskStartScheduler+0xac>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	60fb      	str	r3, [r7, #12]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <vTaskStartScheduler+0xaa>
}
 800d480:	bf00      	nop
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	0800f6f4 	.word	0x0800f6f4
 800d48c:	0800dab9 	.word	0x0800dab9
 800d490:	20001074 	.word	0x20001074
 800d494:	20001070 	.word	0x20001070
 800d498:	2000105c 	.word	0x2000105c
 800d49c:	20001054 	.word	0x20001054

0800d4a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d4a4:	4b04      	ldr	r3, [pc, #16]	; (800d4b8 <vTaskSuspendAll+0x18>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	4a03      	ldr	r2, [pc, #12]	; (800d4b8 <vTaskSuspendAll+0x18>)
 800d4ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d4ae:	bf00      	nop
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	20001078 	.word	0x20001078

0800d4bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4ca:	4b42      	ldr	r3, [pc, #264]	; (800d5d4 <xTaskResumeAll+0x118>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	603b      	str	r3, [r7, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4e8:	f001 f914 	bl	800e714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4ec:	4b39      	ldr	r3, [pc, #228]	; (800d5d4 <xTaskResumeAll+0x118>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	4a38      	ldr	r2, [pc, #224]	; (800d5d4 <xTaskResumeAll+0x118>)
 800d4f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4f6:	4b37      	ldr	r3, [pc, #220]	; (800d5d4 <xTaskResumeAll+0x118>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d162      	bne.n	800d5c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4fe:	4b36      	ldr	r3, [pc, #216]	; (800d5d8 <xTaskResumeAll+0x11c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d05e      	beq.n	800d5c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d506:	e02f      	b.n	800d568 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d508:	4b34      	ldr	r3, [pc, #208]	; (800d5dc <xTaskResumeAll+0x120>)
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3318      	adds	r3, #24
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe ffb7 	bl	800c488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	3304      	adds	r3, #4
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fe ffb2 	bl	800c488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d528:	4b2d      	ldr	r3, [pc, #180]	; (800d5e0 <xTaskResumeAll+0x124>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d903      	bls.n	800d538 <xTaskResumeAll+0x7c>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d534:	4a2a      	ldr	r2, [pc, #168]	; (800d5e0 <xTaskResumeAll+0x124>)
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53c:	4613      	mov	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4a27      	ldr	r2, [pc, #156]	; (800d5e4 <xTaskResumeAll+0x128>)
 800d546:	441a      	add	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3304      	adds	r3, #4
 800d54c:	4619      	mov	r1, r3
 800d54e:	4610      	mov	r0, r2
 800d550:	f7fe ff3d 	bl	800c3ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d558:	4b23      	ldr	r3, [pc, #140]	; (800d5e8 <xTaskResumeAll+0x12c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55e:	429a      	cmp	r2, r3
 800d560:	d302      	bcc.n	800d568 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d562:	4b22      	ldr	r3, [pc, #136]	; (800d5ec <xTaskResumeAll+0x130>)
 800d564:	2201      	movs	r2, #1
 800d566:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d568:	4b1c      	ldr	r3, [pc, #112]	; (800d5dc <xTaskResumeAll+0x120>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1cb      	bne.n	800d508 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d001      	beq.n	800d57a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d576:	f000 fb55 	bl	800dc24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d57a:	4b1d      	ldr	r3, [pc, #116]	; (800d5f0 <xTaskResumeAll+0x134>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d010      	beq.n	800d5a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d586:	f000 f847 	bl	800d618 <xTaskIncrementTick>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d590:	4b16      	ldr	r3, [pc, #88]	; (800d5ec <xTaskResumeAll+0x130>)
 800d592:	2201      	movs	r2, #1
 800d594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	3b01      	subs	r3, #1
 800d59a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1f1      	bne.n	800d586 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d5a2:	4b13      	ldr	r3, [pc, #76]	; (800d5f0 <xTaskResumeAll+0x134>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5a8:	4b10      	ldr	r3, [pc, #64]	; (800d5ec <xTaskResumeAll+0x130>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d009      	beq.n	800d5c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5b4:	4b0f      	ldr	r3, [pc, #60]	; (800d5f4 <xTaskResumeAll+0x138>)
 800d5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5c4:	f001 f8d6 	bl	800e774 <vPortExitCritical>

	return xAlreadyYielded;
 800d5c8:	68bb      	ldr	r3, [r7, #8]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20001078 	.word	0x20001078
 800d5d8:	20001050 	.word	0x20001050
 800d5dc:	20001010 	.word	0x20001010
 800d5e0:	20001058 	.word	0x20001058
 800d5e4:	20000b80 	.word	0x20000b80
 800d5e8:	20000b7c 	.word	0x20000b7c
 800d5ec:	20001064 	.word	0x20001064
 800d5f0:	20001060 	.word	0x20001060
 800d5f4:	e000ed04 	.word	0xe000ed04

0800d5f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d5fe:	4b05      	ldr	r3, [pc, #20]	; (800d614 <xTaskGetTickCount+0x1c>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d604:	687b      	ldr	r3, [r7, #4]
}
 800d606:	4618      	mov	r0, r3
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	20001054 	.word	0x20001054

0800d618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d622:	4b4f      	ldr	r3, [pc, #316]	; (800d760 <xTaskIncrementTick+0x148>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f040 808f 	bne.w	800d74a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d62c:	4b4d      	ldr	r3, [pc, #308]	; (800d764 <xTaskIncrementTick+0x14c>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3301      	adds	r3, #1
 800d632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d634:	4a4b      	ldr	r2, [pc, #300]	; (800d764 <xTaskIncrementTick+0x14c>)
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d120      	bne.n	800d682 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d640:	4b49      	ldr	r3, [pc, #292]	; (800d768 <xTaskIncrementTick+0x150>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00a      	beq.n	800d660 <xTaskIncrementTick+0x48>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	603b      	str	r3, [r7, #0]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <xTaskIncrementTick+0x46>
 800d660:	4b41      	ldr	r3, [pc, #260]	; (800d768 <xTaskIncrementTick+0x150>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	4b41      	ldr	r3, [pc, #260]	; (800d76c <xTaskIncrementTick+0x154>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a3f      	ldr	r2, [pc, #252]	; (800d768 <xTaskIncrementTick+0x150>)
 800d66c:	6013      	str	r3, [r2, #0]
 800d66e:	4a3f      	ldr	r2, [pc, #252]	; (800d76c <xTaskIncrementTick+0x154>)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	4b3e      	ldr	r3, [pc, #248]	; (800d770 <xTaskIncrementTick+0x158>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3301      	adds	r3, #1
 800d67a:	4a3d      	ldr	r2, [pc, #244]	; (800d770 <xTaskIncrementTick+0x158>)
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	f000 fad1 	bl	800dc24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d682:	4b3c      	ldr	r3, [pc, #240]	; (800d774 <xTaskIncrementTick+0x15c>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	693a      	ldr	r2, [r7, #16]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d349      	bcc.n	800d720 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d68c:	4b36      	ldr	r3, [pc, #216]	; (800d768 <xTaskIncrementTick+0x150>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d104      	bne.n	800d6a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d696:	4b37      	ldr	r3, [pc, #220]	; (800d774 <xTaskIncrementTick+0x15c>)
 800d698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d69c:	601a      	str	r2, [r3, #0]
					break;
 800d69e:	e03f      	b.n	800d720 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6a0:	4b31      	ldr	r3, [pc, #196]	; (800d768 <xTaskIncrementTick+0x150>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d203      	bcs.n	800d6c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6b8:	4a2e      	ldr	r2, [pc, #184]	; (800d774 <xTaskIncrementTick+0x15c>)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6be:	e02f      	b.n	800d720 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	3304      	adds	r3, #4
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fe fedf 	bl	800c488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d004      	beq.n	800d6dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	3318      	adds	r3, #24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fe fed6 	bl	800c488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e0:	4b25      	ldr	r3, [pc, #148]	; (800d778 <xTaskIncrementTick+0x160>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d903      	bls.n	800d6f0 <xTaskIncrementTick+0xd8>
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ec:	4a22      	ldr	r2, [pc, #136]	; (800d778 <xTaskIncrementTick+0x160>)
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4413      	add	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4a1f      	ldr	r2, [pc, #124]	; (800d77c <xTaskIncrementTick+0x164>)
 800d6fe:	441a      	add	r2, r3
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	3304      	adds	r3, #4
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f7fe fe61 	bl	800c3ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d710:	4b1b      	ldr	r3, [pc, #108]	; (800d780 <xTaskIncrementTick+0x168>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d716:	429a      	cmp	r2, r3
 800d718:	d3b8      	bcc.n	800d68c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d71a:	2301      	movs	r3, #1
 800d71c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d71e:	e7b5      	b.n	800d68c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d720:	4b17      	ldr	r3, [pc, #92]	; (800d780 <xTaskIncrementTick+0x168>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d726:	4915      	ldr	r1, [pc, #84]	; (800d77c <xTaskIncrementTick+0x164>)
 800d728:	4613      	mov	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	440b      	add	r3, r1
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d901      	bls.n	800d73c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d73c:	4b11      	ldr	r3, [pc, #68]	; (800d784 <xTaskIncrementTick+0x16c>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d007      	beq.n	800d754 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d744:	2301      	movs	r3, #1
 800d746:	617b      	str	r3, [r7, #20]
 800d748:	e004      	b.n	800d754 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d74a:	4b0f      	ldr	r3, [pc, #60]	; (800d788 <xTaskIncrementTick+0x170>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	3301      	adds	r3, #1
 800d750:	4a0d      	ldr	r2, [pc, #52]	; (800d788 <xTaskIncrementTick+0x170>)
 800d752:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d754:	697b      	ldr	r3, [r7, #20]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20001078 	.word	0x20001078
 800d764:	20001054 	.word	0x20001054
 800d768:	20001008 	.word	0x20001008
 800d76c:	2000100c 	.word	0x2000100c
 800d770:	20001068 	.word	0x20001068
 800d774:	20001070 	.word	0x20001070
 800d778:	20001058 	.word	0x20001058
 800d77c:	20000b80 	.word	0x20000b80
 800d780:	20000b7c 	.word	0x20000b7c
 800d784:	20001064 	.word	0x20001064
 800d788:	20001060 	.word	0x20001060

0800d78c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d792:	4b28      	ldr	r3, [pc, #160]	; (800d834 <vTaskSwitchContext+0xa8>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d79a:	4b27      	ldr	r3, [pc, #156]	; (800d838 <vTaskSwitchContext+0xac>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7a0:	e041      	b.n	800d826 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d7a2:	4b25      	ldr	r3, [pc, #148]	; (800d838 <vTaskSwitchContext+0xac>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a8:	4b24      	ldr	r3, [pc, #144]	; (800d83c <vTaskSwitchContext+0xb0>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	60fb      	str	r3, [r7, #12]
 800d7ae:	e010      	b.n	800d7d2 <vTaskSwitchContext+0x46>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d10a      	bne.n	800d7cc <vTaskSwitchContext+0x40>
	__asm volatile
 800d7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	607b      	str	r3, [r7, #4]
}
 800d7c8:	bf00      	nop
 800d7ca:	e7fe      	b.n	800d7ca <vTaskSwitchContext+0x3e>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	491b      	ldr	r1, [pc, #108]	; (800d840 <vTaskSwitchContext+0xb4>)
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	440b      	add	r3, r1
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0e4      	beq.n	800d7b0 <vTaskSwitchContext+0x24>
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4a13      	ldr	r2, [pc, #76]	; (800d840 <vTaskSwitchContext+0xb4>)
 800d7f2:	4413      	add	r3, r2
 800d7f4:	60bb      	str	r3, [r7, #8]
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	605a      	str	r2, [r3, #4]
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	3308      	adds	r3, #8
 800d808:	429a      	cmp	r2, r3
 800d80a:	d104      	bne.n	800d816 <vTaskSwitchContext+0x8a>
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	605a      	str	r2, [r3, #4]
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	4a09      	ldr	r2, [pc, #36]	; (800d844 <vTaskSwitchContext+0xb8>)
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	4a06      	ldr	r2, [pc, #24]	; (800d83c <vTaskSwitchContext+0xb0>)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6013      	str	r3, [r2, #0]
}
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	20001078 	.word	0x20001078
 800d838:	20001064 	.word	0x20001064
 800d83c:	20001058 	.word	0x20001058
 800d840:	20000b80 	.word	0x20000b80
 800d844:	20000b7c 	.word	0x20000b7c

0800d848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10a      	bne.n	800d86e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	60fb      	str	r3, [r7, #12]
}
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d86e:	4b07      	ldr	r3, [pc, #28]	; (800d88c <vTaskPlaceOnEventList+0x44>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3318      	adds	r3, #24
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7fe fdcd 	bl	800c416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d87c:	2101      	movs	r1, #1
 800d87e:	6838      	ldr	r0, [r7, #0]
 800d880:	f000 fa7c 	bl	800dd7c <prvAddCurrentTaskToDelayedList>
}
 800d884:	bf00      	nop
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	20000b7c 	.word	0x20000b7c

0800d890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10a      	bne.n	800d8b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a6:	f383 8811 	msr	BASEPRI, r3
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	617b      	str	r3, [r7, #20]
}
 800d8b4:	bf00      	nop
 800d8b6:	e7fe      	b.n	800d8b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8b8:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	3318      	adds	r3, #24
 800d8be:	4619      	mov	r1, r3
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7fe fd84 	bl	800c3ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	68b8      	ldr	r0, [r7, #8]
 800d8d6:	f000 fa51 	bl	800dd7c <prvAddCurrentTaskToDelayedList>
	}
 800d8da:	bf00      	nop
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20000b7c 	.word	0x20000b7c

0800d8e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d10a      	bne.n	800d914 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	60fb      	str	r3, [r7, #12]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	3318      	adds	r3, #24
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fe fdb5 	bl	800c488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d91e:	4b1e      	ldr	r3, [pc, #120]	; (800d998 <xTaskRemoveFromEventList+0xb0>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d11d      	bne.n	800d962 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	3304      	adds	r3, #4
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fdac 	bl	800c488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d934:	4b19      	ldr	r3, [pc, #100]	; (800d99c <xTaskRemoveFromEventList+0xb4>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d903      	bls.n	800d944 <xTaskRemoveFromEventList+0x5c>
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d940:	4a16      	ldr	r2, [pc, #88]	; (800d99c <xTaskRemoveFromEventList+0xb4>)
 800d942:	6013      	str	r3, [r2, #0]
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d948:	4613      	mov	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4a13      	ldr	r2, [pc, #76]	; (800d9a0 <xTaskRemoveFromEventList+0xb8>)
 800d952:	441a      	add	r2, r3
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	3304      	adds	r3, #4
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f7fe fd37 	bl	800c3ce <vListInsertEnd>
 800d960:	e005      	b.n	800d96e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	3318      	adds	r3, #24
 800d966:	4619      	mov	r1, r3
 800d968:	480e      	ldr	r0, [pc, #56]	; (800d9a4 <xTaskRemoveFromEventList+0xbc>)
 800d96a:	f7fe fd30 	bl	800c3ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d972:	4b0d      	ldr	r3, [pc, #52]	; (800d9a8 <xTaskRemoveFromEventList+0xc0>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d978:	429a      	cmp	r2, r3
 800d97a:	d905      	bls.n	800d988 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d97c:	2301      	movs	r3, #1
 800d97e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d980:	4b0a      	ldr	r3, [pc, #40]	; (800d9ac <xTaskRemoveFromEventList+0xc4>)
 800d982:	2201      	movs	r2, #1
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	e001      	b.n	800d98c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d988:	2300      	movs	r3, #0
 800d98a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d98c:	697b      	ldr	r3, [r7, #20]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20001078 	.word	0x20001078
 800d99c:	20001058 	.word	0x20001058
 800d9a0:	20000b80 	.word	0x20000b80
 800d9a4:	20001010 	.word	0x20001010
 800d9a8:	20000b7c 	.word	0x20000b7c
 800d9ac:	20001064 	.word	0x20001064

0800d9b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9b8:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <vTaskInternalSetTimeOutState+0x24>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9c0:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <vTaskInternalSetTimeOutState+0x28>)
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	605a      	str	r2, [r3, #4]
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	20001068 	.word	0x20001068
 800d9d8:	20001054 	.word	0x20001054

0800d9dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10a      	bne.n	800da02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	613b      	str	r3, [r7, #16]
}
 800d9fe:	bf00      	nop
 800da00:	e7fe      	b.n	800da00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10a      	bne.n	800da1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	60fb      	str	r3, [r7, #12]
}
 800da1a:	bf00      	nop
 800da1c:	e7fe      	b.n	800da1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800da1e:	f000 fe79 	bl	800e714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da22:	4b1d      	ldr	r3, [pc, #116]	; (800da98 <xTaskCheckForTimeOut+0xbc>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da3a:	d102      	bne.n	800da42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da3c:	2300      	movs	r3, #0
 800da3e:	61fb      	str	r3, [r7, #28]
 800da40:	e023      	b.n	800da8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	4b15      	ldr	r3, [pc, #84]	; (800da9c <xTaskCheckForTimeOut+0xc0>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d007      	beq.n	800da5e <xTaskCheckForTimeOut+0x82>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	69ba      	ldr	r2, [r7, #24]
 800da54:	429a      	cmp	r2, r3
 800da56:	d302      	bcc.n	800da5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da58:	2301      	movs	r3, #1
 800da5a:	61fb      	str	r3, [r7, #28]
 800da5c:	e015      	b.n	800da8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	429a      	cmp	r2, r3
 800da66:	d20b      	bcs.n	800da80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	1ad2      	subs	r2, r2, r3
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff ff9b 	bl	800d9b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da7a:	2300      	movs	r3, #0
 800da7c:	61fb      	str	r3, [r7, #28]
 800da7e:	e004      	b.n	800da8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da86:	2301      	movs	r3, #1
 800da88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da8a:	f000 fe73 	bl	800e774 <vPortExitCritical>

	return xReturn;
 800da8e:	69fb      	ldr	r3, [r7, #28]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3720      	adds	r7, #32
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20001054 	.word	0x20001054
 800da9c:	20001068 	.word	0x20001068

0800daa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800daa0:	b480      	push	{r7}
 800daa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800daa4:	4b03      	ldr	r3, [pc, #12]	; (800dab4 <vTaskMissedYield+0x14>)
 800daa6:	2201      	movs	r2, #1
 800daa8:	601a      	str	r2, [r3, #0]
}
 800daaa:	bf00      	nop
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr
 800dab4:	20001064 	.word	0x20001064

0800dab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dac0:	f000 f852 	bl	800db68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dac4:	4b06      	ldr	r3, [pc, #24]	; (800dae0 <prvIdleTask+0x28>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d9f9      	bls.n	800dac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dacc:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <prvIdleTask+0x2c>)
 800dace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dadc:	e7f0      	b.n	800dac0 <prvIdleTask+0x8>
 800dade:	bf00      	nop
 800dae0:	20000b80 	.word	0x20000b80
 800dae4:	e000ed04 	.word	0xe000ed04

0800dae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800daee:	2300      	movs	r3, #0
 800daf0:	607b      	str	r3, [r7, #4]
 800daf2:	e00c      	b.n	800db0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	4613      	mov	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4413      	add	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4a12      	ldr	r2, [pc, #72]	; (800db48 <prvInitialiseTaskLists+0x60>)
 800db00:	4413      	add	r3, r2
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe fc36 	bl	800c374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3301      	adds	r3, #1
 800db0c:	607b      	str	r3, [r7, #4]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b37      	cmp	r3, #55	; 0x37
 800db12:	d9ef      	bls.n	800daf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db14:	480d      	ldr	r0, [pc, #52]	; (800db4c <prvInitialiseTaskLists+0x64>)
 800db16:	f7fe fc2d 	bl	800c374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db1a:	480d      	ldr	r0, [pc, #52]	; (800db50 <prvInitialiseTaskLists+0x68>)
 800db1c:	f7fe fc2a 	bl	800c374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db20:	480c      	ldr	r0, [pc, #48]	; (800db54 <prvInitialiseTaskLists+0x6c>)
 800db22:	f7fe fc27 	bl	800c374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db26:	480c      	ldr	r0, [pc, #48]	; (800db58 <prvInitialiseTaskLists+0x70>)
 800db28:	f7fe fc24 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db2c:	480b      	ldr	r0, [pc, #44]	; (800db5c <prvInitialiseTaskLists+0x74>)
 800db2e:	f7fe fc21 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db32:	4b0b      	ldr	r3, [pc, #44]	; (800db60 <prvInitialiseTaskLists+0x78>)
 800db34:	4a05      	ldr	r2, [pc, #20]	; (800db4c <prvInitialiseTaskLists+0x64>)
 800db36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db38:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <prvInitialiseTaskLists+0x7c>)
 800db3a:	4a05      	ldr	r2, [pc, #20]	; (800db50 <prvInitialiseTaskLists+0x68>)
 800db3c:	601a      	str	r2, [r3, #0]
}
 800db3e:	bf00      	nop
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	20000b80 	.word	0x20000b80
 800db4c:	20000fe0 	.word	0x20000fe0
 800db50:	20000ff4 	.word	0x20000ff4
 800db54:	20001010 	.word	0x20001010
 800db58:	20001024 	.word	0x20001024
 800db5c:	2000103c 	.word	0x2000103c
 800db60:	20001008 	.word	0x20001008
 800db64:	2000100c 	.word	0x2000100c

0800db68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db6e:	e019      	b.n	800dba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db70:	f000 fdd0 	bl	800e714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db74:	4b10      	ldr	r3, [pc, #64]	; (800dbb8 <prvCheckTasksWaitingTermination+0x50>)
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3304      	adds	r3, #4
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fc81 	bl	800c488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db86:	4b0d      	ldr	r3, [pc, #52]	; (800dbbc <prvCheckTasksWaitingTermination+0x54>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	4a0b      	ldr	r2, [pc, #44]	; (800dbbc <prvCheckTasksWaitingTermination+0x54>)
 800db8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db90:	4b0b      	ldr	r3, [pc, #44]	; (800dbc0 <prvCheckTasksWaitingTermination+0x58>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3b01      	subs	r3, #1
 800db96:	4a0a      	ldr	r2, [pc, #40]	; (800dbc0 <prvCheckTasksWaitingTermination+0x58>)
 800db98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db9a:	f000 fdeb 	bl	800e774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f810 	bl	800dbc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dba4:	4b06      	ldr	r3, [pc, #24]	; (800dbc0 <prvCheckTasksWaitingTermination+0x58>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1e1      	bne.n	800db70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbac:	bf00      	nop
 800dbae:	bf00      	nop
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20001024 	.word	0x20001024
 800dbbc:	20001050 	.word	0x20001050
 800dbc0:	20001038 	.word	0x20001038

0800dbc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d108      	bne.n	800dbe8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 ff88 	bl	800eaf0 <vPortFree>
				vPortFree( pxTCB );
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 ff85 	bl	800eaf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbe6:	e018      	b.n	800dc1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d103      	bne.n	800dbfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 ff7c 	bl	800eaf0 <vPortFree>
	}
 800dbf8:	e00f      	b.n	800dc1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d00a      	beq.n	800dc1a <prvDeleteTCB+0x56>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	60fb      	str	r3, [r7, #12]
}
 800dc16:	bf00      	nop
 800dc18:	e7fe      	b.n	800dc18 <prvDeleteTCB+0x54>
	}
 800dc1a:	bf00      	nop
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc2a:	4b0c      	ldr	r3, [pc, #48]	; (800dc5c <prvResetNextTaskUnblockTime+0x38>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d104      	bne.n	800dc3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <prvResetNextTaskUnblockTime+0x3c>)
 800dc36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc3c:	e008      	b.n	800dc50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc3e:	4b07      	ldr	r3, [pc, #28]	; (800dc5c <prvResetNextTaskUnblockTime+0x38>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	4a04      	ldr	r2, [pc, #16]	; (800dc60 <prvResetNextTaskUnblockTime+0x3c>)
 800dc4e:	6013      	str	r3, [r2, #0]
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr
 800dc5c:	20001008 	.word	0x20001008
 800dc60:	20001070 	.word	0x20001070

0800dc64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc6a:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <xTaskGetSchedulerState+0x34>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d102      	bne.n	800dc78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc72:	2301      	movs	r3, #1
 800dc74:	607b      	str	r3, [r7, #4]
 800dc76:	e008      	b.n	800dc8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc78:	4b08      	ldr	r3, [pc, #32]	; (800dc9c <xTaskGetSchedulerState+0x38>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d102      	bne.n	800dc86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc80:	2302      	movs	r3, #2
 800dc82:	607b      	str	r3, [r7, #4]
 800dc84:	e001      	b.n	800dc8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc86:	2300      	movs	r3, #0
 800dc88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc8a:	687b      	ldr	r3, [r7, #4]
	}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr
 800dc98:	2000105c 	.word	0x2000105c
 800dc9c:	20001078 	.word	0x20001078

0800dca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d056      	beq.n	800dd64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dcb6:	4b2e      	ldr	r3, [pc, #184]	; (800dd70 <xTaskPriorityDisinherit+0xd0>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d00a      	beq.n	800dcd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	60fb      	str	r3, [r7, #12]
}
 800dcd2:	bf00      	nop
 800dcd4:	e7fe      	b.n	800dcd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10a      	bne.n	800dcf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	60bb      	str	r3, [r7, #8]
}
 800dcf0:	bf00      	nop
 800dcf2:	e7fe      	b.n	800dcf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcf8:	1e5a      	subs	r2, r3, #1
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d02c      	beq.n	800dd64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d128      	bne.n	800dd64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	3304      	adds	r3, #4
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fbb6 	bl	800c488 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd34:	4b0f      	ldr	r3, [pc, #60]	; (800dd74 <xTaskPriorityDisinherit+0xd4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d903      	bls.n	800dd44 <xTaskPriorityDisinherit+0xa4>
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	4a0c      	ldr	r2, [pc, #48]	; (800dd74 <xTaskPriorityDisinherit+0xd4>)
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4a09      	ldr	r2, [pc, #36]	; (800dd78 <xTaskPriorityDisinherit+0xd8>)
 800dd52:	441a      	add	r2, r3
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	3304      	adds	r3, #4
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	f7fe fb37 	bl	800c3ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd64:	697b      	ldr	r3, [r7, #20]
	}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000b7c 	.word	0x20000b7c
 800dd74:	20001058 	.word	0x20001058
 800dd78:	20000b80 	.word	0x20000b80

0800dd7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd86:	4b21      	ldr	r3, [pc, #132]	; (800de0c <prvAddCurrentTaskToDelayedList+0x90>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd8c:	4b20      	ldr	r3, [pc, #128]	; (800de10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	3304      	adds	r3, #4
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fe fb78 	bl	800c488 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd9e:	d10a      	bne.n	800ddb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d007      	beq.n	800ddb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dda6:	4b1a      	ldr	r3, [pc, #104]	; (800de10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3304      	adds	r3, #4
 800ddac:	4619      	mov	r1, r3
 800ddae:	4819      	ldr	r0, [pc, #100]	; (800de14 <prvAddCurrentTaskToDelayedList+0x98>)
 800ddb0:	f7fe fb0d 	bl	800c3ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddb4:	e026      	b.n	800de04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddb6:	68fa      	ldr	r2, [r7, #12]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4413      	add	r3, r2
 800ddbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddbe:	4b14      	ldr	r3, [pc, #80]	; (800de10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d209      	bcs.n	800dde2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddce:	4b12      	ldr	r3, [pc, #72]	; (800de18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b0f      	ldr	r3, [pc, #60]	; (800de10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	4619      	mov	r1, r3
 800ddda:	4610      	mov	r0, r2
 800dddc:	f7fe fb1b 	bl	800c416 <vListInsert>
}
 800dde0:	e010      	b.n	800de04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde2:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f7fe fb11 	bl	800c416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddf4:	4b0a      	ldr	r3, [pc, #40]	; (800de20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d202      	bcs.n	800de04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ddfe:	4a08      	ldr	r2, [pc, #32]	; (800de20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	6013      	str	r3, [r2, #0]
}
 800de04:	bf00      	nop
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	20001054 	.word	0x20001054
 800de10:	20000b7c 	.word	0x20000b7c
 800de14:	2000103c 	.word	0x2000103c
 800de18:	2000100c 	.word	0x2000100c
 800de1c:	20001008 	.word	0x20001008
 800de20:	20001070 	.word	0x20001070

0800de24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b08a      	sub	sp, #40	; 0x28
 800de28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de2e:	f000 fb07 	bl	800e440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de32:	4b1c      	ldr	r3, [pc, #112]	; (800dea4 <xTimerCreateTimerTask+0x80>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d021      	beq.n	800de7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de3a:	2300      	movs	r3, #0
 800de3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de3e:	2300      	movs	r3, #0
 800de40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de42:	1d3a      	adds	r2, r7, #4
 800de44:	f107 0108 	add.w	r1, r7, #8
 800de48:	f107 030c 	add.w	r3, r7, #12
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe fa77 	bl	800c340 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	9202      	str	r2, [sp, #8]
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	2302      	movs	r3, #2
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	2300      	movs	r3, #0
 800de62:	460a      	mov	r2, r1
 800de64:	4910      	ldr	r1, [pc, #64]	; (800dea8 <xTimerCreateTimerTask+0x84>)
 800de66:	4811      	ldr	r0, [pc, #68]	; (800deac <xTimerCreateTimerTask+0x88>)
 800de68:	f7ff f8de 	bl	800d028 <xTaskCreateStatic>
 800de6c:	4603      	mov	r3, r0
 800de6e:	4a10      	ldr	r2, [pc, #64]	; (800deb0 <xTimerCreateTimerTask+0x8c>)
 800de70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de72:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <xTimerCreateTimerTask+0x8c>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de7a:	2301      	movs	r3, #1
 800de7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10a      	bne.n	800de9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800de84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de88:	f383 8811 	msr	BASEPRI, r3
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	f3bf 8f4f 	dsb	sy
 800de94:	613b      	str	r3, [r7, #16]
}
 800de96:	bf00      	nop
 800de98:	e7fe      	b.n	800de98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800de9a:	697b      	ldr	r3, [r7, #20]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	200010ac 	.word	0x200010ac
 800dea8:	0800f6fc 	.word	0x0800f6fc
 800deac:	0800dfe9 	.word	0x0800dfe9
 800deb0:	200010b0 	.word	0x200010b0

0800deb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dec2:	2300      	movs	r3, #0
 800dec4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10a      	bne.n	800dee2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	623b      	str	r3, [r7, #32]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dee2:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <xTimerGenericCommand+0x98>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d02a      	beq.n	800df40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	2b05      	cmp	r3, #5
 800defa:	dc18      	bgt.n	800df2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800defc:	f7ff feb2 	bl	800dc64 <xTaskGetSchedulerState>
 800df00:	4603      	mov	r3, r0
 800df02:	2b02      	cmp	r3, #2
 800df04:	d109      	bne.n	800df1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df06:	4b11      	ldr	r3, [pc, #68]	; (800df4c <xTimerGenericCommand+0x98>)
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	f107 0110 	add.w	r1, r7, #16
 800df0e:	2300      	movs	r3, #0
 800df10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df12:	f7fe fc21 	bl	800c758 <xQueueGenericSend>
 800df16:	6278      	str	r0, [r7, #36]	; 0x24
 800df18:	e012      	b.n	800df40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df1a:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <xTimerGenericCommand+0x98>)
 800df1c:	6818      	ldr	r0, [r3, #0]
 800df1e:	f107 0110 	add.w	r1, r7, #16
 800df22:	2300      	movs	r3, #0
 800df24:	2200      	movs	r2, #0
 800df26:	f7fe fc17 	bl	800c758 <xQueueGenericSend>
 800df2a:	6278      	str	r0, [r7, #36]	; 0x24
 800df2c:	e008      	b.n	800df40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df2e:	4b07      	ldr	r3, [pc, #28]	; (800df4c <xTimerGenericCommand+0x98>)
 800df30:	6818      	ldr	r0, [r3, #0]
 800df32:	f107 0110 	add.w	r1, r7, #16
 800df36:	2300      	movs	r3, #0
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	f7fe fd0b 	bl	800c954 <xQueueGenericSendFromISR>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df42:	4618      	mov	r0, r3
 800df44:	3728      	adds	r7, #40	; 0x28
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	200010ac 	.word	0x200010ac

0800df50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b088      	sub	sp, #32
 800df54:	af02      	add	r7, sp, #8
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df5a:	4b22      	ldr	r3, [pc, #136]	; (800dfe4 <prvProcessExpiredTimer+0x94>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	3304      	adds	r3, #4
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fe fa8d 	bl	800c488 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df74:	f003 0304 	and.w	r3, r3, #4
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d022      	beq.n	800dfc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	699a      	ldr	r2, [r3, #24]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	18d1      	adds	r1, r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	683a      	ldr	r2, [r7, #0]
 800df88:	6978      	ldr	r0, [r7, #20]
 800df8a:	f000 f8d1 	bl	800e130 <prvInsertTimerInActiveList>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d01f      	beq.n	800dfd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df94:	2300      	movs	r3, #0
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	2300      	movs	r3, #0
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	2100      	movs	r1, #0
 800df9e:	6978      	ldr	r0, [r7, #20]
 800dfa0:	f7ff ff88 	bl	800deb4 <xTimerGenericCommand>
 800dfa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d113      	bne.n	800dfd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	60fb      	str	r3, [r7, #12]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfc8:	f023 0301 	bic.w	r3, r3, #1
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	6a1b      	ldr	r3, [r3, #32]
 800dfd8:	6978      	ldr	r0, [r7, #20]
 800dfda:	4798      	blx	r3
}
 800dfdc:	bf00      	nop
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	200010a4 	.word	0x200010a4

0800dfe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dff0:	f107 0308 	add.w	r3, r7, #8
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 f857 	bl	800e0a8 <prvGetNextExpireTime>
 800dffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	4619      	mov	r1, r3
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f000 f803 	bl	800e00c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e006:	f000 f8d5 	bl	800e1b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e00a:	e7f1      	b.n	800dff0 <prvTimerTask+0x8>

0800e00c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e016:	f7ff fa43 	bl	800d4a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e01a:	f107 0308 	add.w	r3, r7, #8
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 f866 	bl	800e0f0 <prvSampleTimeNow>
 800e024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d130      	bne.n	800e08e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10a      	bne.n	800e048 <prvProcessTimerOrBlockTask+0x3c>
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	429a      	cmp	r2, r3
 800e038:	d806      	bhi.n	800e048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e03a:	f7ff fa3f 	bl	800d4bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e03e:	68f9      	ldr	r1, [r7, #12]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff ff85 	bl	800df50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e046:	e024      	b.n	800e092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d008      	beq.n	800e060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <prvProcessTimerOrBlockTask+0x90>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d101      	bne.n	800e05c <prvProcessTimerOrBlockTask+0x50>
 800e058:	2301      	movs	r3, #1
 800e05a:	e000      	b.n	800e05e <prvProcessTimerOrBlockTask+0x52>
 800e05c:	2300      	movs	r3, #0
 800e05e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e060:	4b0f      	ldr	r3, [pc, #60]	; (800e0a0 <prvProcessTimerOrBlockTask+0x94>)
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	4619      	mov	r1, r3
 800e06e:	f7fe ffa7 	bl	800cfc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e072:	f7ff fa23 	bl	800d4bc <xTaskResumeAll>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e07c:	4b09      	ldr	r3, [pc, #36]	; (800e0a4 <prvProcessTimerOrBlockTask+0x98>)
 800e07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	f3bf 8f6f 	isb	sy
}
 800e08c:	e001      	b.n	800e092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e08e:	f7ff fa15 	bl	800d4bc <xTaskResumeAll>
}
 800e092:	bf00      	nop
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	200010a8 	.word	0x200010a8
 800e0a0:	200010ac 	.word	0x200010ac
 800e0a4:	e000ed04 	.word	0xe000ed04

0800e0a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0b0:	4b0e      	ldr	r3, [pc, #56]	; (800e0ec <prvGetNextExpireTime+0x44>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <prvGetNextExpireTime+0x16>
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	e000      	b.n	800e0c0 <prvGetNextExpireTime+0x18>
 800e0be:	2200      	movs	r2, #0
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d105      	bne.n	800e0d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <prvGetNextExpireTime+0x44>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	e001      	b.n	800e0dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	200010a4 	.word	0x200010a4

0800e0f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e0f8:	f7ff fa7e 	bl	800d5f8 <xTaskGetTickCount>
 800e0fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e0fe:	4b0b      	ldr	r3, [pc, #44]	; (800e12c <prvSampleTimeNow+0x3c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	429a      	cmp	r2, r3
 800e106:	d205      	bcs.n	800e114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e108:	f000 f936 	bl	800e378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2201      	movs	r2, #1
 800e110:	601a      	str	r2, [r3, #0]
 800e112:	e002      	b.n	800e11a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e11a:	4a04      	ldr	r2, [pc, #16]	; (800e12c <prvSampleTimeNow+0x3c>)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e120:	68fb      	ldr	r3, [r7, #12]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	200010b4 	.word	0x200010b4

0800e130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e13e:	2300      	movs	r3, #0
 800e140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	429a      	cmp	r2, r3
 800e154:	d812      	bhi.n	800e17c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	1ad2      	subs	r2, r2, r3
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	429a      	cmp	r2, r3
 800e162:	d302      	bcc.n	800e16a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	e01b      	b.n	800e1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e16a:	4b10      	ldr	r3, [pc, #64]	; (800e1ac <prvInsertTimerInActiveList+0x7c>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3304      	adds	r3, #4
 800e172:	4619      	mov	r1, r3
 800e174:	4610      	mov	r0, r2
 800e176:	f7fe f94e 	bl	800c416 <vListInsert>
 800e17a:	e012      	b.n	800e1a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	429a      	cmp	r2, r3
 800e182:	d206      	bcs.n	800e192 <prvInsertTimerInActiveList+0x62>
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d302      	bcc.n	800e192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e18c:	2301      	movs	r3, #1
 800e18e:	617b      	str	r3, [r7, #20]
 800e190:	e007      	b.n	800e1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e192:	4b07      	ldr	r3, [pc, #28]	; (800e1b0 <prvInsertTimerInActiveList+0x80>)
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3304      	adds	r3, #4
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f7fe f93a 	bl	800c416 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1a2:	697b      	ldr	r3, [r7, #20]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	200010a8 	.word	0x200010a8
 800e1b0:	200010a4 	.word	0x200010a4

0800e1b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08e      	sub	sp, #56	; 0x38
 800e1b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1ba:	e0ca      	b.n	800e352 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	da18      	bge.n	800e1f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e1c2:	1d3b      	adds	r3, r7, #4
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10a      	bne.n	800e1e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	61fb      	str	r3, [r7, #28]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ea:	6850      	ldr	r0, [r2, #4]
 800e1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ee:	6892      	ldr	r2, [r2, #8]
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f2c0 80aa 	blt.w	800e350 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	695b      	ldr	r3, [r3, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d004      	beq.n	800e212 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	3304      	adds	r3, #4
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe f93b 	bl	800c488 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e212:	463b      	mov	r3, r7
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff ff6b 	bl	800e0f0 <prvSampleTimeNow>
 800e21a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b09      	cmp	r3, #9
 800e220:	f200 8097 	bhi.w	800e352 <prvProcessReceivedCommands+0x19e>
 800e224:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <prvProcessReceivedCommands+0x78>)
 800e226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22a:	bf00      	nop
 800e22c:	0800e255 	.word	0x0800e255
 800e230:	0800e255 	.word	0x0800e255
 800e234:	0800e255 	.word	0x0800e255
 800e238:	0800e2c9 	.word	0x0800e2c9
 800e23c:	0800e2dd 	.word	0x0800e2dd
 800e240:	0800e327 	.word	0x0800e327
 800e244:	0800e255 	.word	0x0800e255
 800e248:	0800e255 	.word	0x0800e255
 800e24c:	0800e2c9 	.word	0x0800e2c9
 800e250:	0800e2dd 	.word	0x0800e2dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e25a:	f043 0301 	orr.w	r3, r3, #1
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	18d1      	adds	r1, r2, r3
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e274:	f7ff ff5c 	bl	800e130 <prvInsertTimerInActiveList>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d069      	beq.n	800e352 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e284:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e28c:	f003 0304 	and.w	r3, r3, #4
 800e290:	2b00      	cmp	r3, #0
 800e292:	d05e      	beq.n	800e352 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	441a      	add	r2, r3
 800e29c:	2300      	movs	r3, #0
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2a6:	f7ff fe05 	bl	800deb4 <xTimerGenericCommand>
 800e2aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d14f      	bne.n	800e352 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	61bb      	str	r3, [r7, #24]
}
 800e2c4:	bf00      	nop
 800e2c6:	e7fe      	b.n	800e2c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2ce:	f023 0301 	bic.w	r3, r3, #1
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e2da:	e03a      	b.n	800e352 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2e2:	f043 0301 	orr.w	r3, r3, #1
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2ee:	68ba      	ldr	r2, [r7, #8]
 800e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	699b      	ldr	r3, [r3, #24]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10a      	bne.n	800e312 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	617b      	str	r3, [r7, #20]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e314:	699a      	ldr	r2, [r3, #24]
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	18d1      	adds	r1, r2, r3
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e320:	f7ff ff06 	bl	800e130 <prvInsertTimerInActiveList>
					break;
 800e324:	e015      	b.n	800e352 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e32c:	f003 0302 	and.w	r3, r3, #2
 800e330:	2b00      	cmp	r3, #0
 800e332:	d103      	bne.n	800e33c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e336:	f000 fbdb 	bl	800eaf0 <vPortFree>
 800e33a:	e00a      	b.n	800e352 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e342:	f023 0301 	bic.w	r3, r3, #1
 800e346:	b2da      	uxtb	r2, r3
 800e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e34e:	e000      	b.n	800e352 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e352:	4b08      	ldr	r3, [pc, #32]	; (800e374 <prvProcessReceivedCommands+0x1c0>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	1d39      	adds	r1, r7, #4
 800e358:	2200      	movs	r2, #0
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe fb96 	bl	800ca8c <xQueueReceive>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	f47f af2a 	bne.w	800e1bc <prvProcessReceivedCommands+0x8>
	}
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	3730      	adds	r7, #48	; 0x30
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	200010ac 	.word	0x200010ac

0800e378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e37e:	e048      	b.n	800e412 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e380:	4b2d      	ldr	r3, [pc, #180]	; (800e438 <prvSwitchTimerLists+0xc0>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e38a:	4b2b      	ldr	r3, [pc, #172]	; (800e438 <prvSwitchTimerLists+0xc0>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	3304      	adds	r3, #4
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fe f875 	bl	800c488 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3ac:	f003 0304 	and.w	r3, r3, #4
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d02e      	beq.n	800e412 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	699b      	ldr	r3, [r3, #24]
 800e3b8:	693a      	ldr	r2, [r7, #16]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d90e      	bls.n	800e3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3d2:	4b19      	ldr	r3, [pc, #100]	; (800e438 <prvSwitchTimerLists+0xc0>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3304      	adds	r3, #4
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f7fe f81a 	bl	800c416 <vListInsert>
 800e3e2:	e016      	b.n	800e412 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f7ff fd60 	bl	800deb4 <xTimerGenericCommand>
 800e3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10a      	bne.n	800e412 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	603b      	str	r3, [r7, #0]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e412:	4b09      	ldr	r3, [pc, #36]	; (800e438 <prvSwitchTimerLists+0xc0>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1b1      	bne.n	800e380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e41c:	4b06      	ldr	r3, [pc, #24]	; (800e438 <prvSwitchTimerLists+0xc0>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e422:	4b06      	ldr	r3, [pc, #24]	; (800e43c <prvSwitchTimerLists+0xc4>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a04      	ldr	r2, [pc, #16]	; (800e438 <prvSwitchTimerLists+0xc0>)
 800e428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e42a:	4a04      	ldr	r2, [pc, #16]	; (800e43c <prvSwitchTimerLists+0xc4>)
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	6013      	str	r3, [r2, #0]
}
 800e430:	bf00      	nop
 800e432:	3718      	adds	r7, #24
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	200010a4 	.word	0x200010a4
 800e43c:	200010a8 	.word	0x200010a8

0800e440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e446:	f000 f965 	bl	800e714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e44a:	4b15      	ldr	r3, [pc, #84]	; (800e4a0 <prvCheckForValidListAndQueue+0x60>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d120      	bne.n	800e494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e452:	4814      	ldr	r0, [pc, #80]	; (800e4a4 <prvCheckForValidListAndQueue+0x64>)
 800e454:	f7fd ff8e 	bl	800c374 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e458:	4813      	ldr	r0, [pc, #76]	; (800e4a8 <prvCheckForValidListAndQueue+0x68>)
 800e45a:	f7fd ff8b 	bl	800c374 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e45e:	4b13      	ldr	r3, [pc, #76]	; (800e4ac <prvCheckForValidListAndQueue+0x6c>)
 800e460:	4a10      	ldr	r2, [pc, #64]	; (800e4a4 <prvCheckForValidListAndQueue+0x64>)
 800e462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e464:	4b12      	ldr	r3, [pc, #72]	; (800e4b0 <prvCheckForValidListAndQueue+0x70>)
 800e466:	4a10      	ldr	r2, [pc, #64]	; (800e4a8 <prvCheckForValidListAndQueue+0x68>)
 800e468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e46a:	2300      	movs	r3, #0
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4b11      	ldr	r3, [pc, #68]	; (800e4b4 <prvCheckForValidListAndQueue+0x74>)
 800e470:	4a11      	ldr	r2, [pc, #68]	; (800e4b8 <prvCheckForValidListAndQueue+0x78>)
 800e472:	2110      	movs	r1, #16
 800e474:	200a      	movs	r0, #10
 800e476:	f7fe f899 	bl	800c5ac <xQueueGenericCreateStatic>
 800e47a:	4603      	mov	r3, r0
 800e47c:	4a08      	ldr	r2, [pc, #32]	; (800e4a0 <prvCheckForValidListAndQueue+0x60>)
 800e47e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <prvCheckForValidListAndQueue+0x60>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d005      	beq.n	800e494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e488:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <prvCheckForValidListAndQueue+0x60>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	490b      	ldr	r1, [pc, #44]	; (800e4bc <prvCheckForValidListAndQueue+0x7c>)
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fe fd6c 	bl	800cf6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e494:	f000 f96e 	bl	800e774 <vPortExitCritical>
}
 800e498:	bf00      	nop
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	200010ac 	.word	0x200010ac
 800e4a4:	2000107c 	.word	0x2000107c
 800e4a8:	20001090 	.word	0x20001090
 800e4ac:	200010a4 	.word	0x200010a4
 800e4b0:	200010a8 	.word	0x200010a8
 800e4b4:	20001158 	.word	0x20001158
 800e4b8:	200010b8 	.word	0x200010b8
 800e4bc:	0800f704 	.word	0x0800f704

0800e4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3b04      	subs	r3, #4
 800e4d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	f023 0201 	bic.w	r2, r3, #1
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	3b04      	subs	r3, #4
 800e4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4f0:	4a0c      	ldr	r2, [pc, #48]	; (800e524 <pxPortInitialiseStack+0x64>)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3b14      	subs	r3, #20
 800e4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3b04      	subs	r3, #4
 800e506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f06f 0202 	mvn.w	r2, #2
 800e50e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3b20      	subs	r3, #32
 800e514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e516:	68fb      	ldr	r3, [r7, #12]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	0800e529 	.word	0x0800e529

0800e528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e532:	4b12      	ldr	r3, [pc, #72]	; (800e57c <prvTaskExitError+0x54>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e53a:	d00a      	beq.n	800e552 <prvTaskExitError+0x2a>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	60fb      	str	r3, [r7, #12]
}
 800e54e:	bf00      	nop
 800e550:	e7fe      	b.n	800e550 <prvTaskExitError+0x28>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	60bb      	str	r3, [r7, #8]
}
 800e564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e566:	bf00      	nop
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d0fc      	beq.n	800e568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e56e:	bf00      	nop
 800e570:	bf00      	nop
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	2000002c 	.word	0x2000002c

0800e580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <pxCurrentTCBConst2>)
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	6808      	ldr	r0, [r1, #0]
 800e586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58a:	f380 8809 	msr	PSP, r0
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8811 	msr	BASEPRI, r0
 800e59a:	4770      	bx	lr
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst2>:
 800e5a0:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop

0800e5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5a8:	4808      	ldr	r0, [pc, #32]	; (800e5cc <prvPortStartFirstTask+0x24>)
 800e5aa:	6800      	ldr	r0, [r0, #0]
 800e5ac:	6800      	ldr	r0, [r0, #0]
 800e5ae:	f380 8808 	msr	MSP, r0
 800e5b2:	f04f 0000 	mov.w	r0, #0
 800e5b6:	f380 8814 	msr	CONTROL, r0
 800e5ba:	b662      	cpsie	i
 800e5bc:	b661      	cpsie	f
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	df00      	svc	0
 800e5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ca:	bf00      	nop
 800e5cc:	e000ed08 	.word	0xe000ed08

0800e5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5d6:	4b46      	ldr	r3, [pc, #280]	; (800e6f0 <xPortStartScheduler+0x120>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a46      	ldr	r2, [pc, #280]	; (800e6f4 <xPortStartScheduler+0x124>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d10a      	bne.n	800e5f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	613b      	str	r3, [r7, #16]
}
 800e5f2:	bf00      	nop
 800e5f4:	e7fe      	b.n	800e5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5f6:	4b3e      	ldr	r3, [pc, #248]	; (800e6f0 <xPortStartScheduler+0x120>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a3f      	ldr	r2, [pc, #252]	; (800e6f8 <xPortStartScheduler+0x128>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d10a      	bne.n	800e616 <xPortStartScheduler+0x46>
	__asm volatile
 800e600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e604:	f383 8811 	msr	BASEPRI, r3
 800e608:	f3bf 8f6f 	isb	sy
 800e60c:	f3bf 8f4f 	dsb	sy
 800e610:	60fb      	str	r3, [r7, #12]
}
 800e612:	bf00      	nop
 800e614:	e7fe      	b.n	800e614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e616:	4b39      	ldr	r3, [pc, #228]	; (800e6fc <xPortStartScheduler+0x12c>)
 800e618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	22ff      	movs	r2, #255	; 0xff
 800e626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e630:	78fb      	ldrb	r3, [r7, #3]
 800e632:	b2db      	uxtb	r3, r3
 800e634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	4b31      	ldr	r3, [pc, #196]	; (800e700 <xPortStartScheduler+0x130>)
 800e63c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e63e:	4b31      	ldr	r3, [pc, #196]	; (800e704 <xPortStartScheduler+0x134>)
 800e640:	2207      	movs	r2, #7
 800e642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e644:	e009      	b.n	800e65a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e646:	4b2f      	ldr	r3, [pc, #188]	; (800e704 <xPortStartScheduler+0x134>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	4a2d      	ldr	r2, [pc, #180]	; (800e704 <xPortStartScheduler+0x134>)
 800e64e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	b2db      	uxtb	r3, r3
 800e654:	005b      	lsls	r3, r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e65a:	78fb      	ldrb	r3, [r7, #3]
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e662:	2b80      	cmp	r3, #128	; 0x80
 800e664:	d0ef      	beq.n	800e646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e666:	4b27      	ldr	r3, [pc, #156]	; (800e704 <xPortStartScheduler+0x134>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f1c3 0307 	rsb	r3, r3, #7
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d00a      	beq.n	800e688 <xPortStartScheduler+0xb8>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	60bb      	str	r3, [r7, #8]
}
 800e684:	bf00      	nop
 800e686:	e7fe      	b.n	800e686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e688:	4b1e      	ldr	r3, [pc, #120]	; (800e704 <xPortStartScheduler+0x134>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	021b      	lsls	r3, r3, #8
 800e68e:	4a1d      	ldr	r2, [pc, #116]	; (800e704 <xPortStartScheduler+0x134>)
 800e690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e692:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <xPortStartScheduler+0x134>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e69a:	4a1a      	ldr	r2, [pc, #104]	; (800e704 <xPortStartScheduler+0x134>)
 800e69c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6a6:	4b18      	ldr	r3, [pc, #96]	; (800e708 <xPortStartScheduler+0x138>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a17      	ldr	r2, [pc, #92]	; (800e708 <xPortStartScheduler+0x138>)
 800e6ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6b2:	4b15      	ldr	r3, [pc, #84]	; (800e708 <xPortStartScheduler+0x138>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a14      	ldr	r2, [pc, #80]	; (800e708 <xPortStartScheduler+0x138>)
 800e6b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6be:	f000 f8dd 	bl	800e87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6c2:	4b12      	ldr	r3, [pc, #72]	; (800e70c <xPortStartScheduler+0x13c>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6c8:	f000 f8fc 	bl	800e8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6cc:	4b10      	ldr	r3, [pc, #64]	; (800e710 <xPortStartScheduler+0x140>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a0f      	ldr	r2, [pc, #60]	; (800e710 <xPortStartScheduler+0x140>)
 800e6d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6d8:	f7ff ff66 	bl	800e5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6dc:	f7ff f856 	bl	800d78c <vTaskSwitchContext>
	prvTaskExitError();
 800e6e0:	f7ff ff22 	bl	800e528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	e000ed00 	.word	0xe000ed00
 800e6f4:	410fc271 	.word	0x410fc271
 800e6f8:	410fc270 	.word	0x410fc270
 800e6fc:	e000e400 	.word	0xe000e400
 800e700:	200011a8 	.word	0x200011a8
 800e704:	200011ac 	.word	0x200011ac
 800e708:	e000ed20 	.word	0xe000ed20
 800e70c:	2000002c 	.word	0x2000002c
 800e710:	e000ef34 	.word	0xe000ef34

0800e714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
	__asm volatile
 800e71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71e:	f383 8811 	msr	BASEPRI, r3
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	f3bf 8f4f 	dsb	sy
 800e72a:	607b      	str	r3, [r7, #4]
}
 800e72c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e72e:	4b0f      	ldr	r3, [pc, #60]	; (800e76c <vPortEnterCritical+0x58>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	3301      	adds	r3, #1
 800e734:	4a0d      	ldr	r2, [pc, #52]	; (800e76c <vPortEnterCritical+0x58>)
 800e736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e738:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <vPortEnterCritical+0x58>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d10f      	bne.n	800e760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e740:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <vPortEnterCritical+0x5c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	b2db      	uxtb	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00a      	beq.n	800e760 <vPortEnterCritical+0x4c>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	603b      	str	r3, [r7, #0]
}
 800e75c:	bf00      	nop
 800e75e:	e7fe      	b.n	800e75e <vPortEnterCritical+0x4a>
	}
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	2000002c 	.word	0x2000002c
 800e770:	e000ed04 	.word	0xe000ed04

0800e774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e77a:	4b12      	ldr	r3, [pc, #72]	; (800e7c4 <vPortExitCritical+0x50>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d10a      	bne.n	800e798 <vPortExitCritical+0x24>
	__asm volatile
 800e782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	607b      	str	r3, [r7, #4]
}
 800e794:	bf00      	nop
 800e796:	e7fe      	b.n	800e796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e798:	4b0a      	ldr	r3, [pc, #40]	; (800e7c4 <vPortExitCritical+0x50>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	4a09      	ldr	r2, [pc, #36]	; (800e7c4 <vPortExitCritical+0x50>)
 800e7a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7a2:	4b08      	ldr	r3, [pc, #32]	; (800e7c4 <vPortExitCritical+0x50>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d105      	bne.n	800e7b6 <vPortExitCritical+0x42>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	f383 8811 	msr	BASEPRI, r3
}
 800e7b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	2000002c 	.word	0x2000002c
	...

0800e7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7d0:	f3ef 8009 	mrs	r0, PSP
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	4b15      	ldr	r3, [pc, #84]	; (800e830 <pxCurrentTCBConst>)
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	f01e 0f10 	tst.w	lr, #16
 800e7e0:	bf08      	it	eq
 800e7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ea:	6010      	str	r0, [r2, #0]
 800e7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7f4:	f380 8811 	msr	BASEPRI, r0
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f7fe ffc4 	bl	800d78c <vTaskSwitchContext>
 800e804:	f04f 0000 	mov.w	r0, #0
 800e808:	f380 8811 	msr	BASEPRI, r0
 800e80c:	bc09      	pop	{r0, r3}
 800e80e:	6819      	ldr	r1, [r3, #0]
 800e810:	6808      	ldr	r0, [r1, #0]
 800e812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e816:	f01e 0f10 	tst.w	lr, #16
 800e81a:	bf08      	it	eq
 800e81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e820:	f380 8809 	msr	PSP, r0
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	f3af 8000 	nop.w

0800e830 <pxCurrentTCBConst>:
 800e830:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e834:	bf00      	nop
 800e836:	bf00      	nop

0800e838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	607b      	str	r3, [r7, #4]
}
 800e850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e852:	f7fe fee1 	bl	800d618 <xTaskIncrementTick>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d003      	beq.n	800e864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e85c:	4b06      	ldr	r3, [pc, #24]	; (800e878 <xPortSysTickHandler+0x40>)
 800e85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	2300      	movs	r3, #0
 800e866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	f383 8811 	msr	BASEPRI, r3
}
 800e86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e870:	bf00      	nop
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	e000ed04 	.word	0xe000ed04

0800e87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e87c:	b480      	push	{r7}
 800e87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e880:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <vPortSetupTimerInterrupt+0x34>)
 800e882:	2200      	movs	r2, #0
 800e884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e886:	4b0b      	ldr	r3, [pc, #44]	; (800e8b4 <vPortSetupTimerInterrupt+0x38>)
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e88c:	4b0a      	ldr	r3, [pc, #40]	; (800e8b8 <vPortSetupTimerInterrupt+0x3c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a0a      	ldr	r2, [pc, #40]	; (800e8bc <vPortSetupTimerInterrupt+0x40>)
 800e892:	fba2 2303 	umull	r2, r3, r2, r3
 800e896:	099b      	lsrs	r3, r3, #6
 800e898:	4a09      	ldr	r2, [pc, #36]	; (800e8c0 <vPortSetupTimerInterrupt+0x44>)
 800e89a:	3b01      	subs	r3, #1
 800e89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e89e:	4b04      	ldr	r3, [pc, #16]	; (800e8b0 <vPortSetupTimerInterrupt+0x34>)
 800e8a0:	2207      	movs	r2, #7
 800e8a2:	601a      	str	r2, [r3, #0]
}
 800e8a4:	bf00      	nop
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	e000e010 	.word	0xe000e010
 800e8b4:	e000e018 	.word	0xe000e018
 800e8b8:	20000000 	.word	0x20000000
 800e8bc:	10624dd3 	.word	0x10624dd3
 800e8c0:	e000e014 	.word	0xe000e014

0800e8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8d4 <vPortEnableVFP+0x10>
 800e8c8:	6801      	ldr	r1, [r0, #0]
 800e8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8ce:	6001      	str	r1, [r0, #0]
 800e8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8d2:	bf00      	nop
 800e8d4:	e000ed88 	.word	0xe000ed88

0800e8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8de:	f3ef 8305 	mrs	r3, IPSR
 800e8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2b0f      	cmp	r3, #15
 800e8e8:	d914      	bls.n	800e914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ea:	4a17      	ldr	r2, [pc, #92]	; (800e948 <vPortValidateInterruptPriority+0x70>)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8f4:	4b15      	ldr	r3, [pc, #84]	; (800e94c <vPortValidateInterruptPriority+0x74>)
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	7afa      	ldrb	r2, [r7, #11]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d20a      	bcs.n	800e914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	607b      	str	r3, [r7, #4]
}
 800e910:	bf00      	nop
 800e912:	e7fe      	b.n	800e912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e914:	4b0e      	ldr	r3, [pc, #56]	; (800e950 <vPortValidateInterruptPriority+0x78>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e91c:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <vPortValidateInterruptPriority+0x7c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	429a      	cmp	r2, r3
 800e922:	d90a      	bls.n	800e93a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	603b      	str	r3, [r7, #0]
}
 800e936:	bf00      	nop
 800e938:	e7fe      	b.n	800e938 <vPortValidateInterruptPriority+0x60>
	}
 800e93a:	bf00      	nop
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	e000e3f0 	.word	0xe000e3f0
 800e94c:	200011a8 	.word	0x200011a8
 800e950:	e000ed0c 	.word	0xe000ed0c
 800e954:	200011ac 	.word	0x200011ac

0800e958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e960:	2300      	movs	r3, #0
 800e962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e964:	f7fe fd9c 	bl	800d4a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e968:	4b5b      	ldr	r3, [pc, #364]	; (800ead8 <pvPortMalloc+0x180>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d101      	bne.n	800e974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e970:	f000 f920 	bl	800ebb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e974:	4b59      	ldr	r3, [pc, #356]	; (800eadc <pvPortMalloc+0x184>)
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	4013      	ands	r3, r2
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f040 8093 	bne.w	800eaa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d01d      	beq.n	800e9c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e988:	2208      	movs	r2, #8
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4413      	add	r3, r2
 800e98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f003 0307 	and.w	r3, r3, #7
 800e996:	2b00      	cmp	r3, #0
 800e998:	d014      	beq.n	800e9c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f023 0307 	bic.w	r3, r3, #7
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f003 0307 	and.w	r3, r3, #7
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00a      	beq.n	800e9c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b2:	f383 8811 	msr	BASEPRI, r3
 800e9b6:	f3bf 8f6f 	isb	sy
 800e9ba:	f3bf 8f4f 	dsb	sy
 800e9be:	617b      	str	r3, [r7, #20]
}
 800e9c0:	bf00      	nop
 800e9c2:	e7fe      	b.n	800e9c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d06e      	beq.n	800eaa8 <pvPortMalloc+0x150>
 800e9ca:	4b45      	ldr	r3, [pc, #276]	; (800eae0 <pvPortMalloc+0x188>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d869      	bhi.n	800eaa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9d4:	4b43      	ldr	r3, [pc, #268]	; (800eae4 <pvPortMalloc+0x18c>)
 800e9d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9d8:	4b42      	ldr	r3, [pc, #264]	; (800eae4 <pvPortMalloc+0x18c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9de:	e004      	b.n	800e9ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d903      	bls.n	800e9fc <pvPortMalloc+0xa4>
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1f1      	bne.n	800e9e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9fc:	4b36      	ldr	r3, [pc, #216]	; (800ead8 <pvPortMalloc+0x180>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d050      	beq.n	800eaa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea06:	6a3b      	ldr	r3, [r7, #32]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2208      	movs	r2, #8
 800ea0c:	4413      	add	r3, r2
 800ea0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	1ad2      	subs	r2, r2, r3
 800ea20:	2308      	movs	r3, #8
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d91f      	bls.n	800ea68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00a      	beq.n	800ea50 <pvPortMalloc+0xf8>
	__asm volatile
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	f383 8811 	msr	BASEPRI, r3
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	613b      	str	r3, [r7, #16]
}
 800ea4c:	bf00      	nop
 800ea4e:	e7fe      	b.n	800ea4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	685a      	ldr	r2, [r3, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	1ad2      	subs	r2, r2, r3
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea62:	69b8      	ldr	r0, [r7, #24]
 800ea64:	f000 f908 	bl	800ec78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea68:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <pvPortMalloc+0x188>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	4a1b      	ldr	r2, [pc, #108]	; (800eae0 <pvPortMalloc+0x188>)
 800ea74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea76:	4b1a      	ldr	r3, [pc, #104]	; (800eae0 <pvPortMalloc+0x188>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	4b1b      	ldr	r3, [pc, #108]	; (800eae8 <pvPortMalloc+0x190>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d203      	bcs.n	800ea8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea82:	4b17      	ldr	r3, [pc, #92]	; (800eae0 <pvPortMalloc+0x188>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a18      	ldr	r2, [pc, #96]	; (800eae8 <pvPortMalloc+0x190>)
 800ea88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	4b13      	ldr	r3, [pc, #76]	; (800eadc <pvPortMalloc+0x184>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	431a      	orrs	r2, r3
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea9e:	4b13      	ldr	r3, [pc, #76]	; (800eaec <pvPortMalloc+0x194>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	4a11      	ldr	r2, [pc, #68]	; (800eaec <pvPortMalloc+0x194>)
 800eaa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eaa8:	f7fe fd08 	bl	800d4bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	f003 0307 	and.w	r3, r3, #7
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00a      	beq.n	800eacc <pvPortMalloc+0x174>
	__asm volatile
 800eab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaba:	f383 8811 	msr	BASEPRI, r3
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	60fb      	str	r3, [r7, #12]
}
 800eac8:	bf00      	nop
 800eaca:	e7fe      	b.n	800eaca <pvPortMalloc+0x172>
	return pvReturn;
 800eacc:	69fb      	ldr	r3, [r7, #28]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3728      	adds	r7, #40	; 0x28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20004db8 	.word	0x20004db8
 800eadc:	20004dcc 	.word	0x20004dcc
 800eae0:	20004dbc 	.word	0x20004dbc
 800eae4:	20004db0 	.word	0x20004db0
 800eae8:	20004dc0 	.word	0x20004dc0
 800eaec:	20004dc4 	.word	0x20004dc4

0800eaf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d04d      	beq.n	800eb9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb02:	2308      	movs	r3, #8
 800eb04:	425b      	negs	r3, r3
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	4413      	add	r3, r2
 800eb0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	4b24      	ldr	r3, [pc, #144]	; (800eba8 <vPortFree+0xb8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4013      	ands	r3, r2
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10a      	bne.n	800eb34 <vPortFree+0x44>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60fb      	str	r3, [r7, #12]
}
 800eb30:	bf00      	nop
 800eb32:	e7fe      	b.n	800eb32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00a      	beq.n	800eb52 <vPortFree+0x62>
	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	60bb      	str	r3, [r7, #8]
}
 800eb4e:	bf00      	nop
 800eb50:	e7fe      	b.n	800eb50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	685a      	ldr	r2, [r3, #4]
 800eb56:	4b14      	ldr	r3, [pc, #80]	; (800eba8 <vPortFree+0xb8>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4013      	ands	r3, r2
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d01e      	beq.n	800eb9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d11a      	bne.n	800eb9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <vPortFree+0xb8>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	43db      	mvns	r3, r3
 800eb72:	401a      	ands	r2, r3
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb78:	f7fe fc92 	bl	800d4a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	685a      	ldr	r2, [r3, #4]
 800eb80:	4b0a      	ldr	r3, [pc, #40]	; (800ebac <vPortFree+0xbc>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4413      	add	r3, r2
 800eb86:	4a09      	ldr	r2, [pc, #36]	; (800ebac <vPortFree+0xbc>)
 800eb88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb8a:	6938      	ldr	r0, [r7, #16]
 800eb8c:	f000 f874 	bl	800ec78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb90:	4b07      	ldr	r3, [pc, #28]	; (800ebb0 <vPortFree+0xc0>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	3301      	adds	r3, #1
 800eb96:	4a06      	ldr	r2, [pc, #24]	; (800ebb0 <vPortFree+0xc0>)
 800eb98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb9a:	f7fe fc8f 	bl	800d4bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb9e:	bf00      	nop
 800eba0:	3718      	adds	r7, #24
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20004dcc 	.word	0x20004dcc
 800ebac:	20004dbc 	.word	0x20004dbc
 800ebb0:	20004dc8 	.word	0x20004dc8

0800ebb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ebbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebc0:	4b27      	ldr	r3, [pc, #156]	; (800ec60 <prvHeapInit+0xac>)
 800ebc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f003 0307 	and.w	r3, r3, #7
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00c      	beq.n	800ebe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3307      	adds	r3, #7
 800ebd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f023 0307 	bic.w	r3, r3, #7
 800ebda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	4a1f      	ldr	r2, [pc, #124]	; (800ec60 <prvHeapInit+0xac>)
 800ebe4:	4413      	add	r3, r2
 800ebe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebec:	4a1d      	ldr	r2, [pc, #116]	; (800ec64 <prvHeapInit+0xb0>)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebf2:	4b1c      	ldr	r3, [pc, #112]	; (800ec64 <prvHeapInit+0xb0>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec00:	2208      	movs	r2, #8
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	1a9b      	subs	r3, r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f023 0307 	bic.w	r3, r3, #7
 800ec0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <prvHeapInit+0xb4>)
 800ec14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <prvHeapInit+0xb4>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec1e:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <prvHeapInit+0xb4>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2200      	movs	r2, #0
 800ec24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	1ad2      	subs	r2, r2, r3
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec34:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <prvHeapInit+0xb4>)
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	4a0a      	ldr	r2, [pc, #40]	; (800ec6c <prvHeapInit+0xb8>)
 800ec42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	4a09      	ldr	r2, [pc, #36]	; (800ec70 <prvHeapInit+0xbc>)
 800ec4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec4c:	4b09      	ldr	r3, [pc, #36]	; (800ec74 <prvHeapInit+0xc0>)
 800ec4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec52:	601a      	str	r2, [r3, #0]
}
 800ec54:	bf00      	nop
 800ec56:	3714      	adds	r7, #20
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	200011b0 	.word	0x200011b0
 800ec64:	20004db0 	.word	0x20004db0
 800ec68:	20004db8 	.word	0x20004db8
 800ec6c:	20004dc0 	.word	0x20004dc0
 800ec70:	20004dbc 	.word	0x20004dbc
 800ec74:	20004dcc 	.word	0x20004dcc

0800ec78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec80:	4b28      	ldr	r3, [pc, #160]	; (800ed24 <prvInsertBlockIntoFreeList+0xac>)
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e002      	b.n	800ec8c <prvInsertBlockIntoFreeList+0x14>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	60fb      	str	r3, [r7, #12]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d8f7      	bhi.n	800ec86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	4413      	add	r3, r2
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d108      	bne.n	800ecba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	441a      	add	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d118      	bne.n	800ed00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <prvInsertBlockIntoFreeList+0xb0>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d00d      	beq.n	800ecf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	441a      	add	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	e008      	b.n	800ed08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <prvInsertBlockIntoFreeList+0xb0>)
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	e003      	b.n	800ed08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d002      	beq.n	800ed16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed16:	bf00      	nop
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	20004db0 	.word	0x20004db0
 800ed28:	20004db8 	.word	0x20004db8

0800ed2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed30:	2201      	movs	r2, #1
 800ed32:	490e      	ldr	r1, [pc, #56]	; (800ed6c <MX_USB_HOST_Init+0x40>)
 800ed34:	480e      	ldr	r0, [pc, #56]	; (800ed70 <MX_USB_HOST_Init+0x44>)
 800ed36:	f7fb faf5 	bl	800a324 <USBH_Init>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed40:	f7f2 fe62 	bl	8001a08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ed44:	490b      	ldr	r1, [pc, #44]	; (800ed74 <MX_USB_HOST_Init+0x48>)
 800ed46:	480a      	ldr	r0, [pc, #40]	; (800ed70 <MX_USB_HOST_Init+0x44>)
 800ed48:	f7fb fb9c 	bl	800a484 <USBH_RegisterClass>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ed52:	f7f2 fe59 	bl	8001a08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ed56:	4806      	ldr	r0, [pc, #24]	; (800ed70 <MX_USB_HOST_Init+0x44>)
 800ed58:	f7fb fc20 	bl	800a59c <USBH_Start>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ed62:	f7f2 fe51 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ed66:	bf00      	nop
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	0800ed79 	.word	0x0800ed79
 800ed70:	200050d0 	.word	0x200050d0
 800ed74:	2000000c 	.word	0x2000000c

0800ed78 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	460b      	mov	r3, r1
 800ed82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ed84:	78fb      	ldrb	r3, [r7, #3]
 800ed86:	3b01      	subs	r3, #1
 800ed88:	2b04      	cmp	r3, #4
 800ed8a:	d819      	bhi.n	800edc0 <USBH_UserProcess+0x48>
 800ed8c:	a201      	add	r2, pc, #4	; (adr r2, 800ed94 <USBH_UserProcess+0x1c>)
 800ed8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed92:	bf00      	nop
 800ed94:	0800edc1 	.word	0x0800edc1
 800ed98:	0800edb1 	.word	0x0800edb1
 800ed9c:	0800edc1 	.word	0x0800edc1
 800eda0:	0800edb9 	.word	0x0800edb9
 800eda4:	0800eda9 	.word	0x0800eda9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eda8:	4b09      	ldr	r3, [pc, #36]	; (800edd0 <USBH_UserProcess+0x58>)
 800edaa:	2203      	movs	r2, #3
 800edac:	701a      	strb	r2, [r3, #0]
  break;
 800edae:	e008      	b.n	800edc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800edb0:	4b07      	ldr	r3, [pc, #28]	; (800edd0 <USBH_UserProcess+0x58>)
 800edb2:	2202      	movs	r2, #2
 800edb4:	701a      	strb	r2, [r3, #0]
  break;
 800edb6:	e004      	b.n	800edc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800edb8:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <USBH_UserProcess+0x58>)
 800edba:	2201      	movs	r2, #1
 800edbc:	701a      	strb	r2, [r3, #0]
  break;
 800edbe:	e000      	b.n	800edc2 <USBH_UserProcess+0x4a>

  default:
  break;
 800edc0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800edc2:	bf00      	nop
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	20004dd0 	.word	0x20004dd0

0800edd4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08a      	sub	sp, #40	; 0x28
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eddc:	f107 0314 	add.w	r3, r7, #20
 800ede0:	2200      	movs	r2, #0
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	605a      	str	r2, [r3, #4]
 800ede6:	609a      	str	r2, [r3, #8]
 800ede8:	60da      	str	r2, [r3, #12]
 800edea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800edf4:	d147      	bne.n	800ee86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edf6:	2300      	movs	r3, #0
 800edf8:	613b      	str	r3, [r7, #16]
 800edfa:	4b25      	ldr	r3, [pc, #148]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800edfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfe:	4a24      	ldr	r2, [pc, #144]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee00:	f043 0301 	orr.w	r3, r3, #1
 800ee04:	6313      	str	r3, [r2, #48]	; 0x30
 800ee06:	4b22      	ldr	r3, [pc, #136]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	613b      	str	r3, [r7, #16]
 800ee10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ee12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ee20:	f107 0314 	add.w	r3, r7, #20
 800ee24:	4619      	mov	r1, r3
 800ee26:	481b      	ldr	r0, [pc, #108]	; (800ee94 <HAL_HCD_MspInit+0xc0>)
 800ee28:	f7f3 ff8c 	bl	8002d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ee2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ee30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee32:	2302      	movs	r3, #2
 800ee34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee36:	2300      	movs	r3, #0
 800ee38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee3e:	230a      	movs	r3, #10
 800ee40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee42:	f107 0314 	add.w	r3, r7, #20
 800ee46:	4619      	mov	r1, r3
 800ee48:	4812      	ldr	r0, [pc, #72]	; (800ee94 <HAL_HCD_MspInit+0xc0>)
 800ee4a:	f7f3 ff7b 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee4e:	4b10      	ldr	r3, [pc, #64]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee52:	4a0f      	ldr	r2, [pc, #60]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee58:	6353      	str	r3, [r2, #52]	; 0x34
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60fb      	str	r3, [r7, #12]
 800ee5e:	4b0c      	ldr	r3, [pc, #48]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee62:	4a0b      	ldr	r2, [pc, #44]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee68:	6453      	str	r3, [r2, #68]	; 0x44
 800ee6a:	4b09      	ldr	r3, [pc, #36]	; (800ee90 <HAL_HCD_MspInit+0xbc>)
 800ee6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ee76:	2200      	movs	r2, #0
 800ee78:	2105      	movs	r1, #5
 800ee7a:	2043      	movs	r0, #67	; 0x43
 800ee7c:	f7f3 fea6 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee80:	2043      	movs	r0, #67	; 0x43
 800ee82:	f7f3 febf 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee86:	bf00      	nop
 800ee88:	3728      	adds	r7, #40	; 0x28
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	40023800 	.word	0x40023800
 800ee94:	40020000 	.word	0x40020000

0800ee98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fc f825 	bl	800aef6 <USBH_LL_IncTimer>
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fc f869 	bl	800af9a <USBH_LL_Connect>
}
 800eec8:	bf00      	nop
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fc f87e 	bl	800afe0 <USBH_LL_Disconnect>
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	460b      	mov	r3, r1
 800eef6:	70fb      	strb	r3, [r7, #3]
 800eef8:	4613      	mov	r3, r2
 800eefa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fc f8b5 	bl	800b072 <USBH_LL_NotifyURBChange>
#endif
}
 800ef08:	bf00      	nop
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fc f813 	bl	800af4a <USBH_LL_PortEnabled>
}
 800ef24:	bf00      	nop
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fc f81f 	bl	800af7e <USBH_LL_PortDisabled>
}
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d12a      	bne.n	800efb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ef5a:	4a18      	ldr	r2, [pc, #96]	; (800efbc <USBH_LL_Init+0x74>)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a15      	ldr	r2, [pc, #84]	; (800efbc <USBH_LL_Init+0x74>)
 800ef66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef6a:	4b14      	ldr	r3, [pc, #80]	; (800efbc <USBH_LL_Init+0x74>)
 800ef6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ef72:	4b12      	ldr	r3, [pc, #72]	; (800efbc <USBH_LL_Init+0x74>)
 800ef74:	2208      	movs	r2, #8
 800ef76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ef78:	4b10      	ldr	r3, [pc, #64]	; (800efbc <USBH_LL_Init+0x74>)
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef7e:	4b0f      	ldr	r3, [pc, #60]	; (800efbc <USBH_LL_Init+0x74>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ef84:	4b0d      	ldr	r3, [pc, #52]	; (800efbc <USBH_LL_Init+0x74>)
 800ef86:	2202      	movs	r2, #2
 800ef88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef8a:	4b0c      	ldr	r3, [pc, #48]	; (800efbc <USBH_LL_Init+0x74>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ef90:	480a      	ldr	r0, [pc, #40]	; (800efbc <USBH_LL_Init+0x74>)
 800ef92:	f7f4 f88c 	bl	80030ae <HAL_HCD_Init>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ef9c:	f7f2 fd34 	bl	8001a08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800efa0:	4806      	ldr	r0, [pc, #24]	; (800efbc <USBH_LL_Init+0x74>)
 800efa2:	f7f4 fc69 	bl	8003878 <HAL_HCD_GetCurrentFrame>
 800efa6:	4603      	mov	r3, r0
 800efa8:	4619      	mov	r1, r3
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fb ff94 	bl	800aed8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	200054b4 	.word	0x200054b4

0800efc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7f4 fbd8 	bl	800378c <HAL_HCD_Start>
 800efdc:	4603      	mov	r3, r0
 800efde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f95c 	bl	800f2a0 <USBH_Get_USB_Status>
 800efe8:	4603      	mov	r3, r0
 800efea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efec:	7bbb      	ldrb	r3, [r7, #14]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b084      	sub	sp, #16
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800effe:	2300      	movs	r3, #0
 800f000:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f002:	2300      	movs	r3, #0
 800f004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7f4 fbe0 	bl	80037d2 <HAL_HCD_Stop>
 800f012:	4603      	mov	r3, r0
 800f014:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f016:	7bfb      	ldrb	r3, [r7, #15]
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 f941 	bl	800f2a0 <USBH_Get_USB_Status>
 800f01e:	4603      	mov	r3, r0
 800f020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f022:	7bbb      	ldrb	r3, [r7, #14]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f034:	2301      	movs	r3, #1
 800f036:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f4 fc28 	bl	8003894 <HAL_HCD_GetCurrentSpeed>
 800f044:	4603      	mov	r3, r0
 800f046:	2b02      	cmp	r3, #2
 800f048:	d00c      	beq.n	800f064 <USBH_LL_GetSpeed+0x38>
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d80d      	bhi.n	800f06a <USBH_LL_GetSpeed+0x3e>
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d002      	beq.n	800f058 <USBH_LL_GetSpeed+0x2c>
 800f052:	2b01      	cmp	r3, #1
 800f054:	d003      	beq.n	800f05e <USBH_LL_GetSpeed+0x32>
 800f056:	e008      	b.n	800f06a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f058:	2300      	movs	r3, #0
 800f05a:	73fb      	strb	r3, [r7, #15]
    break;
 800f05c:	e008      	b.n	800f070 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f05e:	2301      	movs	r3, #1
 800f060:	73fb      	strb	r3, [r7, #15]
    break;
 800f062:	e005      	b.n	800f070 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f064:	2302      	movs	r3, #2
 800f066:	73fb      	strb	r3, [r7, #15]
    break;
 800f068:	e002      	b.n	800f070 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f06a:	2301      	movs	r3, #1
 800f06c:	73fb      	strb	r3, [r7, #15]
    break;
 800f06e:	bf00      	nop
  }
  return  speed;
 800f070:	7bfb      	ldrb	r3, [r7, #15]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b084      	sub	sp, #16
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f082:	2300      	movs	r3, #0
 800f084:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f090:	4618      	mov	r0, r3
 800f092:	f7f4 fbbb 	bl	800380c <HAL_HCD_ResetPort>
 800f096:	4603      	mov	r3, r0
 800f098:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 f8ff 	bl	800f2a0 <USBH_Get_USB_Status>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3710      	adds	r7, #16
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0c2:	78fa      	ldrb	r2, [r7, #3]
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7f4 fbc2 	bl	8003850 <HAL_HCD_HC_GetXferCount>
 800f0cc:	4603      	mov	r3, r0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f0d6:	b590      	push	{r4, r7, lr}
 800f0d8:	b089      	sub	sp, #36	; 0x24
 800f0da:	af04      	add	r7, sp, #16
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	70fb      	strb	r3, [r7, #3]
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	70bb      	strb	r3, [r7, #2]
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f0fe:	787c      	ldrb	r4, [r7, #1]
 800f100:	78ba      	ldrb	r2, [r7, #2]
 800f102:	78f9      	ldrb	r1, [r7, #3]
 800f104:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f106:	9302      	str	r3, [sp, #8]
 800f108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	4623      	mov	r3, r4
 800f116:	f7f4 f82c 	bl	8003172 <HAL_HCD_HC_Init>
 800f11a:	4603      	mov	r3, r0
 800f11c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f11e:	7bfb      	ldrb	r3, [r7, #15]
 800f120:	4618      	mov	r0, r3
 800f122:	f000 f8bd 	bl	800f2a0 <USBH_Get_USB_Status>
 800f126:	4603      	mov	r3, r0
 800f128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	bd90      	pop	{r4, r7, pc}

0800f134 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f14e:	78fa      	ldrb	r2, [r7, #3]
 800f150:	4611      	mov	r1, r2
 800f152:	4618      	mov	r0, r3
 800f154:	f7f4 f89c 	bl	8003290 <HAL_HCD_HC_Halt>
 800f158:	4603      	mov	r3, r0
 800f15a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 f89e 	bl	800f2a0 <USBH_Get_USB_Status>
 800f164:	4603      	mov	r3, r0
 800f166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f168:	7bbb      	ldrb	r3, [r7, #14]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f172:	b590      	push	{r4, r7, lr}
 800f174:	b089      	sub	sp, #36	; 0x24
 800f176:	af04      	add	r7, sp, #16
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	461a      	mov	r2, r3
 800f180:	4603      	mov	r3, r0
 800f182:	70fb      	strb	r3, [r7, #3]
 800f184:	460b      	mov	r3, r1
 800f186:	70bb      	strb	r3, [r7, #2]
 800f188:	4613      	mov	r3, r2
 800f18a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f190:	2300      	movs	r3, #0
 800f192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f19a:	787c      	ldrb	r4, [r7, #1]
 800f19c:	78ba      	ldrb	r2, [r7, #2]
 800f19e:	78f9      	ldrb	r1, [r7, #3]
 800f1a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f1a4:	9303      	str	r3, [sp, #12]
 800f1a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1a8:	9302      	str	r3, [sp, #8]
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	9301      	str	r3, [sp, #4]
 800f1ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	4623      	mov	r3, r4
 800f1b6:	f7f4 f88f 	bl	80032d8 <HAL_HCD_HC_SubmitRequest>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f1be:	7bfb      	ldrb	r3, [r7, #15]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 f86d 	bl	800f2a0 <USBH_Get_USB_Status>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3714      	adds	r7, #20
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd90      	pop	{r4, r7, pc}

0800f1d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	460b      	mov	r3, r1
 800f1de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1e6:	78fa      	ldrb	r2, [r7, #3]
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7f4 fb1c 	bl	8003828 <HAL_HCD_HC_GetURBState>
 800f1f0:	4603      	mov	r3, r0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b082      	sub	sp, #8
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	460b      	mov	r3, r1
 800f204:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d103      	bne.n	800f218 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f210:	78fb      	ldrb	r3, [r7, #3]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 f870 	bl	800f2f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f218:	20c8      	movs	r0, #200	; 0xc8
 800f21a:	f7f3 fbfb 	bl	8002a14 <HAL_Delay>
  return USBH_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	70fb      	strb	r3, [r7, #3]
 800f234:	4613      	mov	r3, r2
 800f236:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f23e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f240:	78fb      	ldrb	r3, [r7, #3]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	212c      	movs	r1, #44	; 0x2c
 800f246:	fb01 f303 	mul.w	r3, r1, r3
 800f24a:	4413      	add	r3, r2
 800f24c:	333b      	adds	r3, #59	; 0x3b
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d009      	beq.n	800f268 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f254:	78fb      	ldrb	r3, [r7, #3]
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	212c      	movs	r1, #44	; 0x2c
 800f25a:	fb01 f303 	mul.w	r3, r1, r3
 800f25e:	4413      	add	r3, r2
 800f260:	3354      	adds	r3, #84	; 0x54
 800f262:	78ba      	ldrb	r2, [r7, #2]
 800f264:	701a      	strb	r2, [r3, #0]
 800f266:	e008      	b.n	800f27a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f268:	78fb      	ldrb	r3, [r7, #3]
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	212c      	movs	r1, #44	; 0x2c
 800f26e:	fb01 f303 	mul.w	r3, r1, r3
 800f272:	4413      	add	r3, r2
 800f274:	3355      	adds	r3, #85	; 0x55
 800f276:	78ba      	ldrb	r2, [r7, #2]
 800f278:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3714      	adds	r7, #20
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7f3 fbbf 	bl	8002a14 <HAL_Delay>
}
 800f296:	bf00      	nop
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d817      	bhi.n	800f2e4 <USBH_Get_USB_Status+0x44>
 800f2b4:	a201      	add	r2, pc, #4	; (adr r2, 800f2bc <USBH_Get_USB_Status+0x1c>)
 800f2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ba:	bf00      	nop
 800f2bc:	0800f2cd 	.word	0x0800f2cd
 800f2c0:	0800f2d3 	.word	0x0800f2d3
 800f2c4:	0800f2d9 	.word	0x0800f2d9
 800f2c8:	0800f2df 	.word	0x0800f2df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d0:	e00b      	b.n	800f2ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f2d2:	2302      	movs	r3, #2
 800f2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d6:	e008      	b.n	800f2ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	73fb      	strb	r3, [r7, #15]
    break;
 800f2dc:	e005      	b.n	800f2ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f2de:	2302      	movs	r3, #2
 800f2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e2:	e002      	b.n	800f2ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e8:	bf00      	nop
  }
  return usb_status;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	4603      	mov	r3, r0
 800f300:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f302:	79fb      	ldrb	r3, [r7, #7]
 800f304:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f306:	79fb      	ldrb	r3, [r7, #7]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f30c:	2301      	movs	r3, #1
 800f30e:	73fb      	strb	r3, [r7, #15]
 800f310:	e001      	b.n	800f316 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f312:	2300      	movs	r3, #0
 800f314:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f316:	7bfb      	ldrb	r3, [r7, #15]
 800f318:	461a      	mov	r2, r3
 800f31a:	2101      	movs	r1, #1
 800f31c:	4803      	ldr	r0, [pc, #12]	; (800f32c <MX_DriverVbusFS+0x34>)
 800f31e:	f7f3 fead 	bl	800307c <HAL_GPIO_WritePin>
}
 800f322:	bf00      	nop
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	40020800 	.word	0x40020800

0800f330 <__errno>:
 800f330:	4b01      	ldr	r3, [pc, #4]	; (800f338 <__errno+0x8>)
 800f332:	6818      	ldr	r0, [r3, #0]
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	20000030 	.word	0x20000030

0800f33c <__libc_init_array>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	4d0d      	ldr	r5, [pc, #52]	; (800f374 <__libc_init_array+0x38>)
 800f340:	4c0d      	ldr	r4, [pc, #52]	; (800f378 <__libc_init_array+0x3c>)
 800f342:	1b64      	subs	r4, r4, r5
 800f344:	10a4      	asrs	r4, r4, #2
 800f346:	2600      	movs	r6, #0
 800f348:	42a6      	cmp	r6, r4
 800f34a:	d109      	bne.n	800f360 <__libc_init_array+0x24>
 800f34c:	4d0b      	ldr	r5, [pc, #44]	; (800f37c <__libc_init_array+0x40>)
 800f34e:	4c0c      	ldr	r4, [pc, #48]	; (800f380 <__libc_init_array+0x44>)
 800f350:	f000 f986 	bl	800f660 <_init>
 800f354:	1b64      	subs	r4, r4, r5
 800f356:	10a4      	asrs	r4, r4, #2
 800f358:	2600      	movs	r6, #0
 800f35a:	42a6      	cmp	r6, r4
 800f35c:	d105      	bne.n	800f36a <__libc_init_array+0x2e>
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	f855 3b04 	ldr.w	r3, [r5], #4
 800f364:	4798      	blx	r3
 800f366:	3601      	adds	r6, #1
 800f368:	e7ee      	b.n	800f348 <__libc_init_array+0xc>
 800f36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f36e:	4798      	blx	r3
 800f370:	3601      	adds	r6, #1
 800f372:	e7f2      	b.n	800f35a <__libc_init_array+0x1e>
 800f374:	08010f50 	.word	0x08010f50
 800f378:	08010f50 	.word	0x08010f50
 800f37c:	08010f50 	.word	0x08010f50
 800f380:	08010f54 	.word	0x08010f54

0800f384 <malloc>:
 800f384:	4b02      	ldr	r3, [pc, #8]	; (800f390 <malloc+0xc>)
 800f386:	4601      	mov	r1, r0
 800f388:	6818      	ldr	r0, [r3, #0]
 800f38a:	f000 b871 	b.w	800f470 <_malloc_r>
 800f38e:	bf00      	nop
 800f390:	20000030 	.word	0x20000030

0800f394 <free>:
 800f394:	4b02      	ldr	r3, [pc, #8]	; (800f3a0 <free+0xc>)
 800f396:	4601      	mov	r1, r0
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	f000 b819 	b.w	800f3d0 <_free_r>
 800f39e:	bf00      	nop
 800f3a0:	20000030 	.word	0x20000030

0800f3a4 <memcpy>:
 800f3a4:	440a      	add	r2, r1
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f3ac:	d100      	bne.n	800f3b0 <memcpy+0xc>
 800f3ae:	4770      	bx	lr
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	d1f9      	bne.n	800f3b2 <memcpy+0xe>
 800f3be:	bd10      	pop	{r4, pc}

0800f3c0 <memset>:
 800f3c0:	4402      	add	r2, r0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d100      	bne.n	800f3ca <memset+0xa>
 800f3c8:	4770      	bx	lr
 800f3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ce:	e7f9      	b.n	800f3c4 <memset+0x4>

0800f3d0 <_free_r>:
 800f3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3d2:	2900      	cmp	r1, #0
 800f3d4:	d048      	beq.n	800f468 <_free_r+0x98>
 800f3d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3da:	9001      	str	r0, [sp, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f1a1 0404 	sub.w	r4, r1, #4
 800f3e2:	bfb8      	it	lt
 800f3e4:	18e4      	addlt	r4, r4, r3
 800f3e6:	f000 f8ad 	bl	800f544 <__malloc_lock>
 800f3ea:	4a20      	ldr	r2, [pc, #128]	; (800f46c <_free_r+0x9c>)
 800f3ec:	9801      	ldr	r0, [sp, #4]
 800f3ee:	6813      	ldr	r3, [r2, #0]
 800f3f0:	4615      	mov	r5, r2
 800f3f2:	b933      	cbnz	r3, 800f402 <_free_r+0x32>
 800f3f4:	6063      	str	r3, [r4, #4]
 800f3f6:	6014      	str	r4, [r2, #0]
 800f3f8:	b003      	add	sp, #12
 800f3fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3fe:	f000 b8a7 	b.w	800f550 <__malloc_unlock>
 800f402:	42a3      	cmp	r3, r4
 800f404:	d90b      	bls.n	800f41e <_free_r+0x4e>
 800f406:	6821      	ldr	r1, [r4, #0]
 800f408:	1862      	adds	r2, r4, r1
 800f40a:	4293      	cmp	r3, r2
 800f40c:	bf04      	itt	eq
 800f40e:	681a      	ldreq	r2, [r3, #0]
 800f410:	685b      	ldreq	r3, [r3, #4]
 800f412:	6063      	str	r3, [r4, #4]
 800f414:	bf04      	itt	eq
 800f416:	1852      	addeq	r2, r2, r1
 800f418:	6022      	streq	r2, [r4, #0]
 800f41a:	602c      	str	r4, [r5, #0]
 800f41c:	e7ec      	b.n	800f3f8 <_free_r+0x28>
 800f41e:	461a      	mov	r2, r3
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	b10b      	cbz	r3, 800f428 <_free_r+0x58>
 800f424:	42a3      	cmp	r3, r4
 800f426:	d9fa      	bls.n	800f41e <_free_r+0x4e>
 800f428:	6811      	ldr	r1, [r2, #0]
 800f42a:	1855      	adds	r5, r2, r1
 800f42c:	42a5      	cmp	r5, r4
 800f42e:	d10b      	bne.n	800f448 <_free_r+0x78>
 800f430:	6824      	ldr	r4, [r4, #0]
 800f432:	4421      	add	r1, r4
 800f434:	1854      	adds	r4, r2, r1
 800f436:	42a3      	cmp	r3, r4
 800f438:	6011      	str	r1, [r2, #0]
 800f43a:	d1dd      	bne.n	800f3f8 <_free_r+0x28>
 800f43c:	681c      	ldr	r4, [r3, #0]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	6053      	str	r3, [r2, #4]
 800f442:	4421      	add	r1, r4
 800f444:	6011      	str	r1, [r2, #0]
 800f446:	e7d7      	b.n	800f3f8 <_free_r+0x28>
 800f448:	d902      	bls.n	800f450 <_free_r+0x80>
 800f44a:	230c      	movs	r3, #12
 800f44c:	6003      	str	r3, [r0, #0]
 800f44e:	e7d3      	b.n	800f3f8 <_free_r+0x28>
 800f450:	6825      	ldr	r5, [r4, #0]
 800f452:	1961      	adds	r1, r4, r5
 800f454:	428b      	cmp	r3, r1
 800f456:	bf04      	itt	eq
 800f458:	6819      	ldreq	r1, [r3, #0]
 800f45a:	685b      	ldreq	r3, [r3, #4]
 800f45c:	6063      	str	r3, [r4, #4]
 800f45e:	bf04      	itt	eq
 800f460:	1949      	addeq	r1, r1, r5
 800f462:	6021      	streq	r1, [r4, #0]
 800f464:	6054      	str	r4, [r2, #4]
 800f466:	e7c7      	b.n	800f3f8 <_free_r+0x28>
 800f468:	b003      	add	sp, #12
 800f46a:	bd30      	pop	{r4, r5, pc}
 800f46c:	20004dd4 	.word	0x20004dd4

0800f470 <_malloc_r>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	1ccd      	adds	r5, r1, #3
 800f474:	f025 0503 	bic.w	r5, r5, #3
 800f478:	3508      	adds	r5, #8
 800f47a:	2d0c      	cmp	r5, #12
 800f47c:	bf38      	it	cc
 800f47e:	250c      	movcc	r5, #12
 800f480:	2d00      	cmp	r5, #0
 800f482:	4606      	mov	r6, r0
 800f484:	db01      	blt.n	800f48a <_malloc_r+0x1a>
 800f486:	42a9      	cmp	r1, r5
 800f488:	d903      	bls.n	800f492 <_malloc_r+0x22>
 800f48a:	230c      	movs	r3, #12
 800f48c:	6033      	str	r3, [r6, #0]
 800f48e:	2000      	movs	r0, #0
 800f490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f492:	f000 f857 	bl	800f544 <__malloc_lock>
 800f496:	4921      	ldr	r1, [pc, #132]	; (800f51c <_malloc_r+0xac>)
 800f498:	680a      	ldr	r2, [r1, #0]
 800f49a:	4614      	mov	r4, r2
 800f49c:	b99c      	cbnz	r4, 800f4c6 <_malloc_r+0x56>
 800f49e:	4f20      	ldr	r7, [pc, #128]	; (800f520 <_malloc_r+0xb0>)
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	b923      	cbnz	r3, 800f4ae <_malloc_r+0x3e>
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f000 f83c 	bl	800f524 <_sbrk_r>
 800f4ac:	6038      	str	r0, [r7, #0]
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	f000 f837 	bl	800f524 <_sbrk_r>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	d123      	bne.n	800f502 <_malloc_r+0x92>
 800f4ba:	230c      	movs	r3, #12
 800f4bc:	6033      	str	r3, [r6, #0]
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f000 f846 	bl	800f550 <__malloc_unlock>
 800f4c4:	e7e3      	b.n	800f48e <_malloc_r+0x1e>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	1b5b      	subs	r3, r3, r5
 800f4ca:	d417      	bmi.n	800f4fc <_malloc_r+0x8c>
 800f4cc:	2b0b      	cmp	r3, #11
 800f4ce:	d903      	bls.n	800f4d8 <_malloc_r+0x68>
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	441c      	add	r4, r3
 800f4d4:	6025      	str	r5, [r4, #0]
 800f4d6:	e004      	b.n	800f4e2 <_malloc_r+0x72>
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	42a2      	cmp	r2, r4
 800f4dc:	bf0c      	ite	eq
 800f4de:	600b      	streq	r3, [r1, #0]
 800f4e0:	6053      	strne	r3, [r2, #4]
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f000 f834 	bl	800f550 <__malloc_unlock>
 800f4e8:	f104 000b 	add.w	r0, r4, #11
 800f4ec:	1d23      	adds	r3, r4, #4
 800f4ee:	f020 0007 	bic.w	r0, r0, #7
 800f4f2:	1ac2      	subs	r2, r0, r3
 800f4f4:	d0cc      	beq.n	800f490 <_malloc_r+0x20>
 800f4f6:	1a1b      	subs	r3, r3, r0
 800f4f8:	50a3      	str	r3, [r4, r2]
 800f4fa:	e7c9      	b.n	800f490 <_malloc_r+0x20>
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	6864      	ldr	r4, [r4, #4]
 800f500:	e7cc      	b.n	800f49c <_malloc_r+0x2c>
 800f502:	1cc4      	adds	r4, r0, #3
 800f504:	f024 0403 	bic.w	r4, r4, #3
 800f508:	42a0      	cmp	r0, r4
 800f50a:	d0e3      	beq.n	800f4d4 <_malloc_r+0x64>
 800f50c:	1a21      	subs	r1, r4, r0
 800f50e:	4630      	mov	r0, r6
 800f510:	f000 f808 	bl	800f524 <_sbrk_r>
 800f514:	3001      	adds	r0, #1
 800f516:	d1dd      	bne.n	800f4d4 <_malloc_r+0x64>
 800f518:	e7cf      	b.n	800f4ba <_malloc_r+0x4a>
 800f51a:	bf00      	nop
 800f51c:	20004dd4 	.word	0x20004dd4
 800f520:	20004dd8 	.word	0x20004dd8

0800f524 <_sbrk_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_sbrk_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f3 f9bc 	bl	80028ac <_sbrk>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_sbrk_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_sbrk_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	200057b8 	.word	0x200057b8

0800f544 <__malloc_lock>:
 800f544:	4801      	ldr	r0, [pc, #4]	; (800f54c <__malloc_lock+0x8>)
 800f546:	f000 b809 	b.w	800f55c <__retarget_lock_acquire_recursive>
 800f54a:	bf00      	nop
 800f54c:	200057c0 	.word	0x200057c0

0800f550 <__malloc_unlock>:
 800f550:	4801      	ldr	r0, [pc, #4]	; (800f558 <__malloc_unlock+0x8>)
 800f552:	f000 b804 	b.w	800f55e <__retarget_lock_release_recursive>
 800f556:	bf00      	nop
 800f558:	200057c0 	.word	0x200057c0

0800f55c <__retarget_lock_acquire_recursive>:
 800f55c:	4770      	bx	lr

0800f55e <__retarget_lock_release_recursive>:
 800f55e:	4770      	bx	lr

0800f560 <floor>:
 800f560:	ec51 0b10 	vmov	r0, r1, d0
 800f564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f568:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f56c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f570:	2e13      	cmp	r6, #19
 800f572:	ee10 5a10 	vmov	r5, s0
 800f576:	ee10 8a10 	vmov	r8, s0
 800f57a:	460c      	mov	r4, r1
 800f57c:	dc32      	bgt.n	800f5e4 <floor+0x84>
 800f57e:	2e00      	cmp	r6, #0
 800f580:	da14      	bge.n	800f5ac <floor+0x4c>
 800f582:	a333      	add	r3, pc, #204	; (adr r3, 800f650 <floor+0xf0>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f0 fe30 	bl	80001ec <__adddf3>
 800f58c:	2200      	movs	r2, #0
 800f58e:	2300      	movs	r3, #0
 800f590:	f7f1 fa72 	bl	8000a78 <__aeabi_dcmpgt>
 800f594:	b138      	cbz	r0, 800f5a6 <floor+0x46>
 800f596:	2c00      	cmp	r4, #0
 800f598:	da57      	bge.n	800f64a <floor+0xea>
 800f59a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f59e:	431d      	orrs	r5, r3
 800f5a0:	d001      	beq.n	800f5a6 <floor+0x46>
 800f5a2:	4c2d      	ldr	r4, [pc, #180]	; (800f658 <floor+0xf8>)
 800f5a4:	2500      	movs	r5, #0
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	e025      	b.n	800f5f8 <floor+0x98>
 800f5ac:	4f2b      	ldr	r7, [pc, #172]	; (800f65c <floor+0xfc>)
 800f5ae:	4137      	asrs	r7, r6
 800f5b0:	ea01 0307 	and.w	r3, r1, r7
 800f5b4:	4303      	orrs	r3, r0
 800f5b6:	d01f      	beq.n	800f5f8 <floor+0x98>
 800f5b8:	a325      	add	r3, pc, #148	; (adr r3, 800f650 <floor+0xf0>)
 800f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5be:	f7f0 fe15 	bl	80001ec <__adddf3>
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f7f1 fa57 	bl	8000a78 <__aeabi_dcmpgt>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d0eb      	beq.n	800f5a6 <floor+0x46>
 800f5ce:	2c00      	cmp	r4, #0
 800f5d0:	bfbe      	ittt	lt
 800f5d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f5d6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f5da:	19a4      	addlt	r4, r4, r6
 800f5dc:	ea24 0407 	bic.w	r4, r4, r7
 800f5e0:	2500      	movs	r5, #0
 800f5e2:	e7e0      	b.n	800f5a6 <floor+0x46>
 800f5e4:	2e33      	cmp	r6, #51	; 0x33
 800f5e6:	dd0b      	ble.n	800f600 <floor+0xa0>
 800f5e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f5ec:	d104      	bne.n	800f5f8 <floor+0x98>
 800f5ee:	ee10 2a10 	vmov	r2, s0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	f7f0 fdfa 	bl	80001ec <__adddf3>
 800f5f8:	ec41 0b10 	vmov	d0, r0, r1
 800f5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f600:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f608:	fa23 f707 	lsr.w	r7, r3, r7
 800f60c:	4207      	tst	r7, r0
 800f60e:	d0f3      	beq.n	800f5f8 <floor+0x98>
 800f610:	a30f      	add	r3, pc, #60	; (adr r3, 800f650 <floor+0xf0>)
 800f612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f616:	f7f0 fde9 	bl	80001ec <__adddf3>
 800f61a:	2200      	movs	r2, #0
 800f61c:	2300      	movs	r3, #0
 800f61e:	f7f1 fa2b 	bl	8000a78 <__aeabi_dcmpgt>
 800f622:	2800      	cmp	r0, #0
 800f624:	d0bf      	beq.n	800f5a6 <floor+0x46>
 800f626:	2c00      	cmp	r4, #0
 800f628:	da02      	bge.n	800f630 <floor+0xd0>
 800f62a:	2e14      	cmp	r6, #20
 800f62c:	d103      	bne.n	800f636 <floor+0xd6>
 800f62e:	3401      	adds	r4, #1
 800f630:	ea25 0507 	bic.w	r5, r5, r7
 800f634:	e7b7      	b.n	800f5a6 <floor+0x46>
 800f636:	2301      	movs	r3, #1
 800f638:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f63c:	fa03 f606 	lsl.w	r6, r3, r6
 800f640:	4435      	add	r5, r6
 800f642:	4545      	cmp	r5, r8
 800f644:	bf38      	it	cc
 800f646:	18e4      	addcc	r4, r4, r3
 800f648:	e7f2      	b.n	800f630 <floor+0xd0>
 800f64a:	2500      	movs	r5, #0
 800f64c:	462c      	mov	r4, r5
 800f64e:	e7aa      	b.n	800f5a6 <floor+0x46>
 800f650:	8800759c 	.word	0x8800759c
 800f654:	7e37e43c 	.word	0x7e37e43c
 800f658:	bff00000 	.word	0xbff00000
 800f65c:	000fffff 	.word	0x000fffff

0800f660 <_init>:
 800f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f662:	bf00      	nop
 800f664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f666:	bc08      	pop	{r3}
 800f668:	469e      	mov	lr, r3
 800f66a:	4770      	bx	lr

0800f66c <_fini>:
 800f66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66e:	bf00      	nop
 800f670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f672:	bc08      	pop	{r3}
 800f674:	469e      	mov	lr, r3
 800f676:	4770      	bx	lr
