
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d0  0800f658  0800f658  0001f658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f28  08010f28  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010f28  08010f28  00020f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f30  08010f30  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f30  08010f30  00020f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f34  08010f34  00020f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010f38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005734  20000094  08010fcc  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200057c8  08010fcc  000357c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003426a  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006525  00000000  00000000  0006432e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  0006a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002110  00000000  00000000  0006cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002806d  00000000  00000000  0006ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a890  00000000  00000000  00096d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1964  00000000  00000000  000c1595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009948  00000000  00000000  001a2f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f640 	.word	0x0800f640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800f640 	.word	0x0800f640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e012      	b.n	8000ea2 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d103      	bne.n	8000e98 <string_compare+0x34>
	   	  		  comVAR++;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	3301      	adds	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
 8000e96:	e001      	b.n	8000e9c <string_compare+0x38>
	   	  	  else comVAR=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e9c:	7dbb      	ldrb	r3, [r7, #22]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75bb      	strb	r3, [r7, #22]
 8000ea2:	7dbb      	ldrb	r3, [r7, #22]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8e7      	bhi.n	8000e7c <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d101      	bne.n	8000eba <string_compare+0x56>
		 	return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <string_compare+0x58>
	 else 	return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Message_handler>:

void Message_handler()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000ecc:	2206      	movs	r2, #6
 8000ece:	4927      	ldr	r1, [pc, #156]	; (8000f6c <Message_handler+0xa4>)
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <Message_handler+0xa8>)
 8000ed2:	f7ff ffc7 	bl	8000e64 <string_compare>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00d      	beq.n	8000ef8 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <Message_handler+0xac>)
 8000ee4:	f002 f8b6 	bl	8003054 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000ee8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eec:	220b      	movs	r2, #11
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <Message_handler+0xb0>)
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <Message_handler+0xb4>)
 8000ef2:	f007 f874 	bl	8007fde <HAL_UART_Transmit>
 8000ef6:	e02c      	b.n	8000f52 <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000ef8:	2207      	movs	r2, #7
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <Message_handler+0xb8>)
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <Message_handler+0xa8>)
 8000efe:	f7ff ffb1 	bl	8000e64 <string_compare>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Message_handler+0xac>)
 8000f10:	f002 f8a0 	bl	8003054 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 8000f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f18:	220c      	movs	r2, #12
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <Message_handler+0xbc>)
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <Message_handler+0xb4>)
 8000f1e:	f007 f85e 	bl	8007fde <HAL_UART_Transmit>
 8000f22:	e016      	b.n	8000f52 <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Message_handler+0xa8>)
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <Message_handler+0xa8>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <Message_handler+0xc0>)
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <Message_handler+0xa8>)
 8000f3e:	f7ff f947 	bl	80001d0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f4a:	4909      	ldr	r1, [pc, #36]	; (8000f70 <Message_handler+0xa8>)
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <Message_handler+0xb4>)
 8000f4e:	f007 f846 	bl	8007fde <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <Message_handler+0xa8>)
 8000f58:	f00e fa22 	bl	800f3a0 <memset>
	buffer_index = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Message_handler+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <Message_handler+0xc8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800f658 	.word	0x0800f658
 8000f70:	20004ddc 	.word	0x20004ddc
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	0800f660 	.word	0x0800f660
 8000f7c:	20004f90 	.word	0x20004f90
 8000f80:	0800f66c 	.word	0x0800f66c
 8000f84:	0800f674 	.word	0x0800f674
 8000f88:	0800f684 	.word	0x0800f684
 8000f8c:	200000b1 	.word	0x200000b1
 8000f90:	200000b0 	.word	0x200000b0

08000f94 <start_normal>:
#define ANGLE_9_INIT 100
#define ANGLE_10_INIT 105
#define ANGLE_11_INIT 35

void start_normal()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 8000f98:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001024 <start_normal+0x90>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 fedf 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(1,ANGLE_1_INIT);
 8000fa2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001028 <start_normal+0x94>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 feda 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8000fac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001024 <start_normal+0x90>
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f000 fed5 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8000fb6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800102c <start_normal+0x98>
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 fed0 	bl	8001d60 <PCA9685_SetServoAngle>
	  HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 fd12 	bl	80029ec <HAL_Delay>
	  PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000fc8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001030 <start_normal+0x9c>
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f000 fec7 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 8000fd2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001034 <start_normal+0xa0>
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f000 fec2 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8000fdc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001038 <start_normal+0xa4>
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f000 febd 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000fe6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001028 <start_normal+0x94>
 8000fea:	2007      	movs	r0, #7
 8000fec:	f000 feb8 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(8, ANGLE_8_INIT);
 8000ff0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800103c <start_normal+0xa8>
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f000 feb3 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8000ffa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001040 <start_normal+0xac>
 8000ffe:	2009      	movs	r0, #9
 8001000:	f000 feae 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(10+2, ANGLE_10_INIT);
 8001004:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001038 <start_normal+0xa4>
 8001008:	200c      	movs	r0, #12
 800100a:	f000 fea9 	bl	8001d60 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 800100e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001034 <start_normal+0xa0>
 8001012:	200b      	movs	r0, #11
 8001014:	f000 fea4 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(2000);
 8001018:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101c:	f001 fce6 	bl	80029ec <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	42f00000 	.word	0x42f00000
 8001028:	42dc0000 	.word	0x42dc0000
 800102c:	42340000 	.word	0x42340000
 8001030:	42700000 	.word	0x42700000
 8001034:	420c0000 	.word	0x420c0000
 8001038:	42d20000 	.word	0x42d20000
 800103c:	42960000 	.word	0x42960000
 8001040:	42c80000 	.word	0x42c80000

08001044 <walk>:


void walk(void *parameters)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	int delay_time = 100;
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	60fb      	str	r3, [r7, #12]
	PCA9685_SetServoAngle(7, ANGLE_7_INIT-30);
 8001050:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80011bc <walk+0x178>
 8001054:	2007      	movs	r0, #7
 8001056:	f000 fe83 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fcc5 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8001062:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80011c0 <walk+0x17c>
 8001066:	2003      	movs	r0, #3
 8001068:	f000 fe7a 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fcbc 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT-35);
 8001074:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80011c4 <walk+0x180>
 8001078:	200b      	movs	r0, #11
 800107a:	f000 fe71 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fcb3 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001086:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80011c8 <walk+0x184>
 800108a:	2007      	movs	r0, #7
 800108c:	f000 fe68 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fcaa 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001098:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80011c8 <walk+0x184>
 800109c:	2007      	movs	r0, #7
 800109e:	f000 fe5f 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fca1 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT+20);
 80010aa:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80011bc <walk+0x178>
 80010ae:	2004      	movs	r0, #4
 80010b0:	f000 fe56 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fc98 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT-20);
 80010bc:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80011cc <walk+0x188>
 80010c0:	2008      	movs	r0, #8
 80010c2:	f000 fe4d 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fc8f 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 80010ce:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80011d0 <walk+0x18c>
 80010d2:	2004      	movs	r0, #4
 80010d4:	f000 fe44 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fc86 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT-55);
 80010e0:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80011c0 <walk+0x17c>
 80010e4:	2009      	movs	r0, #9
 80010e6:	f000 fe3b 	bl	8001d60 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 80010ea:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80011d4 <walk+0x190>
 80010ee:	200b      	movs	r0, #11
 80010f0:	f000 fe36 	bl	8001d60 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT-30);
 80010f4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80011d8 <walk+0x194>
 80010f8:	2002      	movs	r0, #2
 80010fa:	f000 fe31 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fc73 	bl	80029ec <HAL_Delay>

	PCA9685_SetServoAngle(6, ANGLE_6_INIT+30);
 8001106:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80011dc <walk+0x198>
 800110a:	2006      	movs	r0, #6
 800110c:	f000 fe28 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fc6a 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(10+2, ANGLE_10_INIT+30);
 8001118:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80011dc <walk+0x198>
 800111c:	200c      	movs	r0, #12
 800111e:	f000 fe1f 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fc61 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 800112a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80011e0 <walk+0x19c>
 800112e:	2002      	movs	r0, #2
 8001130:	f000 fe16 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fc58 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 800113c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80011e4 <walk+0x1a0>
 8001140:	2006      	movs	r0, #6
 8001142:	f000 fe0d 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fc4f 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(10+2, ANGLE_10_INIT+30);
 800114e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80011dc <walk+0x198>
 8001152:	200c      	movs	r0, #12
 8001154:	f000 fe04 	bl	8001d60 <PCA9685_SetServoAngle>


//		STATE 2
	PCA9685_SetServoAngle(5, ANGLE_5_INIT+30);
 8001158:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80011e8 <walk+0x1a4>
 800115c:	2005      	movs	r0, #5
 800115e:	f000 fdff 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fc41 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 800116a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80011ec <walk+0x1a8>
 800116e:	2009      	movs	r0, #9
 8001170:	f000 fdf6 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fc38 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 800117c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80011d4 <walk+0x190>
 8001180:	2005      	movs	r0, #5
 8001182:	f000 fded 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fc2f 	bl	80029ec <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT+20);
 800118e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80011f0 <walk+0x1ac>
 8001192:	2008      	movs	r0, #8
 8001194:	f000 fde4 	bl	8001d60 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(10+2, ANGLE_10_INIT);
 8001198:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80011e4 <walk+0x1a0>
 800119c:	200c      	movs	r0, #12
 800119e:	f000 fddf 	bl	8001d60 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT+20);
 80011a2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80011e8 <walk+0x1a4>
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 fdda 	bl	8001d60 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fc1c 	bl	80029ec <HAL_Delay>

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	42a00000 	.word	0x42a00000
 80011c0:	42340000 	.word	0x42340000
 80011c4:	00000000 	.word	0x00000000
 80011c8:	42dc0000 	.word	0x42dc0000
 80011cc:	425c0000 	.word	0x425c0000
 80011d0:	42700000 	.word	0x42700000
 80011d4:	420c0000 	.word	0x420c0000
 80011d8:	42b40000 	.word	0x42b40000
 80011dc:	43070000 	.word	0x43070000
 80011e0:	42f00000 	.word	0x42f00000
 80011e4:	42d20000 	.word	0x42d20000
 80011e8:	42820000 	.word	0x42820000
 80011ec:	42c80000 	.word	0x42c80000
 80011f0:	42be0000 	.word	0x42be0000

080011f4 <bt_config>:
	}
	vTaskDelete(NULL);
}

void bt_config(void *parameters)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 500);
 80011fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	4917      	ldr	r1, [pc, #92]	; (8001260 <bt_config+0x6c>)
 8001204:	4817      	ldr	r0, [pc, #92]	; (8001264 <bt_config+0x70>)
 8001206:	f006 ff7c 	bl	8008102 <HAL_UART_Receive>
		if(rx_buffer[0] == 'w')
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <bt_config+0x6c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b77      	cmp	r3, #119	; 0x77
 8001210:	d11f      	bne.n	8001252 <bt_config+0x5e>
		{
			//walking formation
			int delay_time = 100;
 8001212:	2364      	movs	r3, #100	; 0x64
 8001214:	60fb      	str	r3, [r7, #12]
			PCA9685_SetServoAngle(4, ANGLE_4_INIT+20);
 8001216:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001268 <bt_config+0x74>
 800121a:	2004      	movs	r0, #4
 800121c:	f000 fda0 	bl	8001d60 <PCA9685_SetServoAngle>
			HAL_Delay(delay_time);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fbe2 	bl	80029ec <HAL_Delay>
			PCA9685_SetServoAngle(8, ANGLE_8_INIT+20);
 8001228:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800126c <bt_config+0x78>
 800122c:	2008      	movs	r0, #8
 800122e:	f000 fd97 	bl	8001d60 <PCA9685_SetServoAngle>
			HAL_Delay(delay_time);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fbd9 	bl	80029ec <HAL_Delay>
			PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 800123a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001270 <bt_config+0x7c>
 800123e:	2004      	movs	r0, #4
 8001240:	f000 fd8e 	bl	8001d60 <PCA9685_SetServoAngle>
			HAL_Delay(delay_time);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fbd0 	bl	80029ec <HAL_Delay>

			walk(0);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fef9 	bl	8001044 <walk>
//			xTaskCreate(walk, "walking", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, NULL);
		}
		if(rx_buffer[0] == 's')
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <bt_config+0x6c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b73      	cmp	r3, #115	; 0x73
 8001258:	d1d0      	bne.n	80011fc <bt_config+0x8>
		{
			start_normal();
 800125a:	f7ff fe9b 	bl	8000f94 <start_normal>
		HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 500);
 800125e:	e7cd      	b.n	80011fc <bt_config+0x8>
 8001260:	20004ebc 	.word	0x20004ebc
 8001264:	20004f90 	.word	0x20004f90
 8001268:	42a00000 	.word	0x42a00000
 800126c:	42be0000 	.word	0x42be0000
 8001270:	42700000 	.word	0x42700000

08001274 <faces>:
	vTaskDelete(NULL);

}

void faces(void *parameters)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
	int times = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2340      	movs	r3, #64	; 0x40
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	4a35      	ldr	r2, [pc, #212]	; (8001360 <faces+0xec>)
 800128c:	2100      	movs	r1, #0
 800128e:	2000      	movs	r0, #0
 8001290:	f000 fdd8 	bl	8001e44 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001294:	f000 ff02 	bl	800209c <SSD1306_UpdateScreen>
		HAL_Delay(times + 1000);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fba4 	bl	80029ec <HAL_Delay>
		SSD1306_Clear();
 80012a4:	f000 ffa0 	bl	80021e8 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <faces+0xf0>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 fdc4 	bl	8001e44 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80012bc:	f000 feee 	bl	800209c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fb92 	bl	80029ec <HAL_Delay>
		SSD1306_Clear();
 80012c8:	f000 ff8e 	bl	80021e8 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 80012cc:	2301      	movs	r3, #1
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	4a24      	ldr	r2, [pc, #144]	; (8001368 <faces+0xf4>)
 80012d8:	2100      	movs	r1, #0
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fdb2 	bl	8001e44 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80012e0:	f000 fedc 	bl	800209c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fb80 	bl	80029ec <HAL_Delay>
		SSD1306_Clear();
 80012ec:	f000 ff7c 	bl	80021e8 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2340      	movs	r3, #64	; 0x40
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <faces+0xf8>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 fda0 	bl	8001e44 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001304:	f000 feca 	bl	800209c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fb6e 	bl	80029ec <HAL_Delay>
		SSD1306_Clear();
 8001310:	f000 ff6a 	bl	80021e8 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	2340      	movs	r3, #64	; 0x40
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <faces+0xfc>)
 8001320:	2100      	movs	r1, #0
 8001322:	2000      	movs	r0, #0
 8001324:	f000 fd8e 	bl	8001e44 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001328:	f000 feb8 	bl	800209c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fb5c 	bl	80029ec <HAL_Delay>
		SSD1306_Clear();
 8001334:	f000 ff58 	bl	80021e8 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <faces+0x100>)
 8001344:	2100      	movs	r1, #0
 8001346:	2000      	movs	r0, #0
 8001348:	f000 fd7c 	bl	8001e44 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800134c:	f000 fea6 	bl	800209c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fb4a 	bl	80029ec <HAL_Delay>
		SSD1306_Clear();
 8001358:	f000 ff46 	bl	80021e8 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 800135c:	e790      	b.n	8001280 <faces+0xc>
 800135e:	bf00      	nop
 8001360:	0800f6ec 	.word	0x0800f6ec
 8001364:	0800faec 	.word	0x0800faec
 8001368:	0800feec 	.word	0x0800feec
 800136c:	080102ec 	.word	0x080102ec
 8001370:	080106ec 	.word	0x080106ec
 8001374:	08010aec 	.word	0x08010aec

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f001 faf3 	bl	8002968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f847 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 fa01 	bl	800178c <MX_GPIO_Init>
  MX_I2C1_Init();
 800138a:	f000 f8c5 	bl	8001518 <MX_I2C1_Init>
  MX_I2S3_Init();
 800138e:	f000 f91f 	bl	80015d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001392:	f000 f94d 	bl	8001630 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001396:	f000 f9cf 	bl	8001738 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800139a:	f000 f8eb 	bl	8001574 <MX_I2C3_Init>
  MX_TIM2_Init();
 800139e:	f000 f97d 	bl	800169c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	SSD1306_Init();
 80013a2:	f000 fdb7 	bl	8001f14 <SSD1306_Init>
	PCA9685_Init(&hi2c3);
 80013a6:	4813      	ldr	r0, [pc, #76]	; (80013f4 <main+0x7c>)
 80013a8:	f000 fd36 	bl	8001e18 <PCA9685_Init>

	start_normal();
 80013ac:	f7ff fdf2 	bl	8000f94 <start_normal>
	xTaskHandle HT1, HT2;
	xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	490e      	ldr	r1, [pc, #56]	; (80013f8 <main+0x80>)
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <main+0x84>)
 80013c0:	f00b fe7b 	bl	800d0ba <xTaskCreate>
	xTaskCreate(bt_config, "bluetooth_check", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
 80013c4:	463b      	mov	r3, r7
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2300      	movs	r3, #0
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	490b      	ldr	r1, [pc, #44]	; (8001400 <main+0x88>)
 80013d2:	480c      	ldr	r0, [pc, #48]	; (8001404 <main+0x8c>)
 80013d4:	f00b fe71 	bl	800d0ba <xTaskCreate>
//	vTaskStartScheduler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013d8:	f00a fd5c 	bl	800be94 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <main+0x90>)
 80013de:	2100      	movs	r1, #0
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <main+0x94>)
 80013e2:	f00a fda1 	bl	800bf28 <osThreadNew>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <main+0x98>)
 80013ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ec:	f00a fd76 	bl	800bedc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 80013f0:	e7fe      	b.n	80013f0 <main+0x78>
 80013f2:	bf00      	nop
 80013f4:	20004e14 	.word	0x20004e14
 80013f8:	0800f6a8 	.word	0x0800f6a8
 80013fc:	08001275 	.word	0x08001275
 8001400:	0800f6b4 	.word	0x0800f6b4
 8001404:	080011f5 	.word	0x080011f5
 8001408:	08010eec 	.word	0x08010eec
 800140c:	080019a9 	.word	0x080019a9
 8001410:	20004e10 	.word	0x20004e10

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b098      	sub	sp, #96	; 0x60
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800141e:	2230      	movs	r2, #48	; 0x30
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f00d ffbc 	bl	800f3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <SystemClock_Config+0xfc>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <SystemClock_Config+0xfc>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <SystemClock_Config+0xfc>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <SystemClock_Config+0x100>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <SystemClock_Config+0x100>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <SystemClock_Config+0x100>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147e:	2301      	movs	r3, #1
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001492:	2308      	movs	r3, #8
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001496:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800149a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014a0:	2307      	movs	r3, #7
 80014a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	4618      	mov	r0, r3
 80014aa:	f005 fa5f 	bl	800696c <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80014b4:	f000 fa94 	bl	80019e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2302      	movs	r3, #2
 80014be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2105      	movs	r1, #5
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 fcc0 	bl	8006e5c <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80014e2:	f000 fa7d 	bl	80019e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014e6:	2301      	movs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fede 	bl	80072b8 <HAL_RCCEx_PeriphCLKConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001502:	f000 fa6d 	bl	80019e0 <Error_Handler>
  }
}
 8001506:	bf00      	nop
 8001508:	3760      	adds	r7, #96	; 0x60
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x50>)
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <MX_I2C1_Init+0x54>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x50>)
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_I2C1_Init+0x58>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_I2C1_Init+0x50>)
 8001536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_I2C1_Init+0x50>)
 8001556:	f003 fafb 	bl	8004b50 <HAL_I2C_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001560:	f000 fa3e 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20004e68 	.word	0x20004e68
 800156c:	40005400 	.word	0x40005400
 8001570:	00061a80 	.word	0x00061a80

08001574 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_I2C3_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <MX_I2C3_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_I2C3_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_I2C3_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_I2C3_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_I2C3_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_I2C3_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_I2C3_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_I2C3_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_I2C3_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_I2C3_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_I2C3_Init+0x50>)
 80015b2:	f003 facd 	bl	8004b50 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 fa10 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20004e14 	.word	0x20004e14
 80015c8:	40005c00 	.word	0x40005c00
 80015cc:	00061a80 	.word	0x00061a80

080015d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_I2S3_Init+0x54>)
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <MX_I2S3_Init+0x58>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2S3_Init+0x54>)
 80015dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_I2S3_Init+0x54>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2S3_Init+0x54>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_I2S3_Init+0x54>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_I2S3_Init+0x54>)
 80015f8:	4a0c      	ldr	r2, [pc, #48]	; (800162c <MX_I2S3_Init+0x5c>)
 80015fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2S3_Init+0x54>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_I2S3_Init+0x54>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2S3_Init+0x54>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_I2S3_Init+0x54>)
 8001610:	f004 fd0c 	bl	800602c <HAL_I2S_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800161a:	f000 f9e1 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20004fd4 	.word	0x20004fd4
 8001628:	40003c00 	.word	0x40003c00
 800162c:	00017700 	.word	0x00017700

08001630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_SPI1_Init+0x64>)
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <MX_SPI1_Init+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_SPI1_Init+0x64>)
 800163c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_SPI1_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_SPI1_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_SPI1_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_SPI1_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_SPI1_Init+0x64>)
 800165c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001660:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_SPI1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_SPI1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_SPI1_Init+0x64>)
 800167c:	220a      	movs	r2, #10
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_SPI1_Init+0x64>)
 8001682:	f005 ff59 	bl	8007538 <HAL_SPI_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800168c:	f000 f9a8 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20004ef0 	.word	0x20004ef0
 8001698:	40013000 	.word	0x40013000

0800169c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	463b      	mov	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_TIM2_Init+0x98>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM2_Init+0x98>)
 80016c2:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80016c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM2_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_TIM2_Init+0x98>)
 80016d0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_TIM2_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM2_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e2:	4814      	ldr	r0, [pc, #80]	; (8001734 <MX_TIM2_Init+0x98>)
 80016e4:	f005 ffb1 	bl	800764a <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ee:	f000 f977 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_TIM2_Init+0x98>)
 8001700:	f006 f96a 	bl	80079d8 <HAL_TIM_ConfigClockSource>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800170a:	f000 f969 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_TIM2_Init+0x98>)
 800171c:	f006 fb82 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001726:	f000 f95b 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20004f48 	.word	0x20004f48

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001744:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001770:	f006 fbe8 	bl	8007f44 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 f931 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20004f90 	.word	0x20004f90
 8001788:	40004400 	.word	0x40004400

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	4b79      	ldr	r3, [pc, #484]	; (800198c <MX_GPIO_Init+0x200>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a78      	ldr	r2, [pc, #480]	; (800198c <MX_GPIO_Init+0x200>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b76      	ldr	r3, [pc, #472]	; (800198c <MX_GPIO_Init+0x200>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	4b72      	ldr	r3, [pc, #456]	; (800198c <MX_GPIO_Init+0x200>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a71      	ldr	r2, [pc, #452]	; (800198c <MX_GPIO_Init+0x200>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b6f      	ldr	r3, [pc, #444]	; (800198c <MX_GPIO_Init+0x200>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b6b      	ldr	r3, [pc, #428]	; (800198c <MX_GPIO_Init+0x200>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a6a      	ldr	r2, [pc, #424]	; (800198c <MX_GPIO_Init+0x200>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b68      	ldr	r3, [pc, #416]	; (800198c <MX_GPIO_Init+0x200>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b64      	ldr	r3, [pc, #400]	; (800198c <MX_GPIO_Init+0x200>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a63      	ldr	r2, [pc, #396]	; (800198c <MX_GPIO_Init+0x200>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b61      	ldr	r3, [pc, #388]	; (800198c <MX_GPIO_Init+0x200>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <MX_GPIO_Init+0x200>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a5c      	ldr	r2, [pc, #368]	; (800198c <MX_GPIO_Init+0x200>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <MX_GPIO_Init+0x200>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <MX_GPIO_Init+0x200>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a55      	ldr	r2, [pc, #340]	; (800198c <MX_GPIO_Init+0x200>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b53      	ldr	r3, [pc, #332]	; (800198c <MX_GPIO_Init+0x200>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2108      	movs	r1, #8
 800184e:	4850      	ldr	r0, [pc, #320]	; (8001990 <MX_GPIO_Init+0x204>)
 8001850:	f001 fc00 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f240 1101 	movw	r1, #257	; 0x101
 800185a:	484e      	ldr	r0, [pc, #312]	; (8001994 <MX_GPIO_Init+0x208>)
 800185c:	f001 fbfa 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RESET_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001860:	2200      	movs	r2, #0
 8001862:	f64f 0110 	movw	r1, #63504	; 0xf810
 8001866:	484c      	ldr	r0, [pc, #304]	; (8001998 <MX_GPIO_Init+0x20c>)
 8001868:	f001 fbf4 	bl	8003054 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800186c:	2308      	movs	r3, #8
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4843      	ldr	r0, [pc, #268]	; (8001990 <MX_GPIO_Init+0x204>)
 8001884:	f001 fa4a 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8;
 8001888:	f240 1301 	movw	r3, #257	; 0x101
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	483c      	ldr	r0, [pc, #240]	; (8001994 <MX_GPIO_Init+0x208>)
 80018a2:	f001 fa3b 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018a6:	2308      	movs	r3, #8
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b6:	2305      	movs	r3, #5
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4834      	ldr	r0, [pc, #208]	; (8001994 <MX_GPIO_Init+0x208>)
 80018c2:	f001 fa2b 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c6:	2301      	movs	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <MX_GPIO_Init+0x210>)
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4831      	ldr	r0, [pc, #196]	; (80019a0 <MX_GPIO_Init+0x214>)
 80018da:	f001 fa1f 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018de:	2304      	movs	r3, #4
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	482c      	ldr	r0, [pc, #176]	; (80019a4 <MX_GPIO_Init+0x218>)
 80018f2:	f001 fa13 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001908:	2305      	movs	r3, #5
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	4824      	ldr	r0, [pc, #144]	; (80019a4 <MX_GPIO_Init+0x218>)
 8001914:	f001 fa02 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_RESET_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_RESET_Pin;
 8001918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2302      	movs	r3, #2
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BLUETOOTH_RESET_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4819      	ldr	r0, [pc, #100]	; (8001998 <MX_GPIO_Init+0x20c>)
 8001932:	f001 f9f3 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001936:	f24f 0310 	movw	r3, #61456	; 0xf010
 800193a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4812      	ldr	r0, [pc, #72]	; (8001998 <MX_GPIO_Init+0x20c>)
 8001950:	f001 f9e4 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001954:	2320      	movs	r3, #32
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_GPIO_Init+0x20c>)
 8001968:	f001 f9d8 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MX_GPIO_Init+0x210>)
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_GPIO_Init+0x204>)
 8001980:	f001 f9cc 	bl	8002d1c <HAL_GPIO_Init>

}
 8001984:	bf00      	nop
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40021000 	.word	0x40021000
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	10120000 	.word	0x10120000
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400

080019a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80019b0:	f00d f9ac 	bl	800ed0c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f00a fb49 	bl	800c04c <osDelay>
 80019ba:	e7fb      	b.n	80019b4 <StartDefaultTask+0xc>

080019bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ce:	f000 ffed 	bl	80029ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40001000 	.word	0x40001000

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80019fe:	797b      	ldrb	r3, [r7, #5]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <PCA9685_SetBit+0x1c>
 8001a04:	2301      	movs	r3, #1
 8001a06:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <PCA9685_SetBit+0xb0>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	230a      	movs	r3, #10
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2301      	movs	r3, #1
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	f107 030f 	add.w	r3, r7, #15
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	f003 fbd1 	bl	80051c8 <HAL_I2C_Mem_Read>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e031      	b.n	8001a94 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	2201      	movs	r2, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	b25a      	sxtb	r2, r3
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001a50:	797b      	ldrb	r3, [r7, #5]
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <PCA9685_SetBit+0xb0>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	230a      	movs	r3, #10
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 030f 	add.w	r3, r7, #15
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	f003 faa6 	bl	8004fd4 <HAL_I2C_Mem_Write>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000501c 	.word	0x2000501c

08001aa0 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <PCA9685_SoftwareReset+0x30>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	1dfa      	adds	r2, r7, #7
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f003 f98e 	bl	8004dd8 <HAL_I2C_Master_Transmit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000501c 	.word	0x2000501c

08001ad4 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff ff81 	bl	80019ec <PCA9685_SetBit>
 8001aea:	4603      	mov	r3, r0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	461a      	mov	r2, r3
 8001b02:	2107      	movs	r1, #7
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff ff71 	bl	80019ec <PCA9685_SetBit>
 8001b0a:	4603      	mov	r3, r0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	461a      	mov	r2, r3
 8001b22:	2105      	movs	r1, #5
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff ff61 	bl	80019ec <PCA9685_SetBit>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0000      	movs	r0, r0
	...

08001b38 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d902      	bls.n	8001b52 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	72fb      	strb	r3, [r7, #11]
 8001b50:	e046      	b.n	8001be0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b18      	cmp	r3, #24
 8001b56:	d802      	bhi.n	8001b5e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001b58:	23ff      	movs	r3, #255	; 0xff
 8001b5a:	72fb      	strb	r3, [r7, #11]
 8001b5c:	e040      	b.n	8001be0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fc9c 	bl	80004a8 <__aeabi_f2d>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <PCA9685_SetPwmFrequency+0xe8>)
 8001b76:	f7fe fcef 	bl	8000558 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	a126      	add	r1, pc, #152	; (adr r1, 8001c18 <PCA9685_SetPwmFrequency+0xe0>)
 8001b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b84:	f7fe fe12 	bl	80007ac <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <PCA9685_SetPwmFrequency+0xec>)
 8001b96:	f7fe fb27 	bl	80001e8 <__aeabi_dsub>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe ff93 	bl	8000acc <__aeabi_d2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7fe fc7c 	bl	80004a8 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <PCA9685_SetPwmFrequency+0xf0>)
 8001bb6:	f7fe fb19 	bl	80001ec <__adddf3>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	ec43 2b17 	vmov	d7, r2, r3
 8001bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc6:	eef0 0a67 	vmov.f32	s1, s15
 8001bca:	f00d fcb9 	bl	800f540 <floor>
 8001bce:	ec53 2b10 	vmov	r2, r3, d0
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ff59 	bl	8000a8c <__aeabi_d2uiz>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff ff77 	bl	8001ad4 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <PCA9685_SetPwmFrequency+0xf4>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	230a      	movs	r3, #10
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	f107 030b 	add.w	r3, r7, #11
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	22fe      	movs	r2, #254	; 0xfe
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	f003 f9e9 	bl	8004fd4 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff ff66 	bl	8001ad4 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff ff73 	bl	8001af4 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	4177d784 	.word	0x4177d784
 8001c20:	40b00000 	.word	0x40b00000
 8001c24:	3ff00000 	.word	0x3ff00000
 8001c28:	3fe00000 	.word	0x3fe00000
 8001c2c:	2000501c 	.word	0x2000501c

08001c30 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	80bb      	strh	r3, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3306      	adds	r3, #6
 8001c4a:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001c4c:	88bb      	ldrh	r3, [r7, #4]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <PCA9685_SetPwm+0x70>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	230a      	movs	r3, #10
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2304      	movs	r3, #4
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	f003 f9a5 	bl	8004fd4 <HAL_I2C_Mem_Write>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000501c 	.word	0x2000501c

08001ca4 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	80bb      	strh	r3, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbc:	d302      	bcc.n	8001cc4 <PCA9685_SetPin+0x20>
 8001cbe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001cc2:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d025      	beq.n	8001d16 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001cca:	88bb      	ldrh	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ffa9 	bl	8001c30 <PCA9685_SetPwm>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	e03a      	b.n	8001d58 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d108      	bne.n	8001cfe <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff9b 	bl	8001c30 <PCA9685_SetPwm>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	e02c      	b.n	8001d58 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001cfe:	88bb      	ldrh	r3, [r7, #4]
 8001d00:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001d04:	330f      	adds	r3, #15
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff8f 	bl	8001c30 <PCA9685_SetPwm>
 8001d12:	4603      	mov	r3, r0
 8001d14:	e020      	b.n	8001d58 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001d16:	88bb      	ldrh	r3, [r7, #4]
 8001d18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff81 	bl	8001c30 <PCA9685_SetPwm>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	e012      	b.n	8001d58 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001d32:	88bb      	ldrh	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d108      	bne.n	8001d4a <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff75 	bl	8001c30 <PCA9685_SetPwm>
 8001d46:	4603      	mov	r3, r0
 8001d48:	e006      	b.n	8001d58 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001d4a:	88ba      	ldrh	r2, [r7, #4]
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff6d 	bl	8001c30 <PCA9685_SetPwm>
 8001d56:	4603      	mov	r3, r0
    }
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	ed87 0a00 	vstr	s0, [r7]
 8001d6c:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001d6e:	edd7 7a00 	vldr	s15, [r7]
 8001d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d502      	bpl.n	8001d82 <PCA9685_SetServoAngle+0x22>
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001d82:	edd7 7a00 	vldr	s15, [r7]
 8001d86:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001e08 <PCA9685_SetServoAngle+0xa8>
 8001d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	dd01      	ble.n	8001d98 <PCA9685_SetServoAngle+0x38>
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <PCA9685_SetServoAngle+0xac>)
 8001d96:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f7fe fb85 	bl	80004a8 <__aeabi_f2d>
 8001d9e:	a318      	add	r3, pc, #96	; (adr r3, 8001e00 <PCA9685_SetServoAngle+0xa0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fbd8 	bl	8000558 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <PCA9685_SetServoAngle+0xb0>)
 8001db6:	f7fe fcf9 	bl	80007ac <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <PCA9685_SetServoAngle+0xb4>)
 8001dc8:	f7fe fa10 	bl	80001ec <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe fe7a 	bl	8000acc <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de4:	ee17 3a90 	vmov	r3, s15
 8001de8:	b299      	uxth	r1, r3
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2200      	movs	r2, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff58 	bl	8001ca4 <PCA9685_SetPin>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00000000 	.word	0x00000000
 8001e04:	407c2000 	.word	0x407c2000
 8001e08:	43340000 	.word	0x43340000
 8001e0c:	43340000 	.word	0x43340000
 8001e10:	40668000 	.word	0x40668000
 8001e14:	405f4000 	.word	0x405f4000

08001e18 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <PCA9685_Init+0x28>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001e26:	f7ff fe3b 	bl	8001aa0 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001e2a:	2030      	movs	r0, #48	; 0x30
 8001e2c:	f7ff fe84 	bl	8001b38 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff fe6f 	bl	8001b14 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000501c 	.word	0x2000501c

08001e44 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60ba      	str	r2, [r7, #8]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	81fb      	strh	r3, [r7, #14]
 8001e52:	460b      	mov	r3, r1
 8001e54:	81bb      	strh	r3, [r7, #12]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5e:	3307      	adds	r3, #7
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da00      	bge.n	8001e66 <SSD1306_DrawBitmap+0x22>
 8001e64:	3307      	adds	r3, #7
 8001e66:	10db      	asrs	r3, r3, #3
 8001e68:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	82bb      	strh	r3, [r7, #20]
 8001e72:	e044      	b.n	8001efe <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	827b      	strh	r3, [r7, #18]
 8001e78:	e02f      	b.n	8001eda <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001e7a:	8a7b      	ldrh	r3, [r7, #18]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	e012      	b.n	8001eb2 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001e8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e90:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e94:	fb02 f203 	mul.w	r2, r2, r3
 8001e98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da00      	bge.n	8001ea2 <SSD1306_DrawBitmap+0x5e>
 8001ea0:	3307      	adds	r3, #7
 8001ea2:	10db      	asrs	r3, r3, #3
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da09      	bge.n	8001ece <SSD1306_DrawBitmap+0x8a>
 8001eba:	89fa      	ldrh	r2, [r7, #14]
 8001ebc:	8a7b      	ldrh	r3, [r7, #18]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	89b9      	ldrh	r1, [r7, #12]
 8001ec4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f92d 	bl	8002128 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	827b      	strh	r3, [r7, #18]
 8001eda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbc9      	blt.n	8001e7a <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001ee6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	82bb      	strh	r3, [r7, #20]
 8001ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	81bb      	strh	r3, [r7, #12]
 8001efe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbb4      	blt.n	8001e74 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f1a:	f000 f96f 	bl	80021fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f22:	2201      	movs	r2, #1
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	485b      	ldr	r0, [pc, #364]	; (8002094 <SSD1306_Init+0x180>)
 8001f28:	f003 fb74 	bl	8005614 <HAL_I2C_IsDeviceReady>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e0a9      	b.n	800208a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001f36:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f3c:	e002      	b.n	8001f44 <SSD1306_Init+0x30>
		p--;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f4a:	22ae      	movs	r2, #174	; 0xae
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2078      	movs	r0, #120	; 0x78
 8001f50:	f000 f9b2 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f54:	2220      	movs	r2, #32
 8001f56:	2100      	movs	r1, #0
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f000 f9ad 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f5e:	2210      	movs	r2, #16
 8001f60:	2100      	movs	r1, #0
 8001f62:	2078      	movs	r0, #120	; 0x78
 8001f64:	f000 f9a8 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f68:	22b0      	movs	r2, #176	; 0xb0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f000 f9a3 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f72:	22c8      	movs	r2, #200	; 0xc8
 8001f74:	2100      	movs	r1, #0
 8001f76:	2078      	movs	r0, #120	; 0x78
 8001f78:	f000 f99e 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 f999 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f86:	2210      	movs	r2, #16
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 f994 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 f98f 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f9a:	2281      	movs	r2, #129	; 0x81
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 f98a 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001fa4:	22ff      	movs	r2, #255	; 0xff
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f000 f985 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001fae:	22a1      	movs	r2, #161	; 0xa1
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	f000 f980 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fb8:	22a6      	movs	r2, #166	; 0xa6
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 f97b 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001fc2:	22a8      	movs	r2, #168	; 0xa8
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2078      	movs	r0, #120	; 0x78
 8001fc8:	f000 f976 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001fcc:	223f      	movs	r2, #63	; 0x3f
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2078      	movs	r0, #120	; 0x78
 8001fd2:	f000 f971 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fd6:	22a4      	movs	r2, #164	; 0xa4
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	; 0x78
 8001fdc:	f000 f96c 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001fe0:	22d3      	movs	r2, #211	; 0xd3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	; 0x78
 8001fe6:	f000 f967 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 f962 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ff4:	22d5      	movs	r2, #213	; 0xd5
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2078      	movs	r0, #120	; 0x78
 8001ffa:	f000 f95d 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ffe:	22f0      	movs	r2, #240	; 0xf0
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f000 f958 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002008:	22d9      	movs	r2, #217	; 0xd9
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	; 0x78
 800200e:	f000 f953 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002012:	2222      	movs	r2, #34	; 0x22
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f000 f94e 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800201c:	22da      	movs	r2, #218	; 0xda
 800201e:	2100      	movs	r1, #0
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	f000 f949 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002026:	2212      	movs	r2, #18
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 f944 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002030:	22db      	movs	r2, #219	; 0xdb
 8002032:	2100      	movs	r1, #0
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 f93f 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800203a:	2220      	movs	r2, #32
 800203c:	2100      	movs	r1, #0
 800203e:	2078      	movs	r0, #120	; 0x78
 8002040:	f000 f93a 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002044:	228d      	movs	r2, #141	; 0x8d
 8002046:	2100      	movs	r1, #0
 8002048:	2078      	movs	r0, #120	; 0x78
 800204a:	f000 f935 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800204e:	2214      	movs	r2, #20
 8002050:	2100      	movs	r1, #0
 8002052:	2078      	movs	r0, #120	; 0x78
 8002054:	f000 f930 	bl	80022b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002058:	22af      	movs	r2, #175	; 0xaf
 800205a:	2100      	movs	r1, #0
 800205c:	2078      	movs	r0, #120	; 0x78
 800205e:	f000 f92b 	bl	80022b8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002062:	222e      	movs	r2, #46	; 0x2e
 8002064:	2100      	movs	r1, #0
 8002066:	2078      	movs	r0, #120	; 0x78
 8002068:	f000 f926 	bl	80022b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800206c:	2000      	movs	r0, #0
 800206e:	f000 f843 	bl	80020f8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002072:	f000 f813 	bl	800209c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <SSD1306_Init+0x184>)
 8002078:	2200      	movs	r2, #0
 800207a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <SSD1306_Init+0x184>)
 800207e:	2200      	movs	r2, #0
 8002080:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SSD1306_Init+0x184>)
 8002084:	2201      	movs	r2, #1
 8002086:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20004e68 	.word	0x20004e68
 8002098:	200004b4 	.word	0x200004b4

0800209c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e01d      	b.n	80020e4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	3b50      	subs	r3, #80	; 0x50
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 f900 	bl	80022b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 f8fb 	bl	80022b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020c2:	2210      	movs	r2, #16
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 f8f6 	bl	80022b8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	01db      	lsls	r3, r3, #7
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <SSD1306_UpdateScreen+0x58>)
 80020d2:	441a      	add	r2, r3
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	2140      	movs	r1, #64	; 0x40
 80020d8:	2078      	movs	r0, #120	; 0x78
 80020da:	f000 f8a5 	bl	8002228 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	3301      	adds	r3, #1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d9de      	bls.n	80020a8 <SSD1306_UpdateScreen+0xc>
	}
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200000b4 	.word	0x200000b4

080020f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <SSD1306_Fill+0x14>
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <SSD1306_Fill+0x16>
 800210c:	23ff      	movs	r3, #255	; 0xff
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	4619      	mov	r1, r3
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <SSD1306_Fill+0x2c>)
 8002116:	f00d f943 	bl	800f3a0 <memset>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000b4 	.word	0x200000b4

08002128 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	460b      	mov	r3, r1
 8002134:	80bb      	strh	r3, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	70fb      	strb	r3, [r7, #3]
	if (
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b7f      	cmp	r3, #127	; 0x7f
 800213e:	d848      	bhi.n	80021d2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	2b3f      	cmp	r3, #63	; 0x3f
 8002144:	d845      	bhi.n	80021d2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <SSD1306_DrawPixel+0xb8>)
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d11a      	bne.n	8002198 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	88bb      	ldrh	r3, [r7, #4]
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	b298      	uxth	r0, r3
 800216a:	4603      	mov	r3, r0
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	4413      	add	r3, r2
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	b25a      	sxtb	r2, r3
 8002176:	88bb      	ldrh	r3, [r7, #4]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b259      	sxtb	r1, r3
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	4603      	mov	r3, r0
 800218c:	01db      	lsls	r3, r3, #7
 800218e:	4413      	add	r3, r2
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 8002194:	54d1      	strb	r1, [r2, r3]
 8002196:	e01d      	b.n	80021d4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	b298      	uxth	r0, r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	4413      	add	r3, r2
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	4013      	ands	r3, r2
 80021c0:	b259      	sxtb	r1, r3
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	4603      	mov	r3, r0
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	4413      	add	r3, r2
 80021ca:	b2c9      	uxtb	r1, r1
 80021cc:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 80021ce:	54d1      	strb	r1, [r2, r3]
 80021d0:	e000      	b.n	80021d4 <SSD1306_DrawPixel+0xac>
		return;
 80021d2:	bf00      	nop
	}
}
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200004b4 	.word	0x200004b4
 80021e4:	200000b4 	.word	0x200000b4

080021e8 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff ff83 	bl	80020f8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021f2:	f7ff ff53 	bl	800209c <SSD1306_UpdateScreen>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <ssd1306_I2C_Init+0x28>)
 8002204:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002206:	e002      	b.n	800220e <ssd1306_I2C_Init+0x12>
		p--;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	0003d090 	.word	0x0003d090

08002228 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b0c7      	sub	sp, #284	; 0x11c
 800222c:	af02      	add	r7, sp, #8
 800222e:	4604      	mov	r4, r0
 8002230:	4608      	mov	r0, r1
 8002232:	4639      	mov	r1, r7
 8002234:	600a      	str	r2, [r1, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	4622      	mov	r2, r4
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	1dbb      	adds	r3, r7, #6
 8002240:	4602      	mov	r2, r0
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	460a      	mov	r2, r1
 8002248:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	1dba      	adds	r2, r7, #6
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800225a:	e010      	b.n	800227e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800225c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002260:	463a      	mov	r2, r7
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	441a      	add	r2, r3
 8002266:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800226a:	3301      	adds	r3, #1
 800226c:	7811      	ldrb	r1, [r2, #0]
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002274:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002278:	3301      	adds	r3, #1
 800227a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800227e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002282:	b29b      	uxth	r3, r3
 8002284:	1d3a      	adds	r2, r7, #4
 8002286:	8812      	ldrh	r2, [r2, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8e7      	bhi.n	800225c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b299      	uxth	r1, r3
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	f107 020c 	add.w	r2, r7, #12
 800229e:	200a      	movs	r0, #10
 80022a0:	9000      	str	r0, [sp, #0]
 80022a2:	4804      	ldr	r0, [pc, #16]	; (80022b4 <ssd1306_I2C_WriteMulti+0x8c>)
 80022a4:	f002 fd98 	bl	8004dd8 <HAL_I2C_Master_Transmit>
}
 80022a8:	bf00      	nop
 80022aa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20004e68 	.word	0x20004e68

080022b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	460b      	mov	r3, r1
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	4613      	mov	r3, r2
 80022c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022ce:	797b      	ldrb	r3, [r7, #5]
 80022d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	b299      	uxth	r1, r3
 80022d6:	f107 020c 	add.w	r2, r7, #12
 80022da:	230a      	movs	r3, #10
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2302      	movs	r3, #2
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <ssd1306_I2C_Write+0x38>)
 80022e2:	f002 fd79 	bl	8004dd8 <HAL_I2C_Master_Transmit>
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20004e68 	.word	0x20004e68

080022f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_MspInit+0x64>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_MspInit+0x64>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_MspInit+0x64>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x64>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_MspInit+0x64>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_MspInit+0x64>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	210f      	movs	r1, #15
 8002336:	f06f 0001 	mvn.w	r0, #1
 800233a:	f000 fc33 	bl	8002ba4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2105      	movs	r1, #5
 8002342:	2005      	movs	r0, #5
 8002344:	f000 fc2e 	bl	8002ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002348:	2005      	movs	r0, #5
 800234a:	f000 fc47 	bl	8002bdc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_I2C_MspInit+0x128>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12c      	bne.n	80023d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a40      	ldr	r2, [pc, #256]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239e:	2312      	movs	r3, #18
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023aa:	2304      	movs	r3, #4
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	4835      	ldr	r0, [pc, #212]	; (800248c <HAL_I2C_MspInit+0x130>)
 80023b6:	f000 fcb1 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 80023c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023d6:	e050      	b.n	800247a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <HAL_I2C_MspInit+0x134>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d14b      	bne.n	800247a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a27      	ldr	r2, [pc, #156]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a20      	ldr	r2, [pc, #128]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002420:	2312      	movs	r3, #18
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002424:	2301      	movs	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800242c:	2304      	movs	r3, #4
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	4619      	mov	r1, r3
 8002436:	4817      	ldr	r0, [pc, #92]	; (8002494 <HAL_I2C_MspInit+0x138>)
 8002438:	f000 fc70 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800243c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002442:	2312      	movs	r3, #18
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002446:	2301      	movs	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800244e:	2304      	movs	r3, #4
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	4619      	mov	r1, r3
 8002458:	480f      	ldr	r0, [pc, #60]	; (8002498 <HAL_I2C_MspInit+0x13c>)
 800245a:	f000 fc5f 	bl	8002d1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_I2C_MspInit+0x12c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
}
 800247a:	bf00      	nop
 800247c:	3730      	adds	r7, #48	; 0x30
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40005400 	.word	0x40005400
 8002488:	40023800 	.word	0x40023800
 800248c:	40020400 	.word	0x40020400
 8002490:	40005c00 	.word	0x40005c00
 8002494:	40020800 	.word	0x40020800
 8002498:	40020000 	.word	0x40020000

0800249c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_I2S_MspInit+0xc0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d14a      	bne.n	8002554 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a26      	ldr	r2, [pc, #152]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_I2S_MspInit+0xc4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002512:	2310      	movs	r3, #16
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002522:	2306      	movs	r3, #6
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <HAL_I2S_MspInit+0xc8>)
 800252e:	f000 fbf5 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002532:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002544:	2306      	movs	r3, #6
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <HAL_I2S_MspInit+0xcc>)
 8002550:	f000 fbe4 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40003c00 	.word	0x40003c00
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020800 	.word	0x40020800

0800256c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_SPI_MspInit+0x84>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d12b      	bne.n	80025e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 8002598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80025c6:	23e0      	movs	r3, #224	; 0xe0
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d6:	2305      	movs	r3, #5
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	; (80025f8 <HAL_SPI_MspInit+0x8c>)
 80025e2:	f000 fb9b 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40013000 	.word	0x40013000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d115      	bne.n	800263a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_TIM_Base_MspInit+0x48>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0x48>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_TIM_Base_MspInit+0x48>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2105      	movs	r1, #5
 800262e:	201c      	movs	r0, #28
 8002630:	f000 fab8 	bl	8002ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002634:	201c      	movs	r0, #28
 8002636:	f000 fad1 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_UART_MspInit+0x94>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d133      	bne.n	80026d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_UART_MspInit+0x98>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_UART_MspInit+0x98>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_UART_MspInit+0x98>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_UART_MspInit+0x98>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <HAL_UART_MspInit+0x98>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_UART_MspInit+0x98>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a2:	230c      	movs	r3, #12
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b2:	2307      	movs	r3, #7
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4809      	ldr	r0, [pc, #36]	; (80026e4 <HAL_UART_MspInit+0x9c>)
 80026be:	f000 fb2d 	bl	8002d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2105      	movs	r1, #5
 80026c6:	2026      	movs	r0, #38	; 0x26
 80026c8:	f000 fa6c 	bl	8002ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026cc:	2026      	movs	r0, #38	; 0x26
 80026ce:	f000 fa85 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40004400 	.word	0x40004400
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	2036      	movs	r0, #54	; 0x36
 80026fe:	f000 fa51 	bl	8002ba4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002702:	2036      	movs	r0, #54	; 0x36
 8002704:	f000 fa6a 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_InitTick+0xa4>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_InitTick+0xa4>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6413      	str	r3, [r2, #64]	; 0x40
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_InitTick+0xa4>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002724:	f107 0210 	add.w	r2, r7, #16
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fd90 	bl	8007254 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002734:	f004 fd66 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 8002738:	4603      	mov	r3, r0
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	4a13      	ldr	r2, [pc, #76]	; (8002790 <HAL_InitTick+0xa8>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	3b01      	subs	r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_InitTick+0xac>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_InitTick+0xb0>)
 8002750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_InitTick+0xac>)
 8002754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002758:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_InitTick+0xac>)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_InitTick+0xac>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_InitTick+0xac>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800276c:	4809      	ldr	r0, [pc, #36]	; (8002794 <HAL_InitTick+0xac>)
 800276e:	f004 ff6c 	bl	800764a <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002778:	4806      	ldr	r0, [pc, #24]	; (8002794 <HAL_InitTick+0xac>)
 800277a:	f004 ffb5 	bl	80076e8 <HAL_TIM_Base_Start_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3730      	adds	r7, #48	; 0x30
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	431bde83 	.word	0x431bde83
 8002794:	20005020 	.word	0x20005020
 8002798:	40001000 	.word	0x40001000

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <TIM2_IRQHandler+0x30>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <TIM2_IRQHandler+0x18>
			timer_count++;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <TIM2_IRQHandler+0x34>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <TIM2_IRQHandler+0x34>)
 80027ee:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <TIM2_IRQHandler+0x34>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d901      	bls.n	80027fc <TIM2_IRQHandler+0x24>
		Message_handler();
 80027f8:	f7fe fb66 	bl	8000ec8 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <TIM2_IRQHandler+0x38>)
 80027fe:	f004 ffe3 	bl	80077c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20004ddc 	.word	0x20004ddc
 800280c:	200000b0 	.word	0x200000b0
 8002810:	20004f48 	.word	0x20004f48

08002814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <USART2_IRQHandler+0x3c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	b2d1      	uxtb	r1, r2
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <USART2_IRQHandler+0x3c>)
 8002822:	7011      	strb	r1, [r2, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <USART2_IRQHandler+0x40>)
 8002828:	18d1      	adds	r1, r2, r3
 800282a:	230a      	movs	r3, #10
 800282c:	2201      	movs	r2, #1
 800282e:	480a      	ldr	r0, [pc, #40]	; (8002858 <USART2_IRQHandler+0x44>)
 8002830:	f005 fc67 	bl	8008102 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <USART2_IRQHandler+0x3c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	4a06      	ldr	r2, [pc, #24]	; (8002854 <USART2_IRQHandler+0x40>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	2b0a      	cmp	r3, #10
 8002840:	d101      	bne.n	8002846 <USART2_IRQHandler+0x32>
		Message_handler();
 8002842:	f7fe fb41 	bl	8000ec8 <Message_handler>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002846:	4804      	ldr	r0, [pc, #16]	; (8002858 <USART2_IRQHandler+0x44>)
 8002848:	f005 fcfe 	bl	8008248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200000b1 	.word	0x200000b1
 8002854:	20004ddc 	.word	0x20004ddc
 8002858:	20004f90 	.word	0x20004f90

0800285c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <TIM6_DAC_IRQHandler+0x10>)
 8002862:	f004 ffb1 	bl	80077c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20005020 	.word	0x20005020

08002870 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <OTG_FS_IRQHandler+0x10>)
 8002876:	f000 fe71 	bl	800355c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200054b4 	.word	0x200054b4

08002884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <_sbrk+0x5c>)
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <_sbrk+0x60>)
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <_sbrk+0x64>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <_sbrk+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d207      	bcs.n	80028c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b4:	f00c fd2c 	bl	800f310 <__errno>
 80028b8:	4603      	mov	r3, r0
 80028ba:	220c      	movs	r2, #12
 80028bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c2:	e009      	b.n	80028d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <_sbrk+0x64>)
 80028d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20020000 	.word	0x20020000
 80028e4:	00000400 	.word	0x00000400
 80028e8:	200004bc 	.word	0x200004bc
 80028ec:	200057c8 	.word	0x200057c8

080028f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <SystemInit+0x20>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <SystemInit+0x20>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800294c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800291a:	490e      	ldr	r1, [pc, #56]	; (8002954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002930:	4c0b      	ldr	r4, [pc, #44]	; (8002960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800293e:	f7ff ffd7 	bl	80028f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f00c fceb 	bl	800f31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002946:	f7fe fd17 	bl	8001378 <main>
  bx  lr    
 800294a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800294c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002954:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002958:	08010f38 	.word	0x08010f38
  ldr r2, =_sbss
 800295c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002960:	200057c8 	.word	0x200057c8

08002964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <HAL_Init+0x40>)
 8002972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_Init+0x40>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_Init+0x40>)
 800298a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f8fc 	bl	8002b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff fea6 	bl	80026e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff fcaa 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00

080029ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x20>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_IncTick+0x24>)
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000008 	.word	0x20000008
 80029d0:	20005068 	.word	0x20005068

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_GetTick+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20005068 	.word	0x20005068

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a04:	d005      	beq.n	8002a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_Delay+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a12:	bf00      	nop
 8002a14:	f7ff ffde 	bl	80029d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d8f7      	bhi.n	8002a14 <HAL_Delay+0x28>
  {
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000008 	.word	0x20000008

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff4c 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb6:	f7ff ff61 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002bba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f7ff ffb1 	bl	8002b28 <NVIC_EncodePriority>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff80 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002bd4:	bf00      	nop
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff54 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c06:	f7ff fee5 	bl	80029d4 <HAL_GetTick>
 8002c0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e052      	b.n	8002cd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0216 	bic.w	r2, r2, #22
 8002c38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_DMA_Abort+0x62>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0208 	bic.w	r2, r2, #8
 8002c68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c7a:	e013      	b.n	8002ca4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7c:	f7ff feaa 	bl	80029d4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d90c      	bls.n	8002ca4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e015      	b.n	8002cd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e4      	bne.n	8002c7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	223f      	movs	r2, #63	; 0x3f
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00c      	b.n	8002d10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e16b      	b.n	8003010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 815a 	bne.w	800300a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d005      	beq.n	8002d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d130      	bne.n	8002dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 0201 	and.w	r2, r3, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d017      	beq.n	8002e0c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d123      	bne.n	8002e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b4 	beq.w	800300a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b60      	ldr	r3, [pc, #384]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a5f      	ldr	r2, [pc, #380]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	; (800302c <HAL_GPIO_Init+0x310>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_GPIO_Init+0x314>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02b      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a51      	ldr	r2, [pc, #324]	; (8003034 <HAL_GPIO_Init+0x318>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d025      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	; (8003038 <HAL_GPIO_Init+0x31c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	; (800303c <HAL_GPIO_Init+0x320>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_GPIO_Init+0x328>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x32c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_GPIO_Init+0x330>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x20a>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f86:	4a32      	ldr	r2, [pc, #200]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a12      	ldr	r2, [pc, #72]	; (8003050 <HAL_GPIO_Init+0x334>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae90 	bls.w	8002d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40013c00 	.word	0x40013c00

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003088:	b08f      	sub	sp, #60	; 0x3c
 800308a:	af0a      	add	r7, sp, #40	; 0x28
 800308c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e054      	b.n	8003142 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f00b fe7e 	bl	800edb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f005 fe50 	bl	8008d7c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	687e      	ldr	r6, [r7, #4]
 80030e4:	466d      	mov	r5, sp
 80030e6:	f106 0410 	add.w	r4, r6, #16
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80030fa:	1d33      	adds	r3, r6, #4
 80030fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fe:	6838      	ldr	r0, [r7, #0]
 8003100:	f005 fdca 	bl	8008c98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f005 fe47 	bl	8008d9e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	687e      	ldr	r6, [r7, #4]
 8003118:	466d      	mov	r5, sp
 800311a:	f106 0410 	add.w	r4, r6, #16
 800311e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800312a:	e885 0003 	stmia.w	r5, {r0, r1}
 800312e:	1d33      	adds	r3, r6, #4
 8003130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	f005 ff5a 	bl	8008fec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b089      	sub	sp, #36	; 0x24
 800314e:	af04      	add	r7, sp, #16
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	4608      	mov	r0, r1
 8003154:	4611      	mov	r1, r2
 8003156:	461a      	mov	r2, r3
 8003158:	4603      	mov	r3, r0
 800315a:	70fb      	strb	r3, [r7, #3]
 800315c:	460b      	mov	r3, r1
 800315e:	70bb      	strb	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_HCD_HC_Init+0x28>
 800316e:	2302      	movs	r3, #2
 8003170:	e076      	b.n	8003260 <HAL_HCD_HC_Init+0x116>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	333d      	adds	r3, #61	; 0x3d
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3338      	adds	r3, #56	; 0x38
 800319a:	787a      	ldrb	r2, [r7, #1]
 800319c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3340      	adds	r3, #64	; 0x40
 80031ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3339      	adds	r3, #57	; 0x39
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333f      	adds	r3, #63	; 0x3f
 80031d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	78ba      	ldrb	r2, [r7, #2]
 80031da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031de:	b2d0      	uxtb	r0, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	333a      	adds	r3, #58	; 0x3a
 80031ec:	4602      	mov	r2, r0
 80031ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80031f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da09      	bge.n	800320c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	333b      	adds	r3, #59	; 0x3b
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e008      	b.n	800321e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	333b      	adds	r3, #59	; 0x3b
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	333c      	adds	r3, #60	; 0x3c
 800322c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003230:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	787c      	ldrb	r4, [r7, #1]
 8003238:	78ba      	ldrb	r2, [r7, #2]
 800323a:	78f9      	ldrb	r1, [r7, #3]
 800323c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4623      	mov	r3, r4
 800324e:	f006 f84f 	bl	80092f0 <USB_HC_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_HCD_HC_Halt+0x1e>
 8003282:	2302      	movs	r3, #2
 8003284:	e00f      	b.n	80032a6 <HAL_HCD_HC_Halt+0x3e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f006 fa8b 	bl	80097b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	70fb      	strb	r3, [r7, #3]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70bb      	strb	r3, [r7, #2]
 80032c6:	4613      	mov	r3, r2
 80032c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	333b      	adds	r3, #59	; 0x3b
 80032d8:	78ba      	ldrb	r2, [r7, #2]
 80032da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	333f      	adds	r3, #63	; 0x3f
 80032ea:	787a      	ldrb	r2, [r7, #1]
 80032ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032ee:	7c3b      	ldrb	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d112      	bne.n	800331a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3342      	adds	r3, #66	; 0x42
 8003302:	2203      	movs	r2, #3
 8003304:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	333d      	adds	r3, #61	; 0x3d
 8003314:	7f3a      	ldrb	r2, [r7, #28]
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e008      	b.n	800332c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3342      	adds	r3, #66	; 0x42
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b03      	cmp	r3, #3
 8003330:	f200 80c6 	bhi.w	80034c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	0800334d 	.word	0x0800334d
 8003340:	080034ad 	.word	0x080034ad
 8003344:	080033b1 	.word	0x080033b1
 8003348:	0800342f 	.word	0x0800342f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800334c:	7c3b      	ldrb	r3, [r7, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 80b8 	bne.w	80034c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003354:	78bb      	ldrb	r3, [r7, #2]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 80b4 	bne.w	80034c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800335c:	8b3b      	ldrh	r3, [r7, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3355      	adds	r3, #85	; 0x55
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3355      	adds	r3, #85	; 0x55
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3342      	adds	r3, #66	; 0x42
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800339a:	e093      	b.n	80034c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3342      	adds	r3, #66	; 0x42
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]
      break;
 80033ae:	e089      	b.n	80034c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80033b0:	78bb      	ldrb	r3, [r7, #2]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11d      	bne.n	80033f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3355      	adds	r3, #85	; 0x55
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3342      	adds	r3, #66	; 0x42
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033dc:	e073      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3342      	adds	r3, #66	; 0x42
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]
      break;
 80033f0:	e069      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3354      	adds	r3, #84	; 0x54
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3342      	adds	r3, #66	; 0x42
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
      break;
 8003418:	e055      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3342      	adds	r3, #66	; 0x42
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
      break;
 800342c:	e04b      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800342e:	78bb      	ldrb	r3, [r7, #2]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d11d      	bne.n	8003470 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3355      	adds	r3, #85	; 0x55
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3342      	adds	r3, #66	; 0x42
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800345a:	e034      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3342      	adds	r3, #66	; 0x42
 800346a:	2202      	movs	r2, #2
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	e02a      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3354      	adds	r3, #84	; 0x54
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3342      	adds	r3, #66	; 0x42
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
      break;
 8003496:	e016      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3342      	adds	r3, #66	; 0x42
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
      break;
 80034aa:	e00c      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3342      	adds	r3, #66	; 0x42
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
      break;
 80034be:	e002      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80034c0:	bf00      	nop
 80034c2:	e000      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80034c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3344      	adds	r3, #68	; 0x44
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	8b3a      	ldrh	r2, [r7, #24]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	202c      	movs	r0, #44	; 0x2c
 80034e0:	fb00 f303 	mul.w	r3, r0, r3
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	; 0x4c
 80034e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3360      	adds	r3, #96	; 0x60
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3350      	adds	r3, #80	; 0x50
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3339      	adds	r3, #57	; 0x39
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3361      	adds	r3, #97	; 0x61
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	222c      	movs	r2, #44	; 0x2c
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	3338      	adds	r3, #56	; 0x38
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	f005 ffde 	bl	800950c <USB_HC_StartXfer>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop

0800355c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f005 fcf7 	bl	8008f66 <USB_GetMode>
 8003578:	4603      	mov	r3, r0
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 80ef 	bne.w	800375e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f005 fcdb 	bl	8008f40 <USB_ReadInterrupts>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80e5 	beq.w	800375c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f005 fcd2 	bl	8008f40 <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a6:	d104      	bne.n	80035b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 fcc2 	bl	8008f40 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c6:	d104      	bne.n	80035d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 fcb2 	bl	8008f40 <USB_ReadInterrupts>
 80035dc:	4603      	mov	r3, r0
 80035de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e6:	d104      	bne.n	80035f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f005 fca2 	bl	8008f40 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d103      	bne.n	800360e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2202      	movs	r2, #2
 800360c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f005 fc94 	bl	8008f40 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003622:	d115      	bne.n	8003650 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800362c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f00b fc36 	bl	800eeb0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f005 fd8a 	bl	8009164 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f005 fc73 	bl	8008f40 <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003664:	d102      	bne.n	800366c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 f9ff 	bl	8004a6a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 fc65 	bl	8008f40 <USB_ReadInterrupts>
 8003676:	4603      	mov	r3, r0
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d106      	bne.n	800368e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f00b fbf9 	bl	800ee78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2208      	movs	r2, #8
 800368c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fc54 	bl	8008f40 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d101      	bne.n	80036a6 <HAL_HCD_IRQHandler+0x14a>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_HCD_IRQHandler+0x14c>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0210 	bic.w	r2, r2, #16
 80036ba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f001 f902 	bl	80048c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0210 	orr.w	r2, r2, #16
 80036d0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 fc32 	bl	8008f40 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e6:	d13a      	bne.n	800375e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f006 f84f 	bl	8009790 <USB_HC_ReadInterrupt>
 80036f2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e025      	b.n	8003746 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d106      	bne.n	8003734 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f8ab 	bl	8003888 <HCD_HC_IN_IRQHandler>
 8003732:	e005      	b.n	8003740 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fcc6 	bl	80040cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	429a      	cmp	r2, r3
 800374e:	d3d4      	bcc.n	80036fa <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	615a      	str	r2, [r3, #20]
 800375a:	e000      	b.n	800375e <HAL_HCD_IRQHandler+0x202>
      return;
 800375c:	bf00      	nop
    }
  }
}
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_HCD_Start+0x16>
 8003776:	2302      	movs	r3, #2
 8003778:	e013      	b.n	80037a2 <HAL_HCD_Start+0x3e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f005 fae7 	bl	8008d5a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	4618      	mov	r0, r3
 8003794:	f005 fd4a 	bl	800922c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_HCD_Stop+0x16>
 80037bc:	2302      	movs	r3, #2
 80037be:	e00d      	b.n	80037dc <HAL_HCD_Stop+0x32>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f006 f949 	bl	8009a64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f005 fcf1 	bl	80091d8 <USB_ResetPort>
 80037f6:	4603      	mov	r3, r0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	781b      	ldrb	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3350      	adds	r3, #80	; 0x50
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fd35 	bl	80092cc <USB_GetCurrentFrame>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f005 fd10 	bl	800929e <USB_GetHostSpeed>
 800387e:	4603      	mov	r3, r0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d119      	bne.n	80038ec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	461a      	mov	r2, r3
 80038c6:	2304      	movs	r3, #4
 80038c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	60d3      	str	r3, [r2, #12]
 80038ea:	e101      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d12b      	bne.n	800395c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003916:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3361      	adds	r3, #97	; 0x61
 8003926:	2207      	movs	r2, #7
 8003928:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	440a      	add	r2, r1
 8003940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f005 ff2c 	bl	80097b2 <USB_HC_Halt>
 800395a:	e0c9      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d109      	bne.n	8003986 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	2320      	movs	r3, #32
 8003982:	6093      	str	r3, [r2, #8]
 8003984:	e0b4      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d133      	bne.n	8003a04 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3361      	adds	r3, #97	; 0x61
 80039ca:	2205      	movs	r2, #5
 80039cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	2310      	movs	r3, #16
 80039de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	2308      	movs	r3, #8
 80039f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 fed8 	bl	80097b2 <USB_HC_Halt>
 8003a02:	e075      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1a:	d134      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3361      	adds	r3, #97	; 0x61
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a72:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fe97 	bl	80097b2 <USB_HC_Halt>
 8003a84:	e034      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d129      	bne.n	8003af0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3361      	adds	r3, #97	; 0x61
 8003aca:	2206      	movs	r2, #6
 8003acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 fe6a 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	461a      	mov	r2, r3
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b06:	d122      	bne.n	8003b4e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f005 fe3d 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b4c:	e2ba      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	f040 811b 	bne.w	8003d9c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d019      	beq.n	8003ba2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	3348      	adds	r3, #72	; 0x48
 8003b7c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	0159      	lsls	r1, r3, #5
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	440b      	add	r3, r1
 8003b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	202c      	movs	r0, #44	; 0x2c
 8003b98:	fb00 f303 	mul.w	r3, r0, r3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3350      	adds	r3, #80	; 0x50
 8003ba0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	3361      	adds	r3, #97	; 0x61
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	335c      	adds	r3, #92	; 0x5c
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	333f      	adds	r3, #63	; 0x3f
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	333f      	adds	r3, #63	; 0x3f
 8003bfa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d121      	bne.n	8003c44 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	0151      	lsls	r1, r2, #5
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f005 fdc1 	bl	80097b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2310      	movs	r3, #16
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	e066      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	333f      	adds	r3, #63	; 0x3f
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d127      	bne.n	8003ca8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c76:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	b2d9      	uxtb	r1, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	202c      	movs	r0, #44	; 0x2c
 8003c94:	fb00 f303 	mul.w	r3, r0, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3360      	adds	r3, #96	; 0x60
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f00b f913 	bl	800eecc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ca6:	e034      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	333f      	adds	r3, #63	; 0x3f
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d12a      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3360      	adds	r3, #96	; 0x60
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3354      	adds	r3, #84	; 0x54
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2d8      	uxtb	r0, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3354      	adds	r3, #84	; 0x54
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	202c      	movs	r0, #44	; 0x2c
 8003d00:	fb00 f303 	mul.w	r3, r0, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	3360      	adds	r3, #96	; 0x60
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f00b f8dd 	bl	800eecc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d12b      	bne.n	8003d72 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3348      	adds	r3, #72	; 0x48
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	202c      	movs	r0, #44	; 0x2c
 8003d30:	fb00 f202 	mul.w	r2, r0, r2
 8003d34:	440a      	add	r2, r1
 8003d36:	3240      	adds	r2, #64	; 0x40
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 81be 	beq.w	80040c4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3354      	adds	r3, #84	; 0x54
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f083 0301 	eor.w	r3, r3, #1
 8003d5c:	b2d8      	uxtb	r0, r3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	3354      	adds	r3, #84	; 0x54
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	701a      	strb	r2, [r3, #0]
}
 8003d70:	e1a8      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3354      	adds	r3, #84	; 0x54
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	f083 0301 	eor.w	r3, r3, #1
 8003d86:	b2d8      	uxtb	r0, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3354      	adds	r3, #84	; 0x54
 8003d96:	4602      	mov	r2, r0
 8003d98:	701a      	strb	r2, [r3, #0]
}
 8003d9a:	e193      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	f040 8106 	bne.w	8003fc0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dce:	f023 0302 	bic.w	r3, r3, #2
 8003dd2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d109      	bne.n	8003dfc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e0c9      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3361      	adds	r3, #97	; 0x61
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d109      	bne.n	8003e24 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3360      	adds	r3, #96	; 0x60
 8003e1e:	2205      	movs	r2, #5
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e0b5      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	3361      	adds	r3, #97	; 0x61
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d009      	beq.n	8003e4c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3361      	adds	r3, #97	; 0x61
 8003e46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d150      	bne.n	8003eee <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	335c      	adds	r3, #92	; 0x5c
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	202c      	movs	r0, #44	; 0x2c
 8003e64:	fb00 f303 	mul.w	r3, r0, r3
 8003e68:	440b      	add	r3, r1
 8003e6a:	335c      	adds	r3, #92	; 0x5c
 8003e6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	335c      	adds	r3, #92	; 0x5c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d912      	bls.n	8003ea8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	335c      	adds	r3, #92	; 0x5c
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3360      	adds	r3, #96	; 0x60
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ea6:	e073      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3360      	adds	r3, #96	; 0x60
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ed0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ed8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003eec:	e050      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3361      	adds	r3, #97	; 0x61
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d122      	bne.n	8003f48 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3360      	adds	r3, #96	; 0x60
 8003f10:	2202      	movs	r2, #2
 8003f12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e023      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3361      	adds	r3, #97	; 0x61
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b07      	cmp	r3, #7
 8003f5a:	d119      	bne.n	8003f90 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	335c      	adds	r3, #92	; 0x5c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	202c      	movs	r0, #44	; 0x2c
 8003f74:	fb00 f303 	mul.w	r3, r0, r3
 8003f78:	440b      	add	r3, r1
 8003f7a:	335c      	adds	r3, #92	; 0x5c
 8003f7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	b2d9      	uxtb	r1, r3
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	202c      	movs	r0, #44	; 0x2c
 8003fac:	fb00 f303 	mul.w	r3, r0, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3360      	adds	r3, #96	; 0x60
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f00a ff87 	bl	800eecc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fbe:	e081      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d176      	bne.n	80040c4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	333f      	adds	r3, #63	; 0x3f
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d121      	bne.n	800402e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	440a      	add	r2, r1
 8004012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f005 fbc3 	bl	80097b2 <USB_HC_Halt>
 800402c:	e041      	b.n	80040b2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	333f      	adds	r3, #63	; 0x3f
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	333f      	adds	r3, #63	; 0x3f
 8004050:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004052:	2b02      	cmp	r3, #2
 8004054:	d12d      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	335c      	adds	r3, #92	; 0x5c
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d120      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3361      	adds	r3, #97	; 0x61
 800407e:	2203      	movs	r2, #3
 8004080:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	440a      	add	r2, r1
 8004098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f005 fb80 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	2310      	movs	r3, #16
 80040c2:	6093      	str	r3, [r2, #8]
}
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d119      	bne.n	8004130 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	461a      	mov	r2, r3
 800410a:	2304      	movs	r3, #4
 800410c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	440a      	add	r2, r1
 8004124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800412e:	e3c6      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d13e      	bne.n	80041c4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	461a      	mov	r2, r3
 8004154:	2320      	movs	r3, #32
 8004156:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	333d      	adds	r3, #61	; 0x3d
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 83a8 	bne.w	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	333d      	adds	r3, #61	; 0x3d
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3360      	adds	r3, #96	; 0x60
 800418e:	2202      	movs	r2, #2
 8004190:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 faf8 	bl	80097b2 <USB_HC_Halt>
}
 80041c2:	e37c      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041da:	d122      	bne.n	8004222 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f005 fad3 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800421e:	6093      	str	r3, [r2, #8]
}
 8004220:	e34d      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d150      	bne.n	80042da <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	335c      	adds	r3, #92	; 0x5c
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d111      	bne.n	8004284 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	333d      	adds	r3, #61	; 0x3d
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	461a      	mov	r2, r3
 8004280:	2340      	movs	r3, #64	; 0x40
 8004282:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	440a      	add	r2, r1
 800429a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429e:	f043 0302 	orr.w	r3, r3, #2
 80042a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f005 fa7f 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3361      	adds	r3, #97	; 0x61
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
}
 80042d8:	e2f1      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d13c      	bne.n	800436a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	3361      	adds	r3, #97	; 0x61
 80042fe:	2204      	movs	r2, #4
 8004300:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	333d      	adds	r3, #61	; 0x3d
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	335c      	adds	r3, #92	; 0x5c
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	440a      	add	r2, r1
 800433c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f005 fa2e 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	461a      	mov	r2, r3
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	6093      	str	r3, [r2, #8]
}
 8004368:	e2a9      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d12a      	bne.n	80043d6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	461a      	mov	r2, r3
 800438e:	2308      	movs	r3, #8
 8004390:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f005 f9f8 	bl	80097b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3361      	adds	r3, #97	; 0x61
 80043d0:	2205      	movs	r2, #5
 80043d2:	701a      	strb	r2, [r3, #0]
}
 80043d4:	e273      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d150      	bne.n	800448e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	335c      	adds	r3, #92	; 0x5c
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	3361      	adds	r3, #97	; 0x61
 800440c:	2203      	movs	r2, #3
 800440e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	333d      	adds	r3, #61	; 0x3d
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d112      	bne.n	800444a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	212c      	movs	r1, #44	; 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	333c      	adds	r3, #60	; 0x3c
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	333d      	adds	r3, #61	; 0x3d
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	440a      	add	r2, r1
 8004460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f005 f99c 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004486:	461a      	mov	r2, r3
 8004488:	2310      	movs	r3, #16
 800448a:	6093      	str	r3, [r2, #8]
}
 800448c:	e217      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	4413      	add	r3, r2
 8004496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d174      	bne.n	800458e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d121      	bne.n	80044f0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3361      	adds	r3, #97	; 0x61
 80044ba:	2206      	movs	r2, #6
 80044bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f005 f962 	bl	80097b2 <USB_HC_Halt>
 80044ee:	e044      	b.n	800457a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	335c      	adds	r3, #92	; 0x5c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	202c      	movs	r0, #44	; 0x2c
 8004508:	fb00 f303 	mul.w	r3, r0, r3
 800450c:	440b      	add	r3, r1
 800450e:	335c      	adds	r3, #92	; 0x5c
 8004510:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	335c      	adds	r3, #92	; 0x5c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d920      	bls.n	8004568 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	335c      	adds	r3, #92	; 0x5c
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3360      	adds	r3, #96	; 0x60
 8004546:	2204      	movs	r2, #4
 8004548:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	b2d9      	uxtb	r1, r3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	202c      	movs	r0, #44	; 0x2c
 8004554:	fb00 f303 	mul.w	r3, r0, r3
 8004558:	4413      	add	r3, r2
 800455a:	3360      	adds	r3, #96	; 0x60
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f00a fcb3 	bl	800eecc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004566:	e008      	b.n	800457a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3360      	adds	r3, #96	; 0x60
 8004576:	2202      	movs	r2, #2
 8004578:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	461a      	mov	r2, r3
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	6093      	str	r3, [r2, #8]
}
 800458c:	e197      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d134      	bne.n	8004610 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f005 f8ee 	bl	80097b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e2:	461a      	mov	r2, r3
 80045e4:	2310      	movs	r3, #16
 80045e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	212c      	movs	r1, #44	; 0x2c
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	3361      	adds	r3, #97	; 0x61
 800460a:	2208      	movs	r2, #8
 800460c:	701a      	strb	r2, [r3, #0]
}
 800460e:	e156      	b.n	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	f040 814b 	bne.w	80048be <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	0151      	lsls	r1, r2, #5
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	440a      	add	r2, r1
 800463e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004642:	f023 0302 	bic.w	r3, r3, #2
 8004646:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	3361      	adds	r3, #97	; 0x61
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d179      	bne.n	8004750 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	333f      	adds	r3, #63	; 0x3f
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d00a      	beq.n	8004698 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	212c      	movs	r1, #44	; 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	333f      	adds	r3, #63	; 0x3f
 8004690:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004692:	2b03      	cmp	r3, #3
 8004694:	f040 80fc 	bne.w	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d142      	bne.n	8004726 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	334c      	adds	r3, #76	; 0x4c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80ed 	beq.w	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	334c      	adds	r3, #76	; 0x4c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	202c      	movs	r0, #44	; 0x2c
 80046cc:	fb00 f202 	mul.w	r2, r0, r2
 80046d0:	440a      	add	r2, r1
 80046d2:	3240      	adds	r2, #64	; 0x40
 80046d4:	8812      	ldrh	r2, [r2, #0]
 80046d6:	4413      	add	r3, r2
 80046d8:	3b01      	subs	r3, #1
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	202c      	movs	r0, #44	; 0x2c
 80046e0:	fb00 f202 	mul.w	r2, r0, r2
 80046e4:	440a      	add	r2, r1
 80046e6:	3240      	adds	r2, #64	; 0x40
 80046e8:	8812      	ldrh	r2, [r2, #0]
 80046ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80ca 	beq.w	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3355      	adds	r3, #85	; 0x55
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f083 0301 	eor.w	r3, r3, #1
 8004710:	b2d8      	uxtb	r0, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	3355      	adds	r3, #85	; 0x55
 8004720:	4602      	mov	r2, r0
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e0b4      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3355      	adds	r3, #85	; 0x55
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f083 0301 	eor.w	r3, r3, #1
 800473a:	b2d8      	uxtb	r0, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3355      	adds	r3, #85	; 0x55
 800474a:	4602      	mov	r2, r0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e09f      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	212c      	movs	r1, #44	; 0x2c
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	4413      	add	r3, r2
 800475c:	3361      	adds	r3, #97	; 0x61
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d109      	bne.n	8004778 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3360      	adds	r3, #96	; 0x60
 8004772:	2202      	movs	r2, #2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e08b      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3361      	adds	r3, #97	; 0x61
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d109      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3360      	adds	r3, #96	; 0x60
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e077      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3361      	adds	r3, #97	; 0x61
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d109      	bne.n	80047c8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3360      	adds	r3, #96	; 0x60
 80047c2:	2205      	movs	r2, #5
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e063      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3361      	adds	r3, #97	; 0x61
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b06      	cmp	r3, #6
 80047da:	d009      	beq.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3361      	adds	r3, #97	; 0x61
 80047ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d14f      	bne.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	335c      	adds	r3, #92	; 0x5c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	202c      	movs	r0, #44	; 0x2c
 8004808:	fb00 f303 	mul.w	r3, r0, r3
 800480c:	440b      	add	r3, r1
 800480e:	335c      	adds	r3, #92	; 0x5c
 8004810:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	212c      	movs	r1, #44	; 0x2c
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	335c      	adds	r3, #92	; 0x5c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d912      	bls.n	800484c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	335c      	adds	r3, #92	; 0x5c
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3360      	adds	r3, #96	; 0x60
 8004846:	2204      	movs	r2, #4
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e021      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	3360      	adds	r3, #96	; 0x60
 800485a:	2202      	movs	r2, #2
 800485c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004874:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800487c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	461a      	mov	r2, r3
 800489e:	2302      	movs	r3, #2
 80048a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	b2d9      	uxtb	r1, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	202c      	movs	r0, #44	; 0x2c
 80048ac:	fb00 f303 	mul.w	r3, r0, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	3360      	adds	r3, #96	; 0x60
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f00a fb07 	bl	800eecc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048be:	bf00      	nop
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b08a      	sub	sp, #40	; 0x28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	0c5b      	lsrs	r3, r3, #17
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d004      	beq.n	800490c <HCD_RXQLVL_IRQHandler+0x46>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b05      	cmp	r3, #5
 8004906:	f000 80a9 	beq.w	8004a5c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800490a:	e0aa      	b.n	8004a62 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a6 	beq.w	8004a60 <HCD_RXQLVL_IRQHandler+0x19a>
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3344      	adds	r3, #68	; 0x44
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 809b 	beq.w	8004a60 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	3350      	adds	r3, #80	; 0x50
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	441a      	add	r2, r3
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	202c      	movs	r0, #44	; 0x2c
 8004944:	fb00 f303 	mul.w	r3, r0, r3
 8004948:	440b      	add	r3, r1
 800494a:	334c      	adds	r3, #76	; 0x4c
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d87a      	bhi.n	8004a48 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	212c      	movs	r1, #44	; 0x2c
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	4413      	add	r3, r2
 8004962:	3344      	adds	r3, #68	; 0x44
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	b292      	uxth	r2, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f004 fabf 	bl	8008eee <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	212c      	movs	r1, #44	; 0x2c
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	4413      	add	r3, r2
 800497c:	3344      	adds	r3, #68	; 0x44
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	441a      	add	r2, r3
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	202c      	movs	r0, #44	; 0x2c
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	440b      	add	r3, r1
 8004990:	3344      	adds	r3, #68	; 0x44
 8004992:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	212c      	movs	r1, #44	; 0x2c
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3350      	adds	r3, #80	; 0x50
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	441a      	add	r2, r3
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	202c      	movs	r0, #44	; 0x2c
 80049ae:	fb00 f303 	mul.w	r3, r0, r3
 80049b2:	440b      	add	r3, r1
 80049b4:	3350      	adds	r3, #80	; 0x50
 80049b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	0cdb      	lsrs	r3, r3, #19
 80049c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3340      	adds	r3, #64	; 0x40
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d13c      	bne.n	8004a60 <HCD_RXQLVL_IRQHandler+0x19a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d039      	beq.n	8004a60 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3354      	adds	r3, #84	; 0x54
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f083 0301 	eor.w	r3, r3, #1
 8004a32:	b2d8      	uxtb	r0, r3
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	3354      	adds	r3, #84	; 0x54
 8004a42:	4602      	mov	r2, r0
 8004a44:	701a      	strb	r2, [r3, #0]
      break;
 8004a46:	e00b      	b.n	8004a60 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3360      	adds	r3, #96	; 0x60
 8004a56:	2204      	movs	r2, #4
 8004a58:	701a      	strb	r2, [r3, #0]
      break;
 8004a5a:	e001      	b.n	8004a60 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a60:	bf00      	nop
  }
}
 8004a62:	bf00      	nop
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a96:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d10b      	bne.n	8004aba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d102      	bne.n	8004ab2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f00a f9f1 	bl	800ee94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d132      	bne.n	8004b2a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f043 0308 	orr.w	r3, r3, #8
 8004aca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d126      	bne.n	8004b24 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d113      	bne.n	8004b06 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ae8:	d106      	bne.n	8004af8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2102      	movs	r1, #2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f004 fb37 	bl	8009164 <USB_InitFSLSPClkSel>
 8004af6:	e011      	b.n	8004b1c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 fb30 	bl	8009164 <USB_InitFSLSPClkSel>
 8004b04:	e00a      	b.n	8004b1c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d106      	bne.n	8004b1c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b14:	461a      	mov	r2, r3
 8004b16:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b1a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f00a f9e7 	bl	800eef0 <HAL_HCD_PortEnabled_Callback>
 8004b22:	e002      	b.n	8004b2a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f00a f9f1 	bl	800ef0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d103      	bne.n	8004b3c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f043 0320 	orr.w	r3, r3, #32
 8004b3a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e12b      	b.n	8004dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd fbf0 	bl	800235c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f002 fb26 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a81      	ldr	r2, [pc, #516]	; (8004dc4 <HAL_I2C_Init+0x274>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d807      	bhi.n	8004bd4 <HAL_I2C_Init+0x84>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a80      	ldr	r2, [pc, #512]	; (8004dc8 <HAL_I2C_Init+0x278>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bf94      	ite	ls
 8004bcc:	2301      	movls	r3, #1
 8004bce:	2300      	movhi	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e006      	b.n	8004be2 <HAL_I2C_Init+0x92>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a7d      	ldr	r2, [pc, #500]	; (8004dcc <HAL_I2C_Init+0x27c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	bf94      	ite	ls
 8004bdc:	2301      	movls	r3, #1
 8004bde:	2300      	movhi	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0e7      	b.n	8004dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a78      	ldr	r2, [pc, #480]	; (8004dd0 <HAL_I2C_Init+0x280>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a6a      	ldr	r2, [pc, #424]	; (8004dc4 <HAL_I2C_Init+0x274>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d802      	bhi.n	8004c24 <HAL_I2C_Init+0xd4>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3301      	adds	r3, #1
 8004c22:	e009      	b.n	8004c38 <HAL_I2C_Init+0xe8>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	4a69      	ldr	r2, [pc, #420]	; (8004dd4 <HAL_I2C_Init+0x284>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	3301      	adds	r3, #1
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	495c      	ldr	r1, [pc, #368]	; (8004dc4 <HAL_I2C_Init+0x274>)
 8004c54:	428b      	cmp	r3, r1
 8004c56:	d819      	bhi.n	8004c8c <HAL_I2C_Init+0x13c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1e59      	subs	r1, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c6c:	400b      	ands	r3, r1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_I2C_Init+0x138>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e59      	subs	r1, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c86:	e051      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	e04f      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d111      	bne.n	8004cb8 <HAL_I2C_Init+0x168>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1e58      	subs	r0, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	e012      	b.n	8004cde <HAL_I2C_Init+0x18e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1e58      	subs	r0, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	0099      	lsls	r1, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Init+0x196>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e022      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10e      	bne.n	8004d0c <HAL_I2C_Init+0x1bc>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1e58      	subs	r0, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	440b      	add	r3, r1
 8004cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0a:	e00f      	b.n	8004d2c <HAL_I2C_Init+0x1dc>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	0099      	lsls	r1, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	6809      	ldr	r1, [r1, #0]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6911      	ldr	r1, [r2, #16]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68d2      	ldr	r2, [r2, #12]
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	000186a0 	.word	0x000186a0
 8004dc8:	001e847f 	.word	0x001e847f
 8004dcc:	003d08ff 	.word	0x003d08ff
 8004dd0:	431bde83 	.word	0x431bde83
 8004dd4:	10624dd3 	.word	0x10624dd3

08004dd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	461a      	mov	r2, r3
 8004de4:	460b      	mov	r3, r1
 8004de6:	817b      	strh	r3, [r7, #10]
 8004de8:	4613      	mov	r3, r2
 8004dea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dec:	f7fd fdf2 	bl	80029d4 <HAL_GetTick>
 8004df0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	f040 80e0 	bne.w	8004fc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2319      	movs	r3, #25
 8004e06:	2201      	movs	r2, #1
 8004e08:	4970      	ldr	r1, [pc, #448]	; (8004fcc <HAL_I2C_Master_Transmit+0x1f4>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 ff30 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
 8004e18:	e0d3      	b.n	8004fc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_I2C_Master_Transmit+0x50>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e0cc      	b.n	8004fc2 <HAL_I2C_Master_Transmit+0x1ea>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d007      	beq.n	8004e4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2221      	movs	r2, #33	; 0x21
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a50      	ldr	r2, [pc, #320]	; (8004fd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e90:	8979      	ldrh	r1, [r7, #10]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fcea 	bl	8005870 <I2C_MasterRequestWrite>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e08d      	b.n	8004fc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ebc:	e066      	b.n	8004f8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	6a39      	ldr	r1, [r7, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 ffaa 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d107      	bne.n	8004ee6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e06b      	b.n	8004fc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d11b      	bne.n	8004f60 <HAL_I2C_Master_Transmit+0x188>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	6a39      	ldr	r1, [r7, #32]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 ff9a 	bl	8005e9e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d107      	bne.n	8004f88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01a      	b.n	8004fc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d194      	bne.n	8004ebe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	00100002 	.word	0x00100002
 8004fd0:	ffff0000 	.word	0xffff0000

08004fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	817b      	strh	r3, [r7, #10]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	813b      	strh	r3, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fee:	f7fd fcf1 	bl	80029d4 <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	f040 80d9 	bne.w	80051b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2319      	movs	r3, #25
 8005008:	2201      	movs	r2, #1
 800500a:	496d      	ldr	r1, [pc, #436]	; (80051c0 <HAL_I2C_Mem_Write+0x1ec>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fe2f 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	e0cc      	b.n	80051b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_I2C_Mem_Write+0x56>
 8005026:	2302      	movs	r3, #2
 8005028:	e0c5      	b.n	80051b6 <HAL_I2C_Mem_Write+0x1e2>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d007      	beq.n	8005050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800505e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2221      	movs	r2, #33	; 0x21
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2240      	movs	r2, #64	; 0x40
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a3a      	ldr	r2, [r7, #32]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a4d      	ldr	r2, [pc, #308]	; (80051c4 <HAL_I2C_Mem_Write+0x1f0>)
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005092:	88f8      	ldrh	r0, [r7, #6]
 8005094:	893a      	ldrh	r2, [r7, #8]
 8005096:	8979      	ldrh	r1, [r7, #10]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	4603      	mov	r3, r0
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fc66 	bl	8005974 <I2C_RequestMemoryWrite>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d052      	beq.n	8005154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e081      	b.n	80051b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 feb0 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d107      	bne.n	80050da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e06b      	b.n	80051b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d11b      	bne.n	8005154 <HAL_I2C_Mem_Write+0x180>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d017      	beq.n	8005154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1aa      	bne.n	80050b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fe9c 	bl	8005e9e <I2C_WaitOnBTFFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00d      	beq.n	8005188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	2b04      	cmp	r3, #4
 8005172:	d107      	bne.n	8005184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e016      	b.n	80051b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	00100002 	.word	0x00100002
 80051c4:	ffff0000 	.word	0xffff0000

080051c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	; 0x30
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	460b      	mov	r3, r1
 80051dc:	813b      	strh	r3, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051e2:	f7fd fbf7 	bl	80029d4 <HAL_GetTick>
 80051e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	f040 8208 	bne.w	8005606 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2319      	movs	r3, #25
 80051fc:	2201      	movs	r2, #1
 80051fe:	497b      	ldr	r1, [pc, #492]	; (80053ec <HAL_I2C_Mem_Read+0x224>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fd35 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
 800520e:	e1fb      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_I2C_Mem_Read+0x56>
 800521a:	2302      	movs	r3, #2
 800521c:	e1f4      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d007      	beq.n	8005244 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2222      	movs	r2, #34	; 0x22
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a5b      	ldr	r2, [pc, #364]	; (80053f0 <HAL_I2C_Mem_Read+0x228>)
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005286:	88f8      	ldrh	r0, [r7, #6]
 8005288:	893a      	ldrh	r2, [r7, #8]
 800528a:	8979      	ldrh	r1, [r7, #10]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fc02 	bl	8005aa0 <I2C_RequestMemoryRead>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e1b0      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d113      	bne.n	80052d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ae:	2300      	movs	r3, #0
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e184      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d11b      	bne.n	8005316 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e164      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	2b02      	cmp	r3, #2
 800531c:	d11b      	bne.n	8005356 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	e144      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800536c:	e138      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	2b03      	cmp	r3, #3
 8005374:	f200 80f1 	bhi.w	800555a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b01      	cmp	r3, #1
 800537e:	d123      	bne.n	80053c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fdcb 	bl	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e139      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c6:	e10b      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d14e      	bne.n	800546e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2200      	movs	r2, #0
 80053d8:	4906      	ldr	r1, [pc, #24]	; (80053f4 <HAL_I2C_Mem_Read+0x22c>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fc48 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e10e      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
 80053ea:	bf00      	nop
 80053ec:	00100002 	.word	0x00100002
 80053f0:	ffff0000 	.word	0xffff0000
 80053f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800546c:	e0b8      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	2200      	movs	r2, #0
 8005476:	4966      	ldr	r1, [pc, #408]	; (8005610 <HAL_I2C_Mem_Read+0x448>)
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fbf9 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0bf      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	2200      	movs	r2, #0
 80054d2:	494f      	ldr	r1, [pc, #316]	; (8005610 <HAL_I2C_Mem_Read+0x448>)
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fbcb 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e091      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005558:	e042      	b.n	80055e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800555a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fcde 	bl	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e04c      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d118      	bne.n	80055e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f47f aec2 	bne.w	800536e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3728      	adds	r7, #40	; 0x28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	00010004 	.word	0x00010004

08005614 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	; 0x28
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	460b      	mov	r3, r1
 8005622:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005624:	f7fd f9d6 	bl	80029d4 <HAL_GetTick>
 8005628:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	f040 8111 	bne.w	800585e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2319      	movs	r3, #25
 8005642:	2201      	movs	r2, #1
 8005644:	4988      	ldr	r1, [pc, #544]	; (8005868 <HAL_I2C_IsDeviceReady+0x254>)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fb12 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005652:	2302      	movs	r3, #2
 8005654:	e104      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_I2C_IsDeviceReady+0x50>
 8005660:	2302      	movs	r3, #2
 8005662:	e0fd      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d007      	beq.n	800568a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2224      	movs	r2, #36	; 0x24
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a70      	ldr	r2, [pc, #448]	; (800586c <HAL_I2C_IsDeviceReady+0x258>)
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fad0 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e4:	d103      	bne.n	80056ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0b6      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056f2:	897b      	ldrh	r3, [r7, #10]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005700:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005702:	f7fd f967 	bl	80029d4 <HAL_GetTick>
 8005706:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005736:	e025      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7fd f94c 	bl	80029d4 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <HAL_I2C_IsDeviceReady+0x13a>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	22a0      	movs	r2, #160	; 0xa0
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2ba0      	cmp	r3, #160	; 0xa0
 800578e:	d005      	beq.n	800579c <HAL_I2C_IsDeviceReady+0x188>
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <HAL_I2C_IsDeviceReady+0x188>
 8005796:	7dbb      	ldrb	r3, [r7, #22]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0cd      	beq.n	8005738 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d129      	bne.n	8005806 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2319      	movs	r3, #25
 80057de:	2201      	movs	r2, #1
 80057e0:	4921      	ldr	r1, [pc, #132]	; (8005868 <HAL_I2C_IsDeviceReady+0x254>)
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fa44 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e036      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e02c      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005814:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800581e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2319      	movs	r3, #25
 8005826:	2201      	movs	r2, #1
 8005828:	490f      	ldr	r1, [pc, #60]	; (8005868 <HAL_I2C_IsDeviceReady+0x254>)
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa20 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e012      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	3301      	adds	r3, #1
 800583e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	f4ff af32 	bcc.w	80056ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
  }
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	00100002 	.word	0x00100002
 800586c:	ffff0000 	.word	0xffff0000

08005870 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	460b      	mov	r3, r1
 800587e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d006      	beq.n	800589a <I2C_MasterRequestWrite+0x2a>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d003      	beq.n	800589a <I2C_MasterRequestWrite+0x2a>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005898:	d108      	bne.n	80058ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e00b      	b.n	80058c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	2b12      	cmp	r3, #18
 80058b2:	d107      	bne.n	80058c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f9cd 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ea:	d103      	bne.n	80058f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e035      	b.n	8005964 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005900:	d108      	bne.n	8005914 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005902:	897b      	ldrh	r3, [r7, #10]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005910:	611a      	str	r2, [r3, #16]
 8005912:	e01b      	b.n	800594c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	11db      	asrs	r3, r3, #7
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f003 0306 	and.w	r3, r3, #6
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f063 030f 	orn	r3, r3, #15
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	490e      	ldr	r1, [pc, #56]	; (800596c <I2C_MasterRequestWrite+0xfc>)
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f9f3 	bl	8005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e010      	b.n	8005964 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005942:	897b      	ldrh	r3, [r7, #10]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4907      	ldr	r1, [pc, #28]	; (8005970 <I2C_MasterRequestWrite+0x100>)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f9e3 	bl	8005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	00010008 	.word	0x00010008
 8005970:	00010002 	.word	0x00010002

08005974 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	4603      	mov	r3, r0
 8005984:	817b      	strh	r3, [r7, #10]
 8005986:	460b      	mov	r3, r1
 8005988:	813b      	strh	r3, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800599c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f960 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00d      	beq.n	80059d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c4:	d103      	bne.n	80059ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e05f      	b.n	8005a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059d2:	897b      	ldrh	r3, [r7, #10]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	492d      	ldr	r1, [pc, #180]	; (8005a9c <I2C_RequestMemoryWrite+0x128>)
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f998 	bl	8005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e04c      	b.n	8005a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	6a39      	ldr	r1, [r7, #32]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa02 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d107      	bne.n	8005a36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e02b      	b.n	8005a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	e021      	b.n	8005a90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a4c:	893b      	ldrh	r3, [r7, #8]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	6a39      	ldr	r1, [r7, #32]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f9dc 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d107      	bne.n	8005a82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e005      	b.n	8005a92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a86:	893b      	ldrh	r3, [r7, #8]
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	00010002 	.word	0x00010002

08005aa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	813b      	strh	r3, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8c2 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b00:	d103      	bne.n	8005b0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e0aa      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b0e:	897b      	ldrh	r3, [r7, #10]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	6a3a      	ldr	r2, [r7, #32]
 8005b22:	4952      	ldr	r1, [pc, #328]	; (8005c6c <I2C_RequestMemoryRead+0x1cc>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f8fa 	bl	8005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e097      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	6a39      	ldr	r1, [r7, #32]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f964 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d107      	bne.n	8005b72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e076      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d105      	bne.n	8005b88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7c:	893b      	ldrh	r3, [r7, #8]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	e021      	b.n	8005bcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b88:	893b      	ldrh	r3, [r7, #8]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	6a39      	ldr	r1, [r7, #32]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f93e 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d107      	bne.n	8005bbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e050      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bc2:	893b      	ldrh	r3, [r7, #8]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bce:	6a39      	ldr	r1, [r7, #32]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f923 	bl	8005e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d107      	bne.n	8005bf4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e035      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f82b 	bl	8005c70 <I2C_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2e:	d103      	bne.n	8005c38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e013      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c3c:	897b      	ldrh	r3, [r7, #10]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	4906      	ldr	r1, [pc, #24]	; (8005c6c <I2C_RequestMemoryRead+0x1cc>)
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f863 	bl	8005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	00010002 	.word	0x00010002

08005c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c80:	e025      	b.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c88:	d021      	beq.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8a:	f7fc fea3 	bl	80029d4 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d116      	bne.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e023      	b.n	8005d16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d10d      	bne.n	8005cf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	e00c      	b.n	8005d0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d0b6      	beq.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d2c:	e051      	b.n	8005dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3c:	d123      	bne.n	8005d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e046      	b.n	8005e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8c:	d021      	beq.n	8005dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7fc fe21 	bl	80029d4 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d116      	bne.n	8005dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e020      	b.n	8005e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d10c      	bne.n	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	43da      	mvns	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4013      	ands	r3, r2
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e00b      	b.n	8005e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	43da      	mvns	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d18d      	bne.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e28:	e02d      	b.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f8ce 	bl	8005fcc <I2C_IsAcknowledgeFailed>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e02d      	b.n	8005e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e40:	d021      	beq.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fc fdc7 	bl	80029d4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d116      	bne.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e007      	b.n	8005e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d1ca      	bne.n	8005e2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005eaa:	e02d      	b.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f88d 	bl	8005fcc <I2C_IsAcknowledgeFailed>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e02d      	b.n	8005f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec2:	d021      	beq.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec4:	f7fc fd86 	bl	80029d4 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d116      	bne.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e007      	b.n	8005f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d1ca      	bne.n	8005eac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f2c:	e042      	b.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d119      	bne.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0210 	mvn.w	r2, #16
 8005f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e029      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f70:	f7fc fd30 	bl	80029d4 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e007      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d1b5      	bne.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d11b      	bne.n	800601c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	f043 0204 	orr.w	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e128      	b.n	8006290 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a90      	ldr	r2, [pc, #576]	; (8006298 <HAL_I2S_Init+0x26c>)
 8006056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fc fa1f 	bl	800249c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006074:	f023 030f 	bic.w	r3, r3, #15
 8006078:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2202      	movs	r2, #2
 8006080:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d060      	beq.n	800614c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006092:	2310      	movs	r3, #16
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e001      	b.n	800609c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006098:	2320      	movs	r3, #32
 800609a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d802      	bhi.n	80060aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f001 f9e6 	bl	800747c <HAL_RCCEx_GetPeriphCLKFreq>
 80060b0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ba:	d125      	bne.n	8006108 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	461a      	mov	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	3305      	adds	r3, #5
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	e01f      	b.n	8006126 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006102:	3305      	adds	r3, #5
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e00e      	b.n	8006126 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	461a      	mov	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006122:	3305      	adds	r3, #5
 8006124:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4a5c      	ldr	r2, [pc, #368]	; (800629c <HAL_I2S_Init+0x270>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	08db      	lsrs	r3, r3, #3
 8006130:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	e003      	b.n	8006154 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800614c:	2302      	movs	r3, #2
 800614e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d902      	bls.n	8006160 <HAL_I2S_Init+0x134>
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	2bff      	cmp	r3, #255	; 0xff
 800615e:	d907      	bls.n	8006170 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006164:	f043 0210 	orr.w	r2, r3, #16
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e08f      	b.n	8006290 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	ea42 0103 	orr.w	r1, r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	430a      	orrs	r2, r1
 8006182:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800618e:	f023 030f 	bic.w	r3, r3, #15
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6851      	ldr	r1, [r2, #4]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6892      	ldr	r2, [r2, #8]
 800619a:	4311      	orrs	r1, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	68d2      	ldr	r2, [r2, #12]
 80061a0:	4311      	orrs	r1, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6992      	ldr	r2, [r2, #24]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d161      	bne.n	8006280 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a38      	ldr	r2, [pc, #224]	; (80062a0 <HAL_I2S_Init+0x274>)
 80061c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a37      	ldr	r2, [pc, #220]	; (80062a4 <HAL_I2S_Init+0x278>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_I2S_Init+0x1a4>
 80061cc:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <HAL_I2S_Init+0x27c>)
 80061ce:	e001      	b.n	80061d4 <HAL_I2S_Init+0x1a8>
 80061d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	4932      	ldr	r1, [pc, #200]	; (80062a4 <HAL_I2S_Init+0x278>)
 80061dc:	428a      	cmp	r2, r1
 80061de:	d101      	bne.n	80061e4 <HAL_I2S_Init+0x1b8>
 80061e0:	4a31      	ldr	r2, [pc, #196]	; (80062a8 <HAL_I2S_Init+0x27c>)
 80061e2:	e001      	b.n	80061e8 <HAL_I2S_Init+0x1bc>
 80061e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80061e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061ec:	f023 030f 	bic.w	r3, r3, #15
 80061f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2b      	ldr	r2, [pc, #172]	; (80062a4 <HAL_I2S_Init+0x278>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d101      	bne.n	8006200 <HAL_I2S_Init+0x1d4>
 80061fc:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <HAL_I2S_Init+0x27c>)
 80061fe:	e001      	b.n	8006204 <HAL_I2S_Init+0x1d8>
 8006200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006204:	2202      	movs	r2, #2
 8006206:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a25      	ldr	r2, [pc, #148]	; (80062a4 <HAL_I2S_Init+0x278>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_I2S_Init+0x1ea>
 8006212:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <HAL_I2S_Init+0x27c>)
 8006214:	e001      	b.n	800621a <HAL_I2S_Init+0x1ee>
 8006216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006226:	d003      	beq.n	8006230 <HAL_I2S_Init+0x204>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	e001      	b.n	800623c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006246:	4313      	orrs	r3, r2
 8006248:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006250:	4313      	orrs	r3, r2
 8006252:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800625a:	4313      	orrs	r3, r2
 800625c:	b29a      	uxth	r2, r3
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	4313      	orrs	r3, r2
 8006262:	b29b      	uxth	r3, r3
 8006264:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006268:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a0d      	ldr	r2, [pc, #52]	; (80062a4 <HAL_I2S_Init+0x278>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_I2S_Init+0x24c>
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <HAL_I2S_Init+0x27c>)
 8006276:	e001      	b.n	800627c <HAL_I2S_Init+0x250>
 8006278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800627c:	897a      	ldrh	r2, [r7, #10]
 800627e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	080063a3 	.word	0x080063a3
 800629c:	cccccccd 	.word	0xcccccccd
 80062a0:	080064b9 	.word	0x080064b9
 80062a4:	40003800 	.word	0x40003800
 80062a8:	40003400 	.word	0x40003400

080062ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	881a      	ldrh	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	1c9a      	adds	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10e      	bne.n	800633c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800632c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ffb8 	bl	80062ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	b292      	uxth	r2, r2
 8006358:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10e      	bne.n	800639a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800638a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ff93 	bl	80062c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d13a      	bne.n	8006434 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d109      	bne.n	80063dc <I2S_IRQHandler+0x3a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d102      	bne.n	80063dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff ffb4 	bl	8006344 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d126      	bne.n	8006434 <I2S_IRQHandler+0x92>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d11f      	bne.n	8006434 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006402:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff ff50 	bl	80062d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b03      	cmp	r3, #3
 800643e:	d136      	bne.n	80064ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d109      	bne.n	800645e <I2S_IRQHandler+0xbc>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d102      	bne.n	800645e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff ff45 	bl	80062e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b08      	cmp	r3, #8
 8006466:	d122      	bne.n	80064ae <I2S_IRQHandler+0x10c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b20      	cmp	r3, #32
 8006474:	d11b      	bne.n	80064ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006484:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	f043 0204 	orr.w	r2, r3, #4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff13 	bl	80062d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4aa2      	ldr	r2, [pc, #648]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80064d2:	4ba2      	ldr	r3, [pc, #648]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064d4:	e001      	b.n	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80064d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a9b      	ldr	r2, [pc, #620]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80064f0:	4b9a      	ldr	r3, [pc, #616]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064f2:	e001      	b.n	80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80064f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d004      	beq.n	8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8099 	bne.w	8006642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d107      	bne.n	800652a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f925 	bl	8006774 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d107      	bne.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9c8 	bl	80068d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d13a      	bne.n	80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d035      	beq.n	80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a7e      	ldr	r2, [pc, #504]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006562:	4b7e      	ldr	r3, [pc, #504]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006564:	e001      	b.n	800656a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4979      	ldr	r1, [pc, #484]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006572:	428b      	cmp	r3, r1
 8006574:	d101      	bne.n	800657a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006576:	4b79      	ldr	r3, [pc, #484]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006578:	e001      	b.n	800657e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800657a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800657e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006582:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006592:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	f043 0202 	orr.w	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fe88 	bl	80062d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	f040 80be 	bne.w	800674c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80b8 	beq.w	800674c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a59      	ldr	r2, [pc, #356]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80065f6:	4b59      	ldr	r3, [pc, #356]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065f8:	e001      	b.n	80065fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80065fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4954      	ldr	r1, [pc, #336]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006606:	428b      	cmp	r3, r1
 8006608:	d101      	bne.n	800660e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800660a:	4b54      	ldr	r3, [pc, #336]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800660c:	e001      	b.n	8006612 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800660e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006616:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006618:	2300      	movs	r3, #0
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f043 0204 	orr.w	r2, r3, #4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fe4a 	bl	80062d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006640:	e084      	b.n	800674c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8be 	bl	80067d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d107      	bne.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8fd 	bl	8006870 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d12f      	bne.n	80066e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02a      	beq.n	80066e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006698:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80066a4:	4b2d      	ldr	r3, [pc, #180]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066a6:	e001      	b.n	80066ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80066a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4929      	ldr	r1, [pc, #164]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066b4:	428b      	cmp	r3, r1
 80066b6:	d101      	bne.n	80066bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80066b8:	4b28      	ldr	r3, [pc, #160]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066ba:	e001      	b.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80066bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f043 0202 	orr.w	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fdfa 	bl	80062d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d131      	bne.n	800674e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d02c      	beq.n	800674e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a17      	ldr	r2, [pc, #92]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d101      	bne.n	8006702 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80066fe:	4b17      	ldr	r3, [pc, #92]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006700:	e001      	b.n	8006706 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4912      	ldr	r1, [pc, #72]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800670e:	428b      	cmp	r3, r1
 8006710:	d101      	bne.n	8006716 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006714:	e001      	b.n	800671a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800671a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800671e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800672e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673c:	f043 0204 	orr.w	r2, r3, #4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fdc5 	bl	80062d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800674a:	e000      	b.n	800674e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800674c:	bf00      	nop
}
 800674e:	bf00      	nop
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40003800 	.word	0x40003800
 800675c:	40003400 	.word	0x40003400

08006760 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	1c99      	adds	r1, r3, #2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6251      	str	r1, [r2, #36]	; 0x24
 8006786:	881a      	ldrh	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d113      	bne.n	80067ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ffc9 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	1c99      	adds	r1, r3, #2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6251      	str	r1, [r2, #36]	; 0x24
 80067ea:	8819      	ldrh	r1, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <I2SEx_TxISR_I2SExt+0x90>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <I2SEx_TxISR_I2SExt+0x22>
 80067f6:	4b1d      	ldr	r3, [pc, #116]	; (800686c <I2SEx_TxISR_I2SExt+0x94>)
 80067f8:	e001      	b.n	80067fe <I2SEx_TxISR_I2SExt+0x26>
 80067fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067fe:	460a      	mov	r2, r1
 8006800:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d121      	bne.n	800685e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <I2SEx_TxISR_I2SExt+0x90>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <I2SEx_TxISR_I2SExt+0x50>
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <I2SEx_TxISR_I2SExt+0x94>)
 8006826:	e001      	b.n	800682c <I2SEx_TxISR_I2SExt+0x54>
 8006828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	490d      	ldr	r1, [pc, #52]	; (8006868 <I2SEx_TxISR_I2SExt+0x90>)
 8006834:	428b      	cmp	r3, r1
 8006836:	d101      	bne.n	800683c <I2SEx_TxISR_I2SExt+0x64>
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <I2SEx_TxISR_I2SExt+0x94>)
 800683a:	e001      	b.n	8006840 <I2SEx_TxISR_I2SExt+0x68>
 800683c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff81 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40003800 	.word	0x40003800
 800686c:	40003400 	.word	0x40003400

08006870 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68d8      	ldr	r0, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	1c99      	adds	r1, r3, #2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006888:	b282      	uxth	r2, r0
 800688a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d113      	bne.n	80068cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff ff4a 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a20      	ldr	r2, [pc, #128]	; (8006964 <I2SEx_RxISR_I2SExt+0x90>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <I2SEx_RxISR_I2SExt+0x16>
 80068e6:	4b20      	ldr	r3, [pc, #128]	; (8006968 <I2SEx_RxISR_I2SExt+0x94>)
 80068e8:	e001      	b.n	80068ee <I2SEx_RxISR_I2SExt+0x1a>
 80068ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ee:	68d8      	ldr	r0, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	1c99      	adds	r1, r3, #2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068fa:	b282      	uxth	r2, r0
 80068fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d121      	bne.n	800695a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a12      	ldr	r2, [pc, #72]	; (8006964 <I2SEx_RxISR_I2SExt+0x90>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d101      	bne.n	8006924 <I2SEx_RxISR_I2SExt+0x50>
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <I2SEx_RxISR_I2SExt+0x94>)
 8006922:	e001      	b.n	8006928 <I2SEx_RxISR_I2SExt+0x54>
 8006924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	490d      	ldr	r1, [pc, #52]	; (8006964 <I2SEx_RxISR_I2SExt+0x90>)
 8006930:	428b      	cmp	r3, r1
 8006932:	d101      	bne.n	8006938 <I2SEx_RxISR_I2SExt+0x64>
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <I2SEx_RxISR_I2SExt+0x94>)
 8006936:	e001      	b.n	800693c <I2SEx_RxISR_I2SExt+0x68>
 8006938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800693c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006940:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff03 	bl	8006760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40003800 	.word	0x40003800
 8006968:	40003400 	.word	0x40003400

0800696c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e264      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d075      	beq.n	8006a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800698a:	4ba3      	ldr	r3, [pc, #652]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b04      	cmp	r3, #4
 8006994:	d00c      	beq.n	80069b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006996:	4ba0      	ldr	r3, [pc, #640]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d112      	bne.n	80069c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a2:	4b9d      	ldr	r3, [pc, #628]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	4b99      	ldr	r3, [pc, #612]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05b      	beq.n	8006a74 <HAL_RCC_OscConfig+0x108>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d157      	bne.n	8006a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e23f      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d106      	bne.n	80069e0 <HAL_RCC_OscConfig+0x74>
 80069d2:	4b91      	ldr	r3, [pc, #580]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a90      	ldr	r2, [pc, #576]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e01d      	b.n	8006a1c <HAL_RCC_OscConfig+0xb0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCC_OscConfig+0x98>
 80069ea:	4b8b      	ldr	r3, [pc, #556]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a8a      	ldr	r2, [pc, #552]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b88      	ldr	r3, [pc, #544]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a87      	ldr	r2, [pc, #540]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e00b      	b.n	8006a1c <HAL_RCC_OscConfig+0xb0>
 8006a04:	4b84      	ldr	r3, [pc, #528]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a83      	ldr	r2, [pc, #524]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a80      	ldr	r2, [pc, #512]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a24:	f7fb ffd6 	bl	80029d4 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a2c:	f7fb ffd2 	bl	80029d4 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b64      	cmp	r3, #100	; 0x64
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e204      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	4b76      	ldr	r3, [pc, #472]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0xc0>
 8006a4a:	e014      	b.n	8006a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fb ffc2 	bl	80029d4 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a54:	f7fb ffbe 	bl	80029d4 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e1f0      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a66:	4b6c      	ldr	r3, [pc, #432]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0xe8>
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d063      	beq.n	8006b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a82:	4b65      	ldr	r3, [pc, #404]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a8e:	4b62      	ldr	r3, [pc, #392]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d11c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9a:	4b5f      	ldr	r3, [pc, #380]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d116      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aa6:	4b5c      	ldr	r3, [pc, #368]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_RCC_OscConfig+0x152>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d001      	beq.n	8006abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e1c4      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006abe:	4b56      	ldr	r3, [pc, #344]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4952      	ldr	r1, [pc, #328]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad2:	e03a      	b.n	8006b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006adc:	4b4f      	ldr	r3, [pc, #316]	; (8006c1c <HAL_RCC_OscConfig+0x2b0>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae2:	f7fb ff77 	bl	80029d4 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aea:	f7fb ff73 	bl	80029d4 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e1a5      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afc:	4b46      	ldr	r3, [pc, #280]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b08:	4b43      	ldr	r3, [pc, #268]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4940      	ldr	r1, [pc, #256]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	600b      	str	r3, [r1, #0]
 8006b1c:	e015      	b.n	8006b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b1e:	4b3f      	ldr	r3, [pc, #252]	; (8006c1c <HAL_RCC_OscConfig+0x2b0>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fb ff56 	bl	80029d4 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fb ff52 	bl	80029d4 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e184      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d030      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d016      	beq.n	8006b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b5e:	4b30      	ldr	r3, [pc, #192]	; (8006c20 <HAL_RCC_OscConfig+0x2b4>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fb ff36 	bl	80029d4 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b6c:	f7fb ff32 	bl	80029d4 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e164      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x200>
 8006b8a:	e015      	b.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b8c:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCC_OscConfig+0x2b4>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b92:	f7fb ff1f 	bl	80029d4 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b98:	e008      	b.n	8006bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9a:	f7fb ff1b 	bl	80029d4 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e14d      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bac:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f0      	bne.n	8006b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80a0 	beq.w	8006d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	4a0e      	ldr	r2, [pc, #56]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6413      	str	r3, [r2, #64]	; 0x40
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_RCC_OscConfig+0x2b8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d121      	bne.n	8006c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <HAL_RCC_OscConfig+0x2b8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <HAL_RCC_OscConfig+0x2b8>)
 8006c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c0e:	f7fb fee1 	bl	80029d4 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c14:	e011      	b.n	8006c3a <HAL_RCC_OscConfig+0x2ce>
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	42470000 	.word	0x42470000
 8006c20:	42470e80 	.word	0x42470e80
 8006c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c28:	f7fb fed4 	bl	80029d4 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e106      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b85      	ldr	r3, [pc, #532]	; (8006e50 <HAL_RCC_OscConfig+0x4e4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCC_OscConfig+0x2f0>
 8006c4e:	4b81      	ldr	r3, [pc, #516]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	4a80      	ldr	r2, [pc, #512]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5a:	e01c      	b.n	8006c96 <HAL_RCC_OscConfig+0x32a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b05      	cmp	r3, #5
 8006c62:	d10c      	bne.n	8006c7e <HAL_RCC_OscConfig+0x312>
 8006c64:	4b7b      	ldr	r3, [pc, #492]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	4a7a      	ldr	r2, [pc, #488]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c6a:	f043 0304 	orr.w	r3, r3, #4
 8006c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c70:	4b78      	ldr	r3, [pc, #480]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	4a77      	ldr	r2, [pc, #476]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7c:	e00b      	b.n	8006c96 <HAL_RCC_OscConfig+0x32a>
 8006c7e:	4b75      	ldr	r3, [pc, #468]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	4a74      	ldr	r2, [pc, #464]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8a:	4b72      	ldr	r3, [pc, #456]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a71      	ldr	r2, [pc, #452]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9e:	f7fb fe99 	bl	80029d4 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca6:	f7fb fe95 	bl	80029d4 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e0c5      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	4b65      	ldr	r3, [pc, #404]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x33a>
 8006cc8:	e014      	b.n	8006cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cca:	f7fb fe83 	bl	80029d4 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd0:	e00a      	b.n	8006ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd2:	f7fb fe7f 	bl	80029d4 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e0af      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce8:	4b5a      	ldr	r3, [pc, #360]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ee      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d105      	bne.n	8006d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfa:	4b56      	ldr	r3, [pc, #344]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	4a55      	ldr	r2, [pc, #340]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 809b 	beq.w	8006e46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d10:	4b50      	ldr	r3, [pc, #320]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 030c 	and.w	r3, r3, #12
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d05c      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d141      	bne.n	8006da8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d24:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <HAL_RCC_OscConfig+0x4ec>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2a:	f7fb fe53 	bl	80029d4 <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d32:	f7fb fe4f 	bl	80029d4 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e081      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d44:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	019b      	lsls	r3, r3, #6
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	061b      	lsls	r3, r3, #24
 8006d74:	4937      	ldr	r1, [pc, #220]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <HAL_RCC_OscConfig+0x4ec>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d80:	f7fb fe28 	bl	80029d4 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d88:	f7fb fe24 	bl	80029d4 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e056      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0x41c>
 8006da6:	e04e      	b.n	8006e46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <HAL_RCC_OscConfig+0x4ec>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dae:	f7fb fe11 	bl	80029d4 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db6:	f7fb fe0d 	bl	80029d4 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e03f      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc8:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f0      	bne.n	8006db6 <HAL_RCC_OscConfig+0x44a>
 8006dd4:	e037      	b.n	8006e46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e032      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <HAL_RCC_OscConfig+0x4e8>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d028      	beq.n	8006e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d121      	bne.n	8006e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d11a      	bne.n	8006e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e12:	4013      	ands	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d111      	bne.n	8006e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d107      	bne.n	8006e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40007000 	.word	0x40007000
 8006e54:	40023800 	.word	0x40023800
 8006e58:	42470060 	.word	0x42470060

08006e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0cc      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e70:	4b68      	ldr	r3, [pc, #416]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d90c      	bls.n	8006e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7e:	4b65      	ldr	r3, [pc, #404]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b63      	ldr	r3, [pc, #396]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0b8      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d020      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb0:	4b59      	ldr	r3, [pc, #356]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a58      	ldr	r2, [pc, #352]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ec8:	4b53      	ldr	r3, [pc, #332]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a52      	ldr	r2, [pc, #328]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed4:	4b50      	ldr	r3, [pc, #320]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	494d      	ldr	r1, [pc, #308]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d044      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d119      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e07f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d003      	beq.n	8006f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d107      	bne.n	8006f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e06f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2a:	4b3b      	ldr	r3, [pc, #236]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e067      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f3a:	4b37      	ldr	r3, [pc, #220]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f023 0203 	bic.w	r2, r3, #3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4934      	ldr	r1, [pc, #208]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f4c:	f7fb fd42 	bl	80029d4 <HAL_GetTick>
 8006f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	e00a      	b.n	8006f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f54:	f7fb fd3e 	bl	80029d4 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e04f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6a:	4b2b      	ldr	r3, [pc, #172]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 020c 	and.w	r2, r3, #12
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d1eb      	bne.n	8006f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f7c:	4b25      	ldr	r3, [pc, #148]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d20c      	bcs.n	8006fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_RCC_ClockConfig+0x1b8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e032      	b.n	800700a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4916      	ldr	r1, [pc, #88]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fce:	4b12      	ldr	r3, [pc, #72]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	490e      	ldr	r1, [pc, #56]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fe2:	f000 f821 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	091b      	lsrs	r3, r3, #4
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	490a      	ldr	r1, [pc, #40]	; (800701c <HAL_RCC_ClockConfig+0x1c0>)
 8006ff4:	5ccb      	ldrb	r3, [r1, r3]
 8006ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffa:	4a09      	ldr	r2, [pc, #36]	; (8007020 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1c8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7fb fb70 	bl	80026e8 <HAL_InitTick>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40023c00 	.word	0x40023c00
 8007018:	40023800 	.word	0x40023800
 800701c:	08010f10 	.word	0x08010f10
 8007020:	20000000 	.word	0x20000000
 8007024:	20000004 	.word	0x20000004

08007028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	2300      	movs	r3, #0
 800703a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007040:	4b67      	ldr	r3, [pc, #412]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b08      	cmp	r3, #8
 800704a:	d00d      	beq.n	8007068 <HAL_RCC_GetSysClockFreq+0x40>
 800704c:	2b08      	cmp	r3, #8
 800704e:	f200 80bd 	bhi.w	80071cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_RCC_GetSysClockFreq+0x34>
 8007056:	2b04      	cmp	r3, #4
 8007058:	d003      	beq.n	8007062 <HAL_RCC_GetSysClockFreq+0x3a>
 800705a:	e0b7      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b61      	ldr	r3, [pc, #388]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800705e:	60bb      	str	r3, [r7, #8]
       break;
 8007060:	e0b7      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007062:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007064:	60bb      	str	r3, [r7, #8]
      break;
 8007066:	e0b4      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007068:	4b5d      	ldr	r3, [pc, #372]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007070:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007072:	4b5b      	ldr	r3, [pc, #364]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d04d      	beq.n	800711a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800707e:	4b58      	ldr	r3, [pc, #352]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	099b      	lsrs	r3, r3, #6
 8007084:	461a      	mov	r2, r3
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800708e:	f04f 0100 	mov.w	r1, #0
 8007092:	ea02 0800 	and.w	r8, r2, r0
 8007096:	ea03 0901 	and.w	r9, r3, r1
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	014b      	lsls	r3, r1, #5
 80070a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070ac:	0142      	lsls	r2, r0, #5
 80070ae:	4610      	mov	r0, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	ebb0 0008 	subs.w	r0, r0, r8
 80070b6:	eb61 0109 	sbc.w	r1, r1, r9
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	018b      	lsls	r3, r1, #6
 80070c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070c8:	0182      	lsls	r2, r0, #6
 80070ca:	1a12      	subs	r2, r2, r0
 80070cc:	eb63 0301 	sbc.w	r3, r3, r1
 80070d0:	f04f 0000 	mov.w	r0, #0
 80070d4:	f04f 0100 	mov.w	r1, #0
 80070d8:	00d9      	lsls	r1, r3, #3
 80070da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070de:	00d0      	lsls	r0, r2, #3
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	eb12 0208 	adds.w	r2, r2, r8
 80070e8:	eb43 0309 	adc.w	r3, r3, r9
 80070ec:	f04f 0000 	mov.w	r0, #0
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	0259      	lsls	r1, r3, #9
 80070f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070fa:	0250      	lsls	r0, r2, #9
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	461a      	mov	r2, r3
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f7f9 fd2e 	bl	8000b6c <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4613      	mov	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e04a      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	099b      	lsrs	r3, r3, #6
 8007120:	461a      	mov	r2, r3
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800712a:	f04f 0100 	mov.w	r1, #0
 800712e:	ea02 0400 	and.w	r4, r2, r0
 8007132:	ea03 0501 	and.w	r5, r3, r1
 8007136:	4620      	mov	r0, r4
 8007138:	4629      	mov	r1, r5
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	014b      	lsls	r3, r1, #5
 8007144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007148:	0142      	lsls	r2, r0, #5
 800714a:	4610      	mov	r0, r2
 800714c:	4619      	mov	r1, r3
 800714e:	1b00      	subs	r0, r0, r4
 8007150:	eb61 0105 	sbc.w	r1, r1, r5
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	018b      	lsls	r3, r1, #6
 800715e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007162:	0182      	lsls	r2, r0, #6
 8007164:	1a12      	subs	r2, r2, r0
 8007166:	eb63 0301 	sbc.w	r3, r3, r1
 800716a:	f04f 0000 	mov.w	r0, #0
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	00d9      	lsls	r1, r3, #3
 8007174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007178:	00d0      	lsls	r0, r2, #3
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	1912      	adds	r2, r2, r4
 8007180:	eb45 0303 	adc.w	r3, r5, r3
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	0299      	lsls	r1, r3, #10
 800718e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007192:	0290      	lsls	r0, r2, #10
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4610      	mov	r0, r2
 800719a:	4619      	mov	r1, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	461a      	mov	r2, r3
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	f7f9 fce2 	bl	8000b6c <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4613      	mov	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	3301      	adds	r3, #1
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	60bb      	str	r3, [r7, #8]
      break;
 80071ca:	e002      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071ce:	60bb      	str	r3, [r7, #8]
      break;
 80071d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071d2:	68bb      	ldr	r3, [r7, #8]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80071de:	bf00      	nop
 80071e0:	40023800 	.word	0x40023800
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	007a1200 	.word	0x007a1200

080071ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071f0:	4b03      	ldr	r3, [pc, #12]	; (8007200 <HAL_RCC_GetHCLKFreq+0x14>)
 80071f2:	681b      	ldr	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20000000 	.word	0x20000000

08007204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007208:	f7ff fff0 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	0a9b      	lsrs	r3, r3, #10
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	4903      	ldr	r1, [pc, #12]	; (8007228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40023800 	.word	0x40023800
 8007228:	08010f20 	.word	0x08010f20

0800722c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007230:	f7ff ffdc 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0b5b      	lsrs	r3, r3, #13
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	08010f20 	.word	0x08010f20

08007254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	220f      	movs	r2, #15
 8007262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007264:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0203 	and.w	r2, r3, #3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007270:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <HAL_RCC_GetClockConfig+0x5c>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_RCC_GetClockConfig+0x5c>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <HAL_RCC_GetClockConfig+0x60>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0207 	and.w	r2, r3, #7
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	601a      	str	r2, [r3, #0]
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40023c00 	.word	0x40023c00

080072b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d035      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072e0:	4b62      	ldr	r3, [pc, #392]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072e6:	f7fb fb75 	bl	80029d4 <HAL_GetTick>
 80072ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072ec:	e008      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072ee:	f7fb fb71 	bl	80029d4 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e0b0      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007300:	4b5b      	ldr	r3, [pc, #364]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	019a      	lsls	r2, r3, #6
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	071b      	lsls	r3, r3, #28
 8007318:	4955      	ldr	r1, [pc, #340]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007320:	4b52      	ldr	r3, [pc, #328]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007326:	f7fb fb55 	bl	80029d4 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800732e:	f7fb fb51 	bl	80029d4 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e090      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007340:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0f0      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8083 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	4b44      	ldr	r3, [pc, #272]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	4a43      	ldr	r2, [pc, #268]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007368:	6413      	str	r3, [r2, #64]	; 0x40
 800736a:	4b41      	ldr	r3, [pc, #260]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007376:	4b3f      	ldr	r3, [pc, #252]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a3e      	ldr	r2, [pc, #248]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800737c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007380:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007382:	f7fb fb27 	bl	80029d4 <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007388:	e008      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800738a:	f7fb fb23 	bl	80029d4 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e062      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800739c:	4b35      	ldr	r3, [pc, #212]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f0      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073a8:	4b31      	ldr	r3, [pc, #196]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d02f      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d028      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073c6:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073d0:	4b29      	ldr	r3, [pc, #164]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073d6:	4b28      	ldr	r3, [pc, #160]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073dc:	4a24      	ldr	r2, [pc, #144]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073e2:	4b23      	ldr	r3, [pc, #140]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d114      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073ee:	f7fb faf1 	bl	80029d4 <HAL_GetTick>
 80073f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fb faed 	bl	80029d4 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e02a      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740c:	4b18      	ldr	r3, [pc, #96]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ee      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007424:	d10d      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007426:	4b12      	ldr	r3, [pc, #72]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743a:	490d      	ldr	r1, [pc, #52]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800743c:	4313      	orrs	r3, r2
 800743e:	608b      	str	r3, [r1, #8]
 8007440:	e005      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	4a0a      	ldr	r2, [pc, #40]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007448:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800744c:	6093      	str	r3, [r2, #8]
 800744e:	4b08      	ldr	r3, [pc, #32]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007450:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800745a:	4905      	ldr	r1, [pc, #20]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800745c:	4313      	orrs	r3, r2
 800745e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	42470068 	.word	0x42470068
 8007470:	40023800 	.word	0x40023800
 8007474:	40007000 	.word	0x40007000
 8007478:	42470e40 	.word	0x42470e40

0800747c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d13e      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800749a:	4b23      	ldr	r3, [pc, #140]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d12f      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074b0:	4b1e      	ldr	r3, [pc, #120]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074b2:	617b      	str	r3, [r7, #20]
          break;
 80074b4:	e02f      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074b6:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074c2:	d108      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074cc:	4a18      	ldr	r2, [pc, #96]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	e007      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074de:	4a15      	ldr	r2, [pc, #84]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ec:	099b      	lsrs	r3, r3, #6
 80074ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	fb02 f303 	mul.w	r3, r2, r3
 80074f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80074fa:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007500:	0f1b      	lsrs	r3, r3, #28
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	617b      	str	r3, [r7, #20]
          break;
 800750e:	e002      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
          break;
 8007514:	bf00      	nop
        }
      }
      break;
 8007516:	bf00      	nop
    }
  }
  return frequency;
 8007518:	697b      	ldr	r3, [r7, #20]
}
 800751a:	4618      	mov	r0, r3
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40023800 	.word	0x40023800
 800752c:	00bb8000 	.word	0x00bb8000
 8007530:	007a1200 	.word	0x007a1200
 8007534:	00f42400 	.word	0x00f42400

08007538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e07b      	b.n	8007642 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800755a:	d009      	beq.n	8007570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	61da      	str	r2, [r3, #28]
 8007562:	e005      	b.n	8007570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa ffee 	bl	800256c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f4:	ea42 0103 	orr.w	r1, r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	0c1b      	lsrs	r3, r3, #16
 800760e:	f003 0104 	and.w	r1, r3, #4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	f003 0210 	and.w	r2, r3, #16
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007630:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e041      	b.n	80076e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7fa ffc3 	bl	80025fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f000 fa91 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d001      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e04e      	b.n	800779e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a23      	ldr	r2, [pc, #140]	; (80077ac <HAL_TIM_Base_Start_IT+0xc4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d022      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772a:	d01d      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1f      	ldr	r2, [pc, #124]	; (80077b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d018      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00e      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d009      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x80>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d111      	bne.n	800778c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b06      	cmp	r3, #6
 8007778:	d010      	beq.n	800779c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0201 	orr.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778a:	e007      	b.n	800779c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40010400 	.word	0x40010400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40001800 	.word	0x40001800

080077c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d122      	bne.n	8007824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d11b      	bne.n	8007824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0202 	mvn.w	r2, #2
 80077f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9b2 	bl	8007b74 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9a4 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9b5 	bl	8007b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b04      	cmp	r3, #4
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0204 	mvn.w	r2, #4
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f988 	bl	8007b74 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f97a 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f98b 	bl	8007b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b08      	cmp	r3, #8
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b08      	cmp	r3, #8
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0208 	mvn.w	r2, #8
 800789c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f95e 	bl	8007b74 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f950 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f961 	bl	8007b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0210 	mvn.w	r2, #16
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2208      	movs	r2, #8
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f934 	bl	8007b74 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f926 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f937 	bl	8007b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10e      	bne.n	800794c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	d107      	bne.n	800794c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0201 	mvn.w	r2, #1
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fa f838 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d10e      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d107      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fadc 	bl	8007f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d10e      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8fc 	bl	8007b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d10e      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d107      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0220 	mvn.w	r2, #32
 80079c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 faa6 	bl	8007f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_TIM_ConfigClockSource+0x18>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e0b3      	b.n	8007b58 <HAL_TIM_ConfigClockSource+0x180>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a28:	d03e      	beq.n	8007aa8 <HAL_TIM_ConfigClockSource+0xd0>
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	f200 8087 	bhi.w	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a36:	f000 8085 	beq.w	8007b44 <HAL_TIM_ConfigClockSource+0x16c>
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3e:	d87f      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a40:	2b70      	cmp	r3, #112	; 0x70
 8007a42:	d01a      	beq.n	8007a7a <HAL_TIM_ConfigClockSource+0xa2>
 8007a44:	2b70      	cmp	r3, #112	; 0x70
 8007a46:	d87b      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a48:	2b60      	cmp	r3, #96	; 0x60
 8007a4a:	d050      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0x116>
 8007a4c:	2b60      	cmp	r3, #96	; 0x60
 8007a4e:	d877      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a50:	2b50      	cmp	r3, #80	; 0x50
 8007a52:	d03c      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0xf6>
 8007a54:	2b50      	cmp	r3, #80	; 0x50
 8007a56:	d873      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d058      	beq.n	8007b0e <HAL_TIM_ConfigClockSource+0x136>
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d86f      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a60:	2b30      	cmp	r3, #48	; 0x30
 8007a62:	d064      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x156>
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d86b      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d060      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x156>
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d867      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d05c      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x156>
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d05a      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a78:	e062      	b.n	8007b40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6899      	ldr	r1, [r3, #8]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f000 f9ab 	bl	8007de4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	609a      	str	r2, [r3, #8]
      break;
 8007aa6:	e04e      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	6899      	ldr	r1, [r3, #8]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f000 f994 	bl	8007de4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aca:	609a      	str	r2, [r3, #8]
      break;
 8007acc:	e03b      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	6859      	ldr	r1, [r3, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f000 f908 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2150      	movs	r1, #80	; 0x50
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f961 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007aec:	e02b      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	6859      	ldr	r1, [r3, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f000 f927 	bl	8007d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2160      	movs	r1, #96	; 0x60
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f951 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007b0c:	e01b      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f000 f8e8 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2140      	movs	r1, #64	; 0x40
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f941 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007b2c:	e00b      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f000 f938 	bl	8007dae <TIM_ITRx_SetConfig>
        break;
 8007b3e:	e002      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b40:	bf00      	nop
 8007b42:	e000      	b.n	8007b46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a40      	ldr	r2, [pc, #256]	; (8007cc4 <TIM_Base_SetConfig+0x114>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bce:	d00f      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a3d      	ldr	r2, [pc, #244]	; (8007cc8 <TIM_Base_SetConfig+0x118>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00b      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a3c      	ldr	r2, [pc, #240]	; (8007ccc <TIM_Base_SetConfig+0x11c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d007      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a3b      	ldr	r2, [pc, #236]	; (8007cd0 <TIM_Base_SetConfig+0x120>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_Base_SetConfig+0x40>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a3a      	ldr	r2, [pc, #232]	; (8007cd4 <TIM_Base_SetConfig+0x124>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d108      	bne.n	8007c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2f      	ldr	r2, [pc, #188]	; (8007cc4 <TIM_Base_SetConfig+0x114>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d02b      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c10:	d027      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a2c      	ldr	r2, [pc, #176]	; (8007cc8 <TIM_Base_SetConfig+0x118>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d023      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2b      	ldr	r2, [pc, #172]	; (8007ccc <TIM_Base_SetConfig+0x11c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01f      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <TIM_Base_SetConfig+0x120>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01b      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <TIM_Base_SetConfig+0x124>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d017      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a28      	ldr	r2, [pc, #160]	; (8007cd8 <TIM_Base_SetConfig+0x128>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a27      	ldr	r2, [pc, #156]	; (8007cdc <TIM_Base_SetConfig+0x12c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00f      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <TIM_Base_SetConfig+0x130>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00b      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a25      	ldr	r2, [pc, #148]	; (8007ce4 <TIM_Base_SetConfig+0x134>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a24      	ldr	r2, [pc, #144]	; (8007ce8 <TIM_Base_SetConfig+0x138>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a23      	ldr	r2, [pc, #140]	; (8007cec <TIM_Base_SetConfig+0x13c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d108      	bne.n	8007c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <TIM_Base_SetConfig+0x114>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_Base_SetConfig+0xf8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <TIM_Base_SetConfig+0x124>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d103      	bne.n	8007cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	615a      	str	r2, [r3, #20]
}
 8007cb6:	bf00      	nop
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	40010400 	.word	0x40010400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800
 8007ce4:	40001800 	.word	0x40001800
 8007ce8:	40001c00 	.word	0x40001c00
 8007cec:	40002000 	.word	0x40002000

08007cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 030a 	bic.w	r3, r3, #10
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f023 0210 	bic.w	r2, r3, #16
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	031b      	lsls	r3, r3, #12
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f043 0307 	orr.w	r3, r3, #7
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	609a      	str	r2, [r3, #8]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	609a      	str	r2, [r3, #8]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e05a      	b.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e88:	d01d      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d018      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a18      	ldr	r2, [pc, #96]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a17      	ldr	r2, [pc, #92]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40010400 	.word	0x40010400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40001800 	.word	0x40001800

08007f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e03f      	b.n	8007fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fa fb6c 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	; 0x24
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fcbd 	bl	8008908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695a      	ldr	r2, [r3, #20]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b08a      	sub	sp, #40	; 0x28
 8007fe2:	af02      	add	r7, sp, #8
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d17c      	bne.n	80080f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <HAL_UART_Transmit+0x2c>
 8008004:	88fb      	ldrh	r3, [r7, #6]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e075      	b.n	80080fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_UART_Transmit+0x3e>
 8008018:	2302      	movs	r3, #2
 800801a:	e06e      	b.n	80080fa <HAL_UART_Transmit+0x11c>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2221      	movs	r2, #33	; 0x21
 800802e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008032:	f7fa fccf 	bl	80029d4 <HAL_GetTick>
 8008036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	88fa      	ldrh	r2, [r7, #6]
 800803c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804c:	d108      	bne.n	8008060 <HAL_UART_Transmit+0x82>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d104      	bne.n	8008060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	e003      	b.n	8008068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008070:	e02a      	b.n	80080c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2200      	movs	r2, #0
 800807a:	2180      	movs	r1, #128	; 0x80
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fab9 	bl	80085f4 <UART_WaitOnFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e036      	b.n	80080fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	3302      	adds	r3, #2
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	e007      	b.n	80080ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	781a      	ldrb	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1cf      	bne.n	8008072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2200      	movs	r2, #0
 80080da:	2140      	movs	r1, #64	; 0x40
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 fa89 	bl	80085f4 <UART_WaitOnFlagUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e006      	b.n	80080fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e000      	b.n	80080fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080f8:	2302      	movs	r3, #2
  }
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b08a      	sub	sp, #40	; 0x28
 8008106:	af02      	add	r7, sp, #8
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	603b      	str	r3, [r7, #0]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b20      	cmp	r3, #32
 8008120:	f040 808c 	bne.w	800823c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_UART_Receive+0x2e>
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e084      	b.n	800823e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_UART_Receive+0x40>
 800813e:	2302      	movs	r3, #2
 8008140:	e07d      	b.n	800823e <HAL_UART_Receive+0x13c>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2222      	movs	r2, #34	; 0x22
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800815e:	f7fa fc39 	bl	80029d4 <HAL_GetTick>
 8008162:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	88fa      	ldrh	r2, [r7, #6]
 8008168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008178:	d108      	bne.n	800818c <HAL_UART_Receive+0x8a>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e003      	b.n	8008194 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008190:	2300      	movs	r3, #0
 8008192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800819c:	e043      	b.n	8008226 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2200      	movs	r2, #0
 80081a6:	2120      	movs	r1, #32
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fa23 	bl	80085f4 <UART_WaitOnFlagUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e042      	b.n	800823e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10c      	bne.n	80081d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	3302      	adds	r3, #2
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	e01f      	b.n	8008218 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e0:	d007      	beq.n	80081f2 <HAL_UART_Receive+0xf0>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <HAL_UART_Receive+0xfe>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e008      	b.n	8008212 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820c:	b2da      	uxtb	r2, r3
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3301      	adds	r3, #1
 8008216:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1b6      	bne.n	800819e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	e000      	b.n	800823e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800823c:	2302      	movs	r3, #2
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	; 0x28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10d      	bne.n	800829a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <HAL_UART_IRQHandler+0x52>
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 faa1 	bl	80087da <UART_Receive_IT>
      return;
 8008298:	e17c      	b.n	8008594 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 80b1 	beq.w	8008404 <HAL_UART_IRQHandler+0x1bc>
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d105      	bne.n	80082b8 <HAL_UART_IRQHandler+0x70>
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80a6 	beq.w	8008404 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <HAL_UART_IRQHandler+0x90>
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	f043 0201 	orr.w	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_UART_IRQHandler+0xb0>
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	f043 0202 	orr.w	r2, r3, #2
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <HAL_UART_IRQHandler+0xd0>
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	f043 0204 	orr.w	r2, r3, #4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00f      	beq.n	8008342 <HAL_UART_IRQHandler+0xfa>
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_UART_IRQHandler+0xee>
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f043 0208 	orr.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 811f 	beq.w	800858a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <HAL_UART_IRQHandler+0x11e>
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fa3a 	bl	80087da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008370:	2b40      	cmp	r3, #64	; 0x40
 8008372:	bf0c      	ite	eq
 8008374:	2301      	moveq	r3, #1
 8008376:	2300      	movne	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <HAL_UART_IRQHandler+0x146>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d031      	beq.n	80083f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f97a 	bl	8008688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d123      	bne.n	80083ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695a      	ldr	r2, [r3, #20]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d013      	beq.n	80083e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	4a77      	ldr	r2, [pc, #476]	; (800859c <HAL_UART_IRQHandler+0x354>)
 80083c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fa fc86 	bl	8002cd8 <HAL_DMA_Abort_IT>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e0:	e00e      	b.n	8008400 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8f0 	bl	80085c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e8:	e00a      	b.n	8008400 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8ec 	bl	80085c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f0:	e006      	b.n	8008400 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f8e8 	bl	80085c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083fe:	e0c4      	b.n	800858a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	bf00      	nop
    return;
 8008402:	e0c2      	b.n	800858a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	2b01      	cmp	r3, #1
 800840a:	f040 80a2 	bne.w	8008552 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 809c 	beq.w	8008552 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8096 	beq.w	8008552 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d14f      	bne.n	80084ea <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008454:	8a3b      	ldrh	r3, [r7, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8099 	beq.w	800858e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008460:	8a3a      	ldrh	r2, [r7, #16]
 8008462:	429a      	cmp	r2, r3
 8008464:	f080 8093 	bcs.w	800858e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8a3a      	ldrh	r2, [r7, #16]
 800846c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008478:	d02b      	beq.n	80084d2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008488:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695a      	ldr	r2, [r3, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0210 	bic.w	r2, r2, #16
 80084c6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fa fb93 	bl	8002bf8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f87a 	bl	80085dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80084e8:	e051      	b.n	800858e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d047      	beq.n	8008592 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008502:	8a7b      	ldrh	r3, [r7, #18]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d044      	beq.n	8008592 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008516:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	695a      	ldr	r2, [r3, #20]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0210 	bic.w	r2, r2, #16
 8008544:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008546:	8a7b      	ldrh	r3, [r7, #18]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f846 	bl	80085dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008550:	e01f      	b.n	8008592 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008558:	2b00      	cmp	r3, #0
 800855a:	d008      	beq.n	800856e <HAL_UART_IRQHandler+0x326>
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f8cf 	bl	800870a <UART_Transmit_IT>
    return;
 800856c:	e012      	b.n	8008594 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00d      	beq.n	8008594 <HAL_UART_IRQHandler+0x34c>
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f911 	bl	80087aa <UART_EndTransmit_IT>
    return;
 8008588:	e004      	b.n	8008594 <HAL_UART_IRQHandler+0x34c>
    return;
 800858a:	bf00      	nop
 800858c:	e002      	b.n	8008594 <HAL_UART_IRQHandler+0x34c>
      return;
 800858e:	bf00      	nop
 8008590:	e000      	b.n	8008594 <HAL_UART_IRQHandler+0x34c>
      return;
 8008592:	bf00      	nop
  }
}
 8008594:	3728      	adds	r7, #40	; 0x28
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	080086e3 	.word	0x080086e3

080085a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	4613      	mov	r3, r2
 8008602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008604:	e02c      	b.n	8008660 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860c:	d028      	beq.n	8008660 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <UART_WaitOnFlagUntilTimeout+0x30>
 8008614:	f7fa f9de 	bl	80029d4 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	429a      	cmp	r2, r3
 8008622:	d21d      	bcs.n	8008660 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008632:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695a      	ldr	r2, [r3, #20]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e00f      	b.n	8008680 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4013      	ands	r3, r2
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	429a      	cmp	r2, r3
 800866e:	bf0c      	ite	eq
 8008670:	2301      	moveq	r3, #1
 8008672:	2300      	movne	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	461a      	mov	r2, r3
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	429a      	cmp	r2, r3
 800867c:	d0c3      	beq.n	8008606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800869e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695a      	ldr	r2, [r3, #20]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0201 	bic.w	r2, r2, #1
 80086ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d107      	bne.n	80086c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0210 	bic.w	r2, r2, #16
 80086c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff ff63 	bl	80085c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b21      	cmp	r3, #33	; 0x21
 800871c:	d13e      	bne.n	800879c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008726:	d114      	bne.n	8008752 <UART_Transmit_IT+0x48>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d110      	bne.n	8008752 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008744:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	1c9a      	adds	r2, r3, #2
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	621a      	str	r2, [r3, #32]
 8008750:	e008      	b.n	8008764 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6211      	str	r1, [r2, #32]
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29b      	uxth	r3, r3
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4619      	mov	r1, r3
 8008772:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10f      	bne.n	8008798 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008786:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008796:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e000      	b.n	800879e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800879c:	2302      	movs	r3, #2
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68da      	ldr	r2, [r3, #12]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fee8 	bl	80085a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b22      	cmp	r3, #34	; 0x22
 80087ec:	f040 8087 	bne.w	80088fe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f8:	d117      	bne.n	800882a <UART_Receive_IT+0x50>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d113      	bne.n	800882a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008818:	b29a      	uxth	r2, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	1c9a      	adds	r2, r3, #2
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	629a      	str	r2, [r3, #40]	; 0x28
 8008828:	e026      	b.n	8008878 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008830:	2300      	movs	r3, #0
 8008832:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800883c:	d007      	beq.n	800884e <UART_Receive_IT+0x74>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <UART_Receive_IT+0x82>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	b2da      	uxtb	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	e008      	b.n	800886e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	b2da      	uxtb	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29b      	uxth	r3, r3
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	4619      	mov	r1, r3
 8008886:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008888:	2b00      	cmp	r3, #0
 800888a:	d136      	bne.n	80088fa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0220 	bic.w	r2, r2, #32
 800889a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0201 	bic.w	r2, r2, #1
 80088ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d10e      	bne.n	80088ea <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0210 	bic.w	r2, r2, #16
 80088da:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fe7a 	bl	80085dc <HAL_UARTEx_RxEventCallback>
 80088e8:	e002      	b.n	80088f0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff fe62 	bl	80085b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e002      	b.n	8008900 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e000      	b.n	8008900 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80088fe:	2302      	movs	r3, #2
  }
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	b09f      	sub	sp, #124	; 0x7c
 800890e:	af00      	add	r7, sp, #0
 8008910:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800891c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891e:	68d9      	ldr	r1, [r3, #12]
 8008920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	ea40 0301 	orr.w	r3, r0, r1
 8008928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800892a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	431a      	orrs	r2, r3
 8008934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	431a      	orrs	r2, r3
 800893a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	4313      	orrs	r3, r2
 8008940:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800894c:	f021 010c 	bic.w	r1, r1, #12
 8008950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008956:	430b      	orrs	r3, r1
 8008958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800895a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008966:	6999      	ldr	r1, [r3, #24]
 8008968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	ea40 0301 	orr.w	r3, r0, r1
 8008970:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4bc5      	ldr	r3, [pc, #788]	; (8008c8c <UART_SetConfig+0x384>)
 8008978:	429a      	cmp	r2, r3
 800897a:	d004      	beq.n	8008986 <UART_SetConfig+0x7e>
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4bc3      	ldr	r3, [pc, #780]	; (8008c90 <UART_SetConfig+0x388>)
 8008982:	429a      	cmp	r2, r3
 8008984:	d103      	bne.n	800898e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008986:	f7fe fc51 	bl	800722c <HAL_RCC_GetPCLK2Freq>
 800898a:	6778      	str	r0, [r7, #116]	; 0x74
 800898c:	e002      	b.n	8008994 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800898e:	f7fe fc39 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 8008992:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800899c:	f040 80b6 	bne.w	8008b0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a2:	461c      	mov	r4, r3
 80089a4:	f04f 0500 	mov.w	r5, #0
 80089a8:	4622      	mov	r2, r4
 80089aa:	462b      	mov	r3, r5
 80089ac:	1891      	adds	r1, r2, r2
 80089ae:	6439      	str	r1, [r7, #64]	; 0x40
 80089b0:	415b      	adcs	r3, r3
 80089b2:	647b      	str	r3, [r7, #68]	; 0x44
 80089b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089b8:	1912      	adds	r2, r2, r4
 80089ba:	eb45 0303 	adc.w	r3, r5, r3
 80089be:	f04f 0000 	mov.w	r0, #0
 80089c2:	f04f 0100 	mov.w	r1, #0
 80089c6:	00d9      	lsls	r1, r3, #3
 80089c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089cc:	00d0      	lsls	r0, r2, #3
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	1911      	adds	r1, r2, r4
 80089d4:	6639      	str	r1, [r7, #96]	; 0x60
 80089d6:	416b      	adcs	r3, r5
 80089d8:	667b      	str	r3, [r7, #100]	; 0x64
 80089da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	461a      	mov	r2, r3
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	1891      	adds	r1, r2, r2
 80089e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80089e8:	415b      	adcs	r3, r3
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089f4:	f7f8 f8ba 	bl	8000b6c <__aeabi_uldivmod>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4ba5      	ldr	r3, [pc, #660]	; (8008c94 <UART_SetConfig+0x38c>)
 80089fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	011e      	lsls	r6, r3, #4
 8008a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a08:	461c      	mov	r4, r3
 8008a0a:	f04f 0500 	mov.w	r5, #0
 8008a0e:	4622      	mov	r2, r4
 8008a10:	462b      	mov	r3, r5
 8008a12:	1891      	adds	r1, r2, r2
 8008a14:	6339      	str	r1, [r7, #48]	; 0x30
 8008a16:	415b      	adcs	r3, r3
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a1e:	1912      	adds	r2, r2, r4
 8008a20:	eb45 0303 	adc.w	r3, r5, r3
 8008a24:	f04f 0000 	mov.w	r0, #0
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	00d9      	lsls	r1, r3, #3
 8008a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a32:	00d0      	lsls	r0, r2, #3
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	1911      	adds	r1, r2, r4
 8008a3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a3c:	416b      	adcs	r3, r5
 8008a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	461a      	mov	r2, r3
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	1891      	adds	r1, r2, r2
 8008a4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a5a:	f7f8 f887 	bl	8000b6c <__aeabi_uldivmod>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4b8c      	ldr	r3, [pc, #560]	; (8008c94 <UART_SetConfig+0x38c>)
 8008a64:	fba3 1302 	umull	r1, r3, r3, r2
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	2164      	movs	r1, #100	; 0x64
 8008a6c:	fb01 f303 	mul.w	r3, r1, r3
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	3332      	adds	r3, #50	; 0x32
 8008a76:	4a87      	ldr	r2, [pc, #540]	; (8008c94 <UART_SetConfig+0x38c>)
 8008a78:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7c:	095b      	lsrs	r3, r3, #5
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a84:	441e      	add	r6, r3
 8008a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f04f 0100 	mov.w	r1, #0
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	1894      	adds	r4, r2, r2
 8008a94:	623c      	str	r4, [r7, #32]
 8008a96:	415b      	adcs	r3, r3
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a9e:	1812      	adds	r2, r2, r0
 8008aa0:	eb41 0303 	adc.w	r3, r1, r3
 8008aa4:	f04f 0400 	mov.w	r4, #0
 8008aa8:	f04f 0500 	mov.w	r5, #0
 8008aac:	00dd      	lsls	r5, r3, #3
 8008aae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ab2:	00d4      	lsls	r4, r2, #3
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	1814      	adds	r4, r2, r0
 8008aba:	653c      	str	r4, [r7, #80]	; 0x50
 8008abc:	414b      	adcs	r3, r1
 8008abe:	657b      	str	r3, [r7, #84]	; 0x54
 8008ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	1891      	adds	r1, r2, r2
 8008acc:	61b9      	str	r1, [r7, #24]
 8008ace:	415b      	adcs	r3, r3
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ad6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ada:	f7f8 f847 	bl	8000b6c <__aeabi_uldivmod>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4b6c      	ldr	r3, [pc, #432]	; (8008c94 <UART_SetConfig+0x38c>)
 8008ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae8:	095b      	lsrs	r3, r3, #5
 8008aea:	2164      	movs	r1, #100	; 0x64
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	3332      	adds	r3, #50	; 0x32
 8008af6:	4a67      	ldr	r2, [pc, #412]	; (8008c94 <UART_SetConfig+0x38c>)
 8008af8:	fba2 2303 	umull	r2, r3, r2, r3
 8008afc:	095b      	lsrs	r3, r3, #5
 8008afe:	f003 0207 	and.w	r2, r3, #7
 8008b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4432      	add	r2, r6
 8008b08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b0a:	e0b9      	b.n	8008c80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0e:	461c      	mov	r4, r3
 8008b10:	f04f 0500 	mov.w	r5, #0
 8008b14:	4622      	mov	r2, r4
 8008b16:	462b      	mov	r3, r5
 8008b18:	1891      	adds	r1, r2, r2
 8008b1a:	6139      	str	r1, [r7, #16]
 8008b1c:	415b      	adcs	r3, r3
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b24:	1912      	adds	r2, r2, r4
 8008b26:	eb45 0303 	adc.w	r3, r5, r3
 8008b2a:	f04f 0000 	mov.w	r0, #0
 8008b2e:	f04f 0100 	mov.w	r1, #0
 8008b32:	00d9      	lsls	r1, r3, #3
 8008b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b38:	00d0      	lsls	r0, r2, #3
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	eb12 0804 	adds.w	r8, r2, r4
 8008b42:	eb43 0905 	adc.w	r9, r3, r5
 8008b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f04f 0100 	mov.w	r1, #0
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	008b      	lsls	r3, r1, #2
 8008b5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b5e:	0082      	lsls	r2, r0, #2
 8008b60:	4640      	mov	r0, r8
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f8 f802 	bl	8000b6c <__aeabi_uldivmod>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4b49      	ldr	r3, [pc, #292]	; (8008c94 <UART_SetConfig+0x38c>)
 8008b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	011e      	lsls	r6, r3, #4
 8008b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f04f 0100 	mov.w	r1, #0
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	1894      	adds	r4, r2, r2
 8008b84:	60bc      	str	r4, [r7, #8]
 8008b86:	415b      	adcs	r3, r3
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b8e:	1812      	adds	r2, r2, r0
 8008b90:	eb41 0303 	adc.w	r3, r1, r3
 8008b94:	f04f 0400 	mov.w	r4, #0
 8008b98:	f04f 0500 	mov.w	r5, #0
 8008b9c:	00dd      	lsls	r5, r3, #3
 8008b9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ba2:	00d4      	lsls	r4, r2, #3
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	462b      	mov	r3, r5
 8008ba8:	1814      	adds	r4, r2, r0
 8008baa:	64bc      	str	r4, [r7, #72]	; 0x48
 8008bac:	414b      	adcs	r3, r1
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f04f 0100 	mov.w	r1, #0
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	f04f 0300 	mov.w	r3, #0
 8008bc2:	008b      	lsls	r3, r1, #2
 8008bc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bc8:	0082      	lsls	r2, r0, #2
 8008bca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bce:	f7f7 ffcd 	bl	8000b6c <__aeabi_uldivmod>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4b2f      	ldr	r3, [pc, #188]	; (8008c94 <UART_SetConfig+0x38c>)
 8008bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	2164      	movs	r1, #100	; 0x64
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	3332      	adds	r3, #50	; 0x32
 8008bea:	4a2a      	ldr	r2, [pc, #168]	; (8008c94 <UART_SetConfig+0x38c>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bf6:	441e      	add	r6, r3
 8008bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f04f 0100 	mov.w	r1, #0
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	1894      	adds	r4, r2, r2
 8008c06:	603c      	str	r4, [r7, #0]
 8008c08:	415b      	adcs	r3, r3
 8008c0a:	607b      	str	r3, [r7, #4]
 8008c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c10:	1812      	adds	r2, r2, r0
 8008c12:	eb41 0303 	adc.w	r3, r1, r3
 8008c16:	f04f 0400 	mov.w	r4, #0
 8008c1a:	f04f 0500 	mov.w	r5, #0
 8008c1e:	00dd      	lsls	r5, r3, #3
 8008c20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c24:	00d4      	lsls	r4, r2, #3
 8008c26:	4622      	mov	r2, r4
 8008c28:	462b      	mov	r3, r5
 8008c2a:	eb12 0a00 	adds.w	sl, r2, r0
 8008c2e:	eb43 0b01 	adc.w	fp, r3, r1
 8008c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f04f 0100 	mov.w	r1, #0
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	008b      	lsls	r3, r1, #2
 8008c46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c4a:	0082      	lsls	r2, r0, #2
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	4659      	mov	r1, fp
 8008c50:	f7f7 ff8c 	bl	8000b6c <__aeabi_uldivmod>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <UART_SetConfig+0x38c>)
 8008c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	2164      	movs	r1, #100	; 0x64
 8008c62:	fb01 f303 	mul.w	r3, r1, r3
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	3332      	adds	r3, #50	; 0x32
 8008c6c:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <UART_SetConfig+0x38c>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	f003 020f 	and.w	r2, r3, #15
 8008c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4432      	add	r2, r6
 8008c7e:	609a      	str	r2, [r3, #8]
}
 8008c80:	bf00      	nop
 8008c82:	377c      	adds	r7, #124	; 0x7c
 8008c84:	46bd      	mov	sp, r7
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	bf00      	nop
 8008c8c:	40011000 	.word	0x40011000
 8008c90:	40011400 	.word	0x40011400
 8008c94:	51eb851f 	.word	0x51eb851f

08008c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c98:	b084      	sub	sp, #16
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	f107 001c 	add.w	r0, r7, #28
 8008ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d122      	bne.n	8008cf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d105      	bne.n	8008cea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f94a 	bl	8008f84 <USB_CoreReset>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e01a      	b.n	8008d2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f93e 	bl	8008f84 <USB_CoreReset>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d1e:	e005      	b.n	8008d2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d10b      	bne.n	8008d4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f043 0206 	orr.w	r2, r3, #6
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f043 0220 	orr.w	r2, r3, #32
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d56:	b004      	add	sp, #16
 8008d58:	4770      	bx	lr

08008d5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f043 0201 	orr.w	r2, r3, #1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f023 0201 	bic.w	r2, r3, #1
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d106      	bne.n	8008dca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60da      	str	r2, [r3, #12]
 8008dc8:	e00b      	b.n	8008de2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d106      	bne.n	8008dde <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]
 8008ddc:	e001      	b.n	8008de2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e003      	b.n	8008dea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008de2:	2032      	movs	r0, #50	; 0x32
 8008de4:	f7f9 fe02 	bl	80029ec <HAL_Delay>

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	019b      	lsls	r3, r3, #6
 8008e06:	f043 0220 	orr.w	r2, r3, #32
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3301      	adds	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a09      	ldr	r2, [pc, #36]	; (8008e3c <USB_FlushTxFifo+0x48>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d901      	bls.n	8008e20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e006      	b.n	8008e2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	d0f0      	beq.n	8008e0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	00030d40 	.word	0x00030d40

08008e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <USB_FlushRxFifo+0x40>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d901      	bls.n	8008e64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e006      	b.n	8008e72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b10      	cmp	r3, #16
 8008e6e:	d0f0      	beq.n	8008e52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	00030d40 	.word	0x00030d40

08008e84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b089      	sub	sp, #36	; 0x24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	461a      	mov	r2, r3
 8008e92:	460b      	mov	r3, r1
 8008e94:	71fb      	strb	r3, [r7, #7]
 8008e96:	4613      	mov	r3, r2
 8008e98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d11a      	bne.n	8008ee0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008eaa:	88bb      	ldrh	r3, [r7, #4]
 8008eac:	3303      	adds	r3, #3
 8008eae:	089b      	lsrs	r3, r3, #2
 8008eb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	e00f      	b.n	8008ed8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	031a      	lsls	r2, r3, #12
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d3eb      	bcc.n	8008eb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3724      	adds	r7, #36	; 0x24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b089      	sub	sp, #36	; 0x24
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008f04:	88fb      	ldrh	r3, [r7, #6]
 8008f06:	3303      	adds	r3, #3
 8008f08:	089b      	lsrs	r3, r3, #2
 8008f0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	e00b      	b.n	8008f2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	3304      	adds	r3, #4
 8008f22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	3301      	adds	r3, #1
 8008f28:	61bb      	str	r3, [r7, #24]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d3ef      	bcc.n	8008f12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008f32:	69fb      	ldr	r3, [r7, #28]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3724      	adds	r7, #36	; 0x24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	f003 0301 	and.w	r3, r3, #1
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <USB_CoreReset+0x64>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d901      	bls.n	8008fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e01b      	b.n	8008fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	daf2      	bge.n	8008f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f043 0201 	orr.w	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a09      	ldr	r2, [pc, #36]	; (8008fe8 <USB_CoreReset+0x64>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d901      	bls.n	8008fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e006      	b.n	8008fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d0f0      	beq.n	8008fba <USB_CoreReset+0x36>

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	00030d40 	.word	0x00030d40

08008fec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fec:	b084      	sub	sp, #16
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	f107 001c 	add.w	r0, r7, #28
 8008ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009008:	461a      	mov	r2, r3
 800900a:	2300      	movs	r3, #0
 800900c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903a:	2b00      	cmp	r3, #0
 800903c:	d018      	beq.n	8009070 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	2b01      	cmp	r3, #1
 8009042:	d10a      	bne.n	800905a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009052:	f043 0304 	orr.w	r3, r3, #4
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e014      	b.n	8009084 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009068:	f023 0304 	bic.w	r3, r3, #4
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	e009      	b.n	8009084 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800907e:	f023 0304 	bic.w	r3, r3, #4
 8009082:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009084:	2110      	movs	r1, #16
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff feb4 	bl	8008df4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff fed7 	bl	8008e40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e015      	b.n	80090c4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a4:	461a      	mov	r2, r3
 80090a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b8:	461a      	mov	r2, r3
 80090ba:	2300      	movs	r3, #0
 80090bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3301      	adds	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d3e5      	bcc.n	8009098 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80090cc:	2101      	movs	r1, #1
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f8ac 	bl	800922c <USB_DriveVbus>

  HAL_Delay(200U);
 80090d4:	20c8      	movs	r0, #200	; 0xc8
 80090d6:	f7f9 fc89 	bl	80029ec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090e6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00b      	beq.n	800910c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a14      	ldr	r2, [pc, #80]	; (8009150 <USB_HostInit+0x164>)
 8009100:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a13      	ldr	r2, [pc, #76]	; (8009154 <USB_HostInit+0x168>)
 8009106:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800910a:	e009      	b.n	8009120 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2280      	movs	r2, #128	; 0x80
 8009110:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a10      	ldr	r2, [pc, #64]	; (8009158 <USB_HostInit+0x16c>)
 8009116:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a10      	ldr	r2, [pc, #64]	; (800915c <USB_HostInit+0x170>)
 800911c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f043 0210 	orr.w	r2, r3, #16
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699a      	ldr	r2, [r3, #24]
 8009136:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <USB_HostInit+0x174>)
 8009138:	4313      	orrs	r3, r2
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800914a:	b004      	add	sp, #16
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	01000200 	.word	0x01000200
 8009154:	00e00300 	.word	0x00e00300
 8009158:	00600080 	.word	0x00600080
 800915c:	004000e0 	.word	0x004000e0
 8009160:	a3200008 	.word	0xa3200008

08009164 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	68f9      	ldr	r1, [r7, #12]
 8009198:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800919c:	4313      	orrs	r3, r2
 800919e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d107      	bne.n	80091b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ac:	461a      	mov	r2, r3
 80091ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091b2:	6053      	str	r3, [r2, #4]
 80091b4:	e009      	b.n	80091ca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d106      	bne.n	80091ca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c2:	461a      	mov	r2, r3
 80091c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80091c8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80091f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009206:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009208:	2064      	movs	r0, #100	; 0x64
 800920a:	f7f9 fbef 	bl	80029ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800921c:	200a      	movs	r0, #10
 800921e:	f7f9 fbe5 	bl	80029ec <HAL_Delay>

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009250:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d109      	bne.n	8009270 <USB_DriveVbus+0x44>
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d106      	bne.n	8009270 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800926a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800926e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927a:	d109      	bne.n	8009290 <USB_DriveVbus+0x64>
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800928a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800929e:	b480      	push	{r7}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	0c5b      	lsrs	r3, r3, #17
 80092bc:	f003 0303 	and.w	r3, r3, #3
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	b29b      	uxth	r3, r3
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	4603      	mov	r3, r0
 8009300:	70fb      	strb	r3, [r7, #3]
 8009302:	460b      	mov	r3, r1
 8009304:	70bb      	strb	r3, [r7, #2]
 8009306:	4613      	mov	r3, r2
 8009308:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	461a      	mov	r2, r3
 8009320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009324:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009326:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800932a:	2b03      	cmp	r3, #3
 800932c:	d87e      	bhi.n	800942c <USB_HC_Init+0x13c>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <USB_HC_Init+0x44>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009345 	.word	0x08009345
 8009338:	080093ef 	.word	0x080093ef
 800933c:	08009345 	.word	0x08009345
 8009340:	080093b1 	.word	0x080093b1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	4413      	add	r3, r2
 800934c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009350:	461a      	mov	r2, r3
 8009352:	f240 439d 	movw	r3, #1181	; 0x49d
 8009356:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009358:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800935c:	2b00      	cmp	r3, #0
 800935e:	da10      	bge.n	8009382 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	4413      	add	r3, r2
 8009368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	78fa      	ldrb	r2, [r7, #3]
 8009370:	0151      	lsls	r1, r2, #5
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	440a      	add	r2, r1
 8009376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800937a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800937e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009380:	e057      	b.n	8009432 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938a:	2b00      	cmp	r3, #0
 800938c:	d051      	beq.n	8009432 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	4413      	add	r3, r2
 8009396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80093ac:	60d3      	str	r3, [r2, #12]
      break;
 80093ae:	e040      	b.n	8009432 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093bc:	461a      	mov	r2, r3
 80093be:	f240 639d 	movw	r3, #1693	; 0x69d
 80093c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	da34      	bge.n	8009436 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	78fa      	ldrb	r2, [r7, #3]
 80093dc:	0151      	lsls	r1, r2, #5
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	440a      	add	r2, r1
 80093e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ea:	60d3      	str	r3, [r2, #12]
      }

      break;
 80093ec:	e023      	b.n	8009436 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fa:	461a      	mov	r2, r3
 80093fc:	f240 2325 	movw	r3, #549	; 0x225
 8009400:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009402:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009406:	2b00      	cmp	r3, #0
 8009408:	da17      	bge.n	800943a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	4413      	add	r3, r2
 8009412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	78fa      	ldrb	r2, [r7, #3]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	440a      	add	r2, r1
 8009420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009424:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009428:	60d3      	str	r3, [r2, #12]
      }
      break;
 800942a:	e006      	b.n	800943a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	77fb      	strb	r3, [r7, #31]
      break;
 8009430:	e004      	b.n	800943c <USB_HC_Init+0x14c>
      break;
 8009432:	bf00      	nop
 8009434:	e002      	b.n	800943c <USB_HC_Init+0x14c>
      break;
 8009436:	bf00      	nop
 8009438:	e000      	b.n	800943c <USB_HC_Init+0x14c>
      break;
 800943a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009442:	699a      	ldr	r2, [r3, #24]
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	2101      	movs	r1, #1
 800944c:	fa01 f303 	lsl.w	r3, r1, r3
 8009450:	6939      	ldr	r1, [r7, #16]
 8009452:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009456:	4313      	orrs	r3, r2
 8009458:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009466:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800946a:	2b00      	cmp	r3, #0
 800946c:	da03      	bge.n	8009476 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800946e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009472:	61bb      	str	r3, [r7, #24]
 8009474:	e001      	b.n	800947a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff ff0f 	bl	800929e <USB_GetHostSpeed>
 8009480:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009482:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009486:	2b02      	cmp	r3, #2
 8009488:	d106      	bne.n	8009498 <USB_HC_Init+0x1a8>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b02      	cmp	r3, #2
 800948e:	d003      	beq.n	8009498 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	e001      	b.n	800949c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800949c:	787b      	ldrb	r3, [r7, #1]
 800949e:	059b      	lsls	r3, r3, #22
 80094a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094a4:	78bb      	ldrb	r3, [r7, #2]
 80094a6:	02db      	lsls	r3, r3, #11
 80094a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094b2:	049b      	lsls	r3, r3, #18
 80094b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	0159      	lsls	r1, r3, #5
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	440b      	add	r3, r1
 80094ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094d8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80094da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d10f      	bne.n	8009502 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009500:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009502:	7ffb      	ldrb	r3, [r7, #31]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3720      	adds	r7, #32
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08c      	sub	sp, #48	; 0x30
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009528:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009532:	2b00      	cmp	r3, #0
 8009534:	d02d      	beq.n	8009592 <USB_HC_StartXfer+0x86>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	791b      	ldrb	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d129      	bne.n	8009592 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d117      	bne.n	8009574 <USB_HC_StartXfer+0x68>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	79db      	ldrb	r3, [r3, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <USB_HC_StartXfer+0x48>
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	79db      	ldrb	r3, [r3, #7]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d10f      	bne.n	8009574 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	6a3a      	ldr	r2, [r7, #32]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009572:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <USB_HC_StartXfer+0x86>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	795b      	ldrb	r3, [r3, #5]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d107      	bne.n	8009592 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	4619      	mov	r1, r3
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fa2f 	bl	80099ec <USB_DoPing>
      return HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	e0f8      	b.n	8009784 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d018      	beq.n	80095cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	8912      	ldrh	r2, [r2, #8]
 80095a2:	4413      	add	r3, r2
 80095a4:	3b01      	subs	r3, #1
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	8912      	ldrh	r2, [r2, #8]
 80095aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80095b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095b2:	8b7b      	ldrh	r3, [r7, #26]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d90b      	bls.n	80095d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80095b8:	8b7b      	ldrh	r3, [r7, #26]
 80095ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	8912      	ldrh	r2, [r2, #8]
 80095c2:	fb02 f203 	mul.w	r2, r2, r3
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	611a      	str	r2, [r3, #16]
 80095ca:	e001      	b.n	80095d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80095cc:	2301      	movs	r3, #1
 80095ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	78db      	ldrb	r3, [r3, #3]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	8912      	ldrh	r2, [r2, #8]
 80095de:	fb02 f203 	mul.w	r2, r2, r3
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	611a      	str	r2, [r3, #16]
 80095e6:	e003      	b.n	80095f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	695a      	ldr	r2, [r3, #20]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095fa:	04d9      	lsls	r1, r3, #19
 80095fc:	4b63      	ldr	r3, [pc, #396]	; (800978c <USB_HC_StartXfer+0x280>)
 80095fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009600:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	7a9b      	ldrb	r3, [r3, #10]
 8009606:	075b      	lsls	r3, r3, #29
 8009608:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800960c:	69f9      	ldr	r1, [r7, #28]
 800960e:	0148      	lsls	r0, r1, #5
 8009610:	6a39      	ldr	r1, [r7, #32]
 8009612:	4401      	add	r1, r0
 8009614:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009618:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800961a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	68d9      	ldr	r1, [r3, #12]
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009632:	460a      	mov	r2, r1
 8009634:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	bf0c      	ite	eq
 8009646:	2301      	moveq	r3, #1
 8009648:	2300      	movne	r3, #0
 800964a:	b2db      	uxtb	r3, r3
 800964c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	4413      	add	r3, r2
 8009656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	0151      	lsls	r1, r2, #5
 8009660:	6a3a      	ldr	r2, [r7, #32]
 8009662:	440a      	add	r2, r1
 8009664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009668:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800966c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	4413      	add	r3, r2
 8009676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	7e7b      	ldrb	r3, [r7, #25]
 800967e:	075b      	lsls	r3, r3, #29
 8009680:	69f9      	ldr	r1, [r7, #28]
 8009682:	0148      	lsls	r0, r1, #5
 8009684:	6a39      	ldr	r1, [r7, #32]
 8009686:	4401      	add	r1, r0
 8009688:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800968c:	4313      	orrs	r3, r2
 800968e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	4413      	add	r3, r2
 8009698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	78db      	ldrb	r3, [r3, #3]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	e003      	b.n	80096c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d6:	461a      	mov	r2, r3
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	e04e      	b.n	8009784 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	78db      	ldrb	r3, [r3, #3]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d149      	bne.n	8009782 <USB_HC_StartXfer+0x276>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d045      	beq.n	8009782 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	79db      	ldrb	r3, [r3, #7]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d830      	bhi.n	8009760 <USB_HC_StartXfer+0x254>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <USB_HC_StartXfer+0x1f8>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	08009715 	.word	0x08009715
 8009708:	08009739 	.word	0x08009739
 800970c:	08009715 	.word	0x08009715
 8009710:	08009739 	.word	0x08009739
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	3303      	adds	r3, #3
 800971a:	089b      	lsrs	r3, r3, #2
 800971c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800971e:	8afa      	ldrh	r2, [r7, #22]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	b29b      	uxth	r3, r3
 8009726:	429a      	cmp	r2, r3
 8009728:	d91c      	bls.n	8009764 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	f043 0220 	orr.w	r2, r3, #32
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	619a      	str	r2, [r3, #24]
        }
        break;
 8009736:	e015      	b.n	8009764 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	3303      	adds	r3, #3
 800973e:	089b      	lsrs	r3, r3, #2
 8009740:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009742:	8afa      	ldrh	r2, [r7, #22]
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	b29b      	uxth	r3, r3
 800974e:	429a      	cmp	r2, r3
 8009750:	d90a      	bls.n	8009768 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	619a      	str	r2, [r3, #24]
        }
        break;
 800975e:	e003      	b.n	8009768 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <USB_HC_StartXfer+0x25e>
        break;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <USB_HC_StartXfer+0x25e>
        break;
 8009768:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	68d9      	ldr	r1, [r3, #12]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	785a      	ldrb	r2, [r3, #1]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	b29b      	uxth	r3, r3
 8009778:	2000      	movs	r0, #0
 800977a:	9000      	str	r0, [sp, #0]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff fb81 	bl	8008e84 <USB_WritePacket>
  }

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3728      	adds	r7, #40	; 0x28
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	1ff80000 	.word	0x1ff80000

08009790 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	b29b      	uxth	r3, r3
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b089      	sub	sp, #36	; 0x24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	0c9b      	lsrs	r3, r3, #18
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	0fdb      	lsrs	r3, r3, #31
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b20      	cmp	r3, #32
 8009800:	d104      	bne.n	800980c <USB_HC_Halt+0x5a>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	e0e8      	b.n	80099de <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <USB_HC_Halt+0x66>
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b02      	cmp	r3, #2
 8009816:	d173      	bne.n	8009900 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	4413      	add	r3, r2
 8009820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	440a      	add	r2, r1
 800982e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009836:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 80cb 	bne.w	80099dc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d143      	bne.n	80098da <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	4413      	add	r3, r2
 800985a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	0151      	lsls	r1, r2, #5
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	440a      	add	r2, r1
 8009868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800986c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009870:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4413      	add	r3, r2
 800987a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	440a      	add	r2, r1
 8009888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009890:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098b0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	3301      	adds	r3, #1
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098be:	d81d      	bhi.n	80098fc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d6:	d0ec      	beq.n	80098b2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098d8:	e080      	b.n	80099dc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098fa:	e06f      	b.n	80099dc <USB_HC_Halt+0x22a>
            break;
 80098fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098fe:	e06d      	b.n	80099dc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	4413      	add	r3, r2
 8009908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	0151      	lsls	r1, r2, #5
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	440a      	add	r2, r1
 8009916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800991a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800991e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d143      	bne.n	80099b8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	4413      	add	r3, r2
 8009938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	440a      	add	r2, r1
 8009946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800994a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800994e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	4413      	add	r3, r2
 8009958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	0151      	lsls	r1, r2, #5
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	440a      	add	r2, r1
 8009966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800996a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800996e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	4413      	add	r3, r2
 8009978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	0151      	lsls	r1, r2, #5
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	440a      	add	r2, r1
 8009986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800998a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800998e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	3301      	adds	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800999c:	d81d      	bhi.n	80099da <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099b4:	d0ec      	beq.n	8009990 <USB_HC_Halt+0x1de>
 80099b6:	e011      	b.n	80099dc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	0151      	lsls	r1, r2, #5
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	440a      	add	r2, r1
 80099ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	e000      	b.n	80099dc <USB_HC_Halt+0x22a>
          break;
 80099da:	bf00      	nop
    }
  }

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3724      	adds	r7, #36	; 0x24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009a00:	2301      	movs	r3, #1
 8009a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	04da      	lsls	r2, r3, #19
 8009a08:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <USB_DoPing+0x74>)
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	1ff80000 	.word	0x1ff80000

08009a64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff f981 	bl	8008d7c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009a7a:	2110      	movs	r1, #16
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff f9b9 	bl	8008df4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff f9dc 	bl	8008e40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	e01f      	b.n	8009ace <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009aa4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ab4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	3301      	adds	r3, #1
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b0f      	cmp	r3, #15
 8009ad2:	d9dc      	bls.n	8009a8e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	e034      	b.n	8009b44 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009af0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009af8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b0e:	461a      	mov	r2, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	3301      	adds	r3, #1
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b20:	d80c      	bhi.n	8009b3c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b38:	d0ec      	beq.n	8009b14 <USB_StopHost+0xb0>
 8009b3a:	e000      	b.n	8009b3e <USB_StopHost+0xda>
        break;
 8009b3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3301      	adds	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b0f      	cmp	r3, #15
 8009b48:	d9c7      	bls.n	8009ada <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b50:	461a      	mov	r2, r3
 8009b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b5e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff f8fa 	bl	8008d5a <USB_EnableGlobalInt>

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b089      	sub	sp, #36	; 0x24
 8009b74:	af04      	add	r7, sp, #16
 8009b76:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009b78:	2301      	movs	r3, #1
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fcb2 	bl	800a4e8 <USBH_FindInterface>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	2bff      	cmp	r3, #255	; 0xff
 8009b8c:	d002      	beq.n	8009b94 <USBH_CDC_InterfaceInit+0x24>
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d901      	bls.n	8009b98 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b94:	2302      	movs	r3, #2
 8009b96:	e13d      	b.n	8009e14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc87 	bl	800a4b0 <USBH_SelectInterface>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009bac:	2302      	movs	r3, #2
 8009bae:	e131      	b.n	8009e14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009bb6:	2050      	movs	r0, #80	; 0x50
 8009bb8:	f005 fbd4 	bl	800f364 <malloc>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e11f      	b.n	8009e14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009bd4:	2250      	movs	r2, #80	; 0x50
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f005 fbe1 	bl	800f3a0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	211a      	movs	r1, #26
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	b25b      	sxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da15      	bge.n	8009c22 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	211a      	movs	r1, #26
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	211a      	movs	r1, #26
 8009c12:	fb01 f303 	mul.w	r3, r1, r3
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c1c:	881a      	ldrh	r2, [r3, #0]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f002 f88c 	bl	800bd46 <USBH_AllocPipe>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	461a      	mov	r2, r3
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	7819      	ldrb	r1, [r3, #0]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	7858      	ldrb	r0, [r3, #1]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	8952      	ldrh	r2, [r2, #10]
 8009c4e:	9202      	str	r2, [sp, #8]
 8009c50:	2203      	movs	r2, #3
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4623      	mov	r3, r4
 8009c58:	4602      	mov	r2, r0
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f002 f844 	bl	800bce8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2200      	movs	r2, #0
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f005 facd 	bl	800f208 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2200      	movs	r2, #0
 8009c72:	210a      	movs	r1, #10
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fc37 	bl	800a4e8 <USBH_FindInterface>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	2bff      	cmp	r3, #255	; 0xff
 8009c82:	d002      	beq.n	8009c8a <USBH_CDC_InterfaceInit+0x11a>
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d901      	bls.n	8009c8e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e0c2      	b.n	8009e14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	211a      	movs	r1, #26
 8009c94:	fb01 f303 	mul.w	r3, r1, r3
 8009c98:	4413      	add	r3, r2
 8009c9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	da16      	bge.n	8009cd4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	211a      	movs	r1, #26
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cb6:	781a      	ldrb	r2, [r3, #0]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	211a      	movs	r1, #26
 8009cc2:	fb01 f303 	mul.w	r3, r1, r3
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	835a      	strh	r2, [r3, #26]
 8009cd2:	e015      	b.n	8009d00 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	211a      	movs	r1, #26
 8009cda:	fb01 f303 	mul.w	r3, r1, r3
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	211a      	movs	r1, #26
 8009cf0:	fb01 f303 	mul.w	r3, r1, r3
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009cfa:	881a      	ldrh	r2, [r3, #0]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	211a      	movs	r1, #26
 8009d06:	fb01 f303 	mul.w	r3, r1, r3
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b25b      	sxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da16      	bge.n	8009d46 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	211a      	movs	r1, #26
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	211a      	movs	r1, #26
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d3e:	881a      	ldrh	r2, [r3, #0]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	835a      	strh	r2, [r3, #26]
 8009d44:	e015      	b.n	8009d72 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	211a      	movs	r1, #26
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	4413      	add	r3, r2
 8009d52:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d56:	781a      	ldrb	r2, [r3, #0]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	211a      	movs	r1, #26
 8009d62:	fb01 f303 	mul.w	r3, r1, r3
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d6c:	881a      	ldrh	r2, [r3, #0]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	7b9b      	ldrb	r3, [r3, #14]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 ffe4 	bl	800bd46 <USBH_AllocPipe>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	7bdb      	ldrb	r3, [r3, #15]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 ffda 	bl	800bd46 <USBH_AllocPipe>
 8009d92:	4603      	mov	r3, r0
 8009d94:	461a      	mov	r2, r3
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	7b59      	ldrb	r1, [r3, #13]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	7b98      	ldrb	r0, [r3, #14]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	8b12      	ldrh	r2, [r2, #24]
 8009db2:	9202      	str	r2, [sp, #8]
 8009db4:	2202      	movs	r2, #2
 8009db6:	9201      	str	r2, [sp, #4]
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	4623      	mov	r3, r4
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 ff92 	bl	800bce8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	7b19      	ldrb	r1, [r3, #12]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	7bd8      	ldrb	r0, [r3, #15]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	8b52      	ldrh	r2, [r2, #26]
 8009ddc:	9202      	str	r2, [sp, #8]
 8009dde:	2202      	movs	r2, #2
 8009de0:	9201      	str	r2, [sp, #4]
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	4623      	mov	r3, r4
 8009de6:	4602      	mov	r2, r0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 ff7d 	bl	800bce8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	7b5b      	ldrb	r3, [r3, #13]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f005 fa02 	bl	800f208 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	7b1b      	ldrb	r3, [r3, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f005 f9fb 	bl	800f208 <USBH_LL_SetToggle>

  return USBH_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd90      	pop	{r4, r7, pc}

08009e1c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00e      	beq.n	8009e54 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 ff72 	bl	800bd26 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 ff9d 	bl	800bd88 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	7b1b      	ldrb	r3, [r3, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	7b1b      	ldrb	r3, [r3, #12]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 ff5f 	bl	800bd26 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	7b1b      	ldrb	r3, [r3, #12]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 ff8a 	bl	800bd88 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	7b5b      	ldrb	r3, [r3, #13]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00e      	beq.n	8009ea0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	7b5b      	ldrb	r3, [r3, #13]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 ff4c 	bl	800bd26 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	7b5b      	ldrb	r3, [r3, #13]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 ff77 	bl	800bd88 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f005 fa5d 	bl	800f374 <free>
    phost->pActiveClass->pData = 0U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3340      	adds	r3, #64	; 0x40
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f8b1 	bl	800a04e <GetLineCoding>
 8009eec:	4603      	mov	r3, r0
 8009eee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d105      	bne.n	8009f02 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009efc:	2102      	movs	r1, #2
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009f02:	7afb      	ldrb	r3, [r7, #11]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d877      	bhi.n	800a020 <USBH_CDC_Process+0x114>
 8009f30:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <USBH_CDC_Process+0x2c>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f4d 	.word	0x08009f4d
 8009f3c:	08009f53 	.word	0x08009f53
 8009f40:	08009f83 	.word	0x08009f83
 8009f44:	08009ff7 	.word	0x08009ff7
 8009f48:	0800a005 	.word	0x0800a005
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f50:	e06d      	b.n	800a02e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f897 	bl	800a08c <SetLineCoding>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f70:	e058      	b.n	800a024 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d055      	beq.n	800a024 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009f80:	e050      	b.n	800a024 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	3340      	adds	r3, #64	; 0x40
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f860 	bl	800a04e <GetLineCoding>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d126      	bne.n	8009fe6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009faa:	791b      	ldrb	r3, [r3, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d13b      	bne.n	800a028 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d133      	bne.n	800a028 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d12b      	bne.n	800a028 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d124      	bne.n	800a028 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f982 	bl	800a2e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009fe4:	e020      	b.n	800a028 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d01d      	beq.n	800a028 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2204      	movs	r2, #4
 8009ff0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ff4:	e018      	b.n	800a028 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f867 	bl	800a0ca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f8f6 	bl	800a1ee <CDC_ProcessReception>
      break;
 800a002:	e014      	b.n	800a02e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a004:	2100      	movs	r1, #0
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f94d 	bl	800b2a6 <USBH_ClrFeature>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a01e:	e005      	b.n	800a02c <USBH_CDC_Process+0x120>

    default:
      break;
 800a020:	bf00      	nop
 800a022:	e004      	b.n	800a02e <USBH_CDC_Process+0x122>
      break;
 800a024:	bf00      	nop
 800a026:	e002      	b.n	800a02e <USBH_CDC_Process+0x122>
      break;
 800a028:	bf00      	nop
 800a02a:	e000      	b.n	800a02e <USBH_CDC_Process+0x122>
      break;
 800a02c:	bf00      	nop

  }

  return status;
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	22a1      	movs	r2, #161	; 0xa1
 800a05c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2221      	movs	r2, #33	; 0x21
 800a062:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2207      	movs	r2, #7
 800a074:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2207      	movs	r2, #7
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 faf2 	bl	800b666 <USBH_CtlReq>
 800a082:	4603      	mov	r3, r0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2221      	movs	r2, #33	; 0x21
 800a09a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2207      	movs	r2, #7
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 fad3 	bl	800b666 <USBH_CtlReq>
 800a0c0:	4603      	mov	r3, r0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b086      	sub	sp, #24
 800a0ce:	af02      	add	r7, sp, #8
 800a0d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d002      	beq.n	800a0f0 <CDC_ProcessTransmission+0x26>
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d023      	beq.n	800a136 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a0ee:	e07a      	b.n	800a1e6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	8b12      	ldrh	r2, [r2, #24]
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d90b      	bls.n	800a114 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	69d9      	ldr	r1, [r3, #28]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8b1a      	ldrh	r2, [r3, #24]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	7b5b      	ldrb	r3, [r3, #13]
 800a108:	2001      	movs	r0, #1
 800a10a:	9000      	str	r0, [sp, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fda8 	bl	800bc62 <USBH_BulkSendData>
 800a112:	e00b      	b.n	800a12c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	7b5b      	ldrb	r3, [r3, #13]
 800a122:	2001      	movs	r0, #1
 800a124:	9000      	str	r0, [sp, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 fd9b 	bl	800bc62 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a134:	e057      	b.n	800a1e6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	7b5b      	ldrb	r3, [r3, #13]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f005 f839 	bl	800f1b4 <USBH_LL_GetURBState>
 800a142:	4603      	mov	r3, r0
 800a144:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a146:	7afb      	ldrb	r3, [r7, #11]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d136      	bne.n	800a1ba <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	8b12      	ldrh	r2, [r2, #24]
 800a154:	4293      	cmp	r3, r2
 800a156:	d90e      	bls.n	800a176 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	8b12      	ldrh	r2, [r2, #24]
 800a160:	1a9a      	subs	r2, r3, r2
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	69db      	ldr	r3, [r3, #28]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	8b12      	ldrh	r2, [r2, #24]
 800a16e:	441a      	add	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	61da      	str	r2, [r3, #28]
 800a174:	e002      	b.n	800a17c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	2b00      	cmp	r3, #0
 800a182:	d004      	beq.n	800a18e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a18c:	e006      	b.n	800a19c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f892 	bl	800a2c0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2204      	movs	r2, #4
 800a1a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f001 ffd8 	bl	800c168 <osMessageQueuePut>
      break;
 800a1b8:	e014      	b.n	800a1e4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d111      	bne.n	800a1e4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1dc:	2300      	movs	r3, #0
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f001 ffc2 	bl	800c168 <osMessageQueuePut>
      break;
 800a1e4:	bf00      	nop
  }
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a200:	2300      	movs	r3, #0
 800a202:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d002      	beq.n	800a214 <CDC_ProcessReception+0x26>
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d00e      	beq.n	800a230 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a212:	e051      	b.n	800a2b8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	6a19      	ldr	r1, [r3, #32]
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	8b5a      	ldrh	r2, [r3, #26]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	7b1b      	ldrb	r3, [r3, #12]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 fd43 	bl	800bcac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2204      	movs	r2, #4
 800a22a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a22e:	e043      	b.n	800a2b8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	7b1b      	ldrb	r3, [r3, #12]
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f004 ffbc 	bl	800f1b4 <USBH_LL_GetURBState>
 800a23c:	4603      	mov	r3, r0
 800a23e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a240:	7cfb      	ldrb	r3, [r7, #19]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d137      	bne.n	800a2b6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	7b1b      	ldrb	r3, [r3, #12]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f004 ff1f 	bl	800f090 <USBH_LL_GetLastXferSize>
 800a252:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d016      	beq.n	800a28c <CDC_ProcessReception+0x9e>
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	8b5b      	ldrh	r3, [r3, #26]
 800a262:	461a      	mov	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4293      	cmp	r3, r2
 800a268:	d910      	bls.n	800a28c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	1ad2      	subs	r2, r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6a1a      	ldr	r2, [r3, #32]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	441a      	add	r2, r3
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2203      	movs	r2, #3
 800a286:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a28a:	e006      	b.n	800a29a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f81d 	bl	800a2d4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2204      	movs	r2, #4
 800a29e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f001 ff59 	bl	800c168 <osMessageQueuePut>
      break;
 800a2b6:	bf00      	nop
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a310:	2302      	movs	r3, #2
 800a312:	e044      	b.n	800a39e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	79fa      	ldrb	r2, [r7, #7]
 800a318:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 f841 	bl	800a3b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d003      	beq.n	800a360 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a360:	2200      	movs	r2, #0
 800a362:	2104      	movs	r1, #4
 800a364:	2010      	movs	r0, #16
 800a366:	f001 fe8c 	bl	800c082 <osMessageQueueNew>
 800a36a:	4602      	mov	r2, r0
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a372:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <USBH_Init+0xac>)
 800a374:	4a0d      	ldr	r2, [pc, #52]	; (800a3ac <USBH_Init+0xb0>)
 800a376:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a378:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <USBH_Init+0xac>)
 800a37a:	2280      	movs	r2, #128	; 0x80
 800a37c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a37e:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <USBH_Init+0xac>)
 800a380:	2218      	movs	r2, #24
 800a382:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a384:	4a08      	ldr	r2, [pc, #32]	; (800a3a8 <USBH_Init+0xac>)
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	4809      	ldr	r0, [pc, #36]	; (800a3b0 <USBH_Init+0xb4>)
 800a38a:	f001 fdcd 	bl	800bf28 <osThreadNew>
 800a38e:	4602      	mov	r2, r0
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f004 fdc6 	bl	800ef28 <USBH_LL_Init>

  return USBH_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	2000506c 	.word	0x2000506c
 800a3ac:	0800f6c8 	.word	0x0800f6c8
 800a3b0:	0800b01d 	.word	0x0800b01d

0800a3b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e009      	b.n	800a3da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	33e0      	adds	r3, #224	; 0xe0
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b0e      	cmp	r3, #14
 800a3de:	d9f2      	bls.n	800a3c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e009      	b.n	800a3fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	60fb      	str	r3, [r7, #12]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a400:	d3f1      	bcc.n	800a3e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2240      	movs	r2, #64	; 0x40
 800a426:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d016      	beq.n	800a49e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10e      	bne.n	800a498 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a480:	1c59      	adds	r1, r3, #1
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	33de      	adds	r3, #222	; 0xde
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]
 800a496:	e004      	b.n	800a4a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a498:	2302      	movs	r3, #2
 800a49a:	73fb      	strb	r3, [r7, #15]
 800a49c:	e001      	b.n	800a4a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a4c6:	78fa      	ldrb	r2, [r7, #3]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d204      	bcs.n	800a4d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	78fa      	ldrb	r2, [r7, #3]
 800a4d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a4d4:	e001      	b.n	800a4da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	70fb      	strb	r3, [r7, #3]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	70bb      	strb	r3, [r7, #2]
 800a4fe:	4613      	mov	r3, r2
 800a500:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a506:	2300      	movs	r3, #0
 800a508:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a510:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a512:	e025      	b.n	800a560 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	221a      	movs	r2, #26
 800a518:	fb02 f303 	mul.w	r3, r2, r3
 800a51c:	3308      	adds	r3, #8
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	3302      	adds	r3, #2
 800a524:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	795b      	ldrb	r3, [r3, #5]
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d002      	beq.n	800a536 <USBH_FindInterface+0x4e>
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	2bff      	cmp	r3, #255	; 0xff
 800a534:	d111      	bne.n	800a55a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a53a:	78ba      	ldrb	r2, [r7, #2]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d002      	beq.n	800a546 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a540:	78bb      	ldrb	r3, [r7, #2]
 800a542:	2bff      	cmp	r3, #255	; 0xff
 800a544:	d109      	bne.n	800a55a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a54a:	787a      	ldrb	r2, [r7, #1]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d002      	beq.n	800a556 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a550:	787b      	ldrb	r3, [r7, #1]
 800a552:	2bff      	cmp	r3, #255	; 0xff
 800a554:	d101      	bne.n	800a55a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	e006      	b.n	800a568 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	3301      	adds	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a560:	7dfb      	ldrb	r3, [r7, #23]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d9d6      	bls.n	800a514 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a566:	23ff      	movs	r3, #255	; 0xff
}
 800a568:	4618      	mov	r0, r3
 800a56a:	371c      	adds	r7, #28
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f004 fd0f 	bl	800efa0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a582:	2101      	movs	r1, #1
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f004 fe28 	bl	800f1da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af04      	add	r7, sp, #16
 800a59a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a59c:	2302      	movs	r3, #2
 800a59e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d102      	bne.n	800a5b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2203      	movs	r2, #3
 800a5b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b0b      	cmp	r3, #11
 800a5be:	f200 823c 	bhi.w	800aa3a <USBH_Process+0x4a6>
 800a5c2:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <USBH_Process+0x34>)
 800a5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c8:	0800a5f9 	.word	0x0800a5f9
 800a5cc:	0800a647 	.word	0x0800a647
 800a5d0:	0800a6cb 	.word	0x0800a6cb
 800a5d4:	0800a9b9 	.word	0x0800a9b9
 800a5d8:	0800aa3b 	.word	0x0800aa3b
 800a5dc:	0800a78b 	.word	0x0800a78b
 800a5e0:	0800a943 	.word	0x0800a943
 800a5e4:	0800a7dd 	.word	0x0800a7dd
 800a5e8:	0800a819 	.word	0x0800a819
 800a5ec:	0800a853 	.word	0x0800a853
 800a5f0:	0800a89b 	.word	0x0800a89b
 800a5f4:	0800a9a1 	.word	0x0800a9a1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 821c 	beq.w	800aa3e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a60c:	20c8      	movs	r0, #200	; 0xc8
 800a60e:	f004 fe2b 	bl	800f268 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f004 fd21 	bl	800f05a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a63c:	2300      	movs	r3, #0
 800a63e:	2200      	movs	r2, #0
 800a640:	f001 fd92 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a644:	e1fb      	b.n	800aa3e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d107      	bne.n	800a660 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	e025      	b.n	800a6ac <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a66a:	d914      	bls.n	800a696 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a672:	3301      	adds	r3, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a682:	2b03      	cmp	r3, #3
 800a684:	d903      	bls.n	800a68e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	220d      	movs	r2, #13
 800a68a:	701a      	strb	r2, [r3, #0]
 800a68c:	e00e      	b.n	800a6ac <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	e00a      	b.n	800a6ac <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a69c:	f103 020a 	add.w	r2, r3, #10
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a6a6:	200a      	movs	r0, #10
 800a6a8:	f004 fdde 	bl	800f268 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f001 fd50 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800a6c8:	e1c0      	b.n	800aa4c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6da:	2104      	movs	r1, #4
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a6e0:	2064      	movs	r0, #100	; 0x64
 800a6e2:	f004 fdc1 	bl	800f268 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f004 fc90 	bl	800f00c <USBH_LL_GetSpeed>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2205      	movs	r2, #5
 800a6fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fb21 	bl	800bd46 <USBH_AllocPipe>
 800a704:	4603      	mov	r3, r0
 800a706:	461a      	mov	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a70c:	2180      	movs	r1, #128	; 0x80
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fb19 	bl	800bd46 <USBH_AllocPipe>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7919      	ldrb	r1, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a730:	b292      	uxth	r2, r2
 800a732:	9202      	str	r2, [sp, #8]
 800a734:	2200      	movs	r2, #0
 800a736:	9201      	str	r2, [sp, #4]
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	4603      	mov	r3, r0
 800a73c:	2280      	movs	r2, #128	; 0x80
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 fad2 	bl	800bce8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	7959      	ldrb	r1, [r3, #5]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a758:	b292      	uxth	r2, r2
 800a75a:	9202      	str	r2, [sp, #8]
 800a75c:	2200      	movs	r2, #0
 800a75e:	9201      	str	r2, [sp, #4]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4603      	mov	r3, r0
 800a764:	2200      	movs	r2, #0
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fabe 	bl	800bce8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a780:	2300      	movs	r3, #0
 800a782:	2200      	movs	r2, #0
 800a784:	f001 fcf0 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800a788:	e160      	b.n	800aa4c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f964 	bl	800aa58 <USBH_HandleEnum>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 8152 	bne.w	800aa42 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d103      	bne.n	800a7b8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2208      	movs	r2, #8
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	e002      	b.n	800a7be <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f001 fcc7 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a7da:	e132      	b.n	800aa42 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 812f 	beq.w	800aa46 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2205      	movs	r2, #5
 800a7fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	f001 fca9 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a816:	e116      	b.n	800aa46 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a81e:	b29b      	uxth	r3, r3
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fcf8 	bl	800b218 <USBH_SetCfg>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d102      	bne.n	800a834 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2209      	movs	r2, #9
 800a832:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a848:	2300      	movs	r3, #0
 800a84a:	2200      	movs	r2, #0
 800a84c:	f001 fc8c 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800a850:	e0fc      	b.n	800aa4c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00a      	beq.n	800a876 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a860:	2101      	movs	r1, #1
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fcfb 	bl	800b25e <USBH_SetFeature>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	220a      	movs	r2, #10
 800a872:	701a      	strb	r2, [r3, #0]
 800a874:	e002      	b.n	800a87c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	220a      	movs	r2, #10
 800a87a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	f001 fc68 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800a898:	e0d8      	b.n	800aa4c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d03f      	beq.n	800a924 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]
 800a8b0:	e016      	b.n	800a8e0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a8b2:	7bfa      	ldrb	r2, [r7, #15]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	32de      	adds	r2, #222	; 0xde
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	791a      	ldrb	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d108      	bne.n	800a8da <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a8c8:	7bfa      	ldrb	r2, [r7, #15]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	32de      	adds	r2, #222	; 0xde
 800a8ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a8d8:	e005      	b.n	800a8e6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	73fb      	strb	r3, [r7, #15]
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0e5      	beq.n	800a8b2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d016      	beq.n	800a91e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d109      	bne.n	800a916 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2206      	movs	r2, #6
 800a906:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a90e:	2103      	movs	r1, #3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	4798      	blx	r3
 800a914:	e006      	b.n	800a924 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	220d      	movs	r2, #13
 800a91a:	701a      	strb	r2, [r3, #0]
 800a91c:	e002      	b.n	800a924 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220d      	movs	r2, #13
 800a922:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2205      	movs	r2, #5
 800a928:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a938:	2300      	movs	r3, #0
 800a93a:	2200      	movs	r2, #0
 800a93c:	f001 fc14 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800a940:	e084      	b.n	800aa4c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d017      	beq.n	800a97c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	4798      	blx	r3
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	220b      	movs	r2, #11
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	e00a      	b.n	800a982 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b02      	cmp	r3, #2
 800a972:	d106      	bne.n	800a982 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	220d      	movs	r2, #13
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e002      	b.n	800a982 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	220d      	movs	r2, #13
 800a980:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2205      	movs	r2, #5
 800a986:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a996:	2300      	movs	r3, #0
 800a998:	2200      	movs	r2, #0
 800a99a:	f001 fbe5 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800a99e:	e055      	b.n	800aa4c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d04f      	beq.n	800aa4a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	4798      	blx	r3
      }
      break;
 800a9b6:	e048      	b.n	800aa4a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff fcf7 	bl	800a3b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d009      	beq.n	800a9e4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9f4:	2105      	movs	r1, #5
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d107      	bne.n	800aa16 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff fdb0 	bl	800a574 <USBH_Start>
 800aa14:	e002      	b.n	800aa1c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f004 fac2 	bl	800efa0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa30:	2300      	movs	r3, #0
 800aa32:	2200      	movs	r2, #0
 800aa34:	f001 fb98 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      break;
 800aa38:	e008      	b.n	800aa4c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa3a:	bf00      	nop
 800aa3c:	e006      	b.n	800aa4c <USBH_Process+0x4b8>
      break;
 800aa3e:	bf00      	nop
 800aa40:	e004      	b.n	800aa4c <USBH_Process+0x4b8>
      break;
 800aa42:	bf00      	nop
 800aa44:	e002      	b.n	800aa4c <USBH_Process+0x4b8>
    break;
 800aa46:	bf00      	nop
 800aa48:	e000      	b.n	800aa4c <USBH_Process+0x4b8>
      break;
 800aa4a:	bf00      	nop
  }
  return USBH_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop

0800aa58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af04      	add	r7, sp, #16
 800aa5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aa60:	2301      	movs	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aa64:	2301      	movs	r3, #1
 800aa66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b07      	cmp	r3, #7
 800aa6e:	f200 8208 	bhi.w	800ae82 <USBH_HandleEnum+0x42a>
 800aa72:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <USBH_HandleEnum+0x20>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aa99 	.word	0x0800aa99
 800aa7c:	0800ab57 	.word	0x0800ab57
 800aa80:	0800abc1 	.word	0x0800abc1
 800aa84:	0800ac4f 	.word	0x0800ac4f
 800aa88:	0800acb9 	.word	0x0800acb9
 800aa8c:	0800ad29 	.word	0x0800ad29
 800aa90:	0800adc5 	.word	0x0800adc5
 800aa94:	0800ae43 	.word	0x0800ae43
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aa98:	2108      	movs	r1, #8
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 faec 	bl	800b078 <USBH_Get_DevDesc>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d130      	bne.n	800ab0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	7919      	ldrb	r1, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aace:	b292      	uxth	r2, r2
 800aad0:	9202      	str	r2, [sp, #8]
 800aad2:	2200      	movs	r2, #0
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	4603      	mov	r3, r0
 800aada:	2280      	movs	r2, #128	; 0x80
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 f903 	bl	800bce8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	7959      	ldrb	r1, [r3, #5]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aaf6:	b292      	uxth	r2, r2
 800aaf8:	9202      	str	r2, [sp, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	9201      	str	r2, [sp, #4]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	4603      	mov	r3, r0
 800ab02:	2200      	movs	r2, #0
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f001 f8ef 	bl	800bce8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab0a:	e1bc      	b.n	800ae86 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	f040 81b9 	bne.w	800ae86 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d903      	bls.n	800ab36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	220d      	movs	r2, #13
 800ab32:	701a      	strb	r2, [r3, #0]
      break;
 800ab34:	e1a7      	b.n	800ae86 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	795b      	ldrb	r3, [r3, #5]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f001 f923 	bl	800bd88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	791b      	ldrb	r3, [r3, #4]
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 f91d 	bl	800bd88 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	701a      	strb	r2, [r3, #0]
      break;
 800ab54:	e197      	b.n	800ae86 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab56:	2112      	movs	r1, #18
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fa8d 	bl	800b078 <USBH_Get_DevDesc>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab6e:	e18c      	b.n	800ae8a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	f040 8189 	bne.w	800ae8a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab7e:	3301      	adds	r3, #1
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d903      	bls.n	800ab9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	220d      	movs	r2, #13
 800ab96:	701a      	strb	r2, [r3, #0]
      break;
 800ab98:	e177      	b.n	800ae8a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	795b      	ldrb	r3, [r3, #5]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 f8f1 	bl	800bd88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	791b      	ldrb	r3, [r3, #4]
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f001 f8eb 	bl	800bd88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	701a      	strb	r2, [r3, #0]
      break;
 800abbe:	e164      	b.n	800ae8a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800abc0:	2101      	movs	r1, #1
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fb04 	bl	800b1d0 <USBH_SetAddress>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d132      	bne.n	800ac38 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800abd2:	2002      	movs	r0, #2
 800abd4:	f004 fb48 	bl	800f268 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2203      	movs	r2, #3
 800abe4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7919      	ldrb	r1, [r3, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abfa:	b292      	uxth	r2, r2
 800abfc:	9202      	str	r2, [sp, #8]
 800abfe:	2200      	movs	r2, #0
 800ac00:	9201      	str	r2, [sp, #4]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4603      	mov	r3, r0
 800ac06:	2280      	movs	r2, #128	; 0x80
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 f86d 	bl	800bce8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7959      	ldrb	r1, [r3, #5]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac22:	b292      	uxth	r2, r2
 800ac24:	9202      	str	r2, [sp, #8]
 800ac26:	2200      	movs	r2, #0
 800ac28:	9201      	str	r2, [sp, #4]
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2200      	movs	r2, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 f859 	bl	800bce8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac36:	e12a      	b.n	800ae8e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	f040 8127 	bne.w	800ae8e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	220d      	movs	r2, #13
 800ac44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	705a      	strb	r2, [r3, #1]
      break;
 800ac4c:	e11f      	b.n	800ae8e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac4e:	2109      	movs	r1, #9
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa39 	bl	800b0c8 <USBH_Get_CfgDesc>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d103      	bne.n	800ac68 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2204      	movs	r2, #4
 800ac64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac66:	e114      	b.n	800ae92 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	f040 8111 	bne.w	800ae92 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac76:	3301      	adds	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d903      	bls.n	800ac92 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	220d      	movs	r2, #13
 800ac8e:	701a      	strb	r2, [r3, #0]
      break;
 800ac90:	e0ff      	b.n	800ae92 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f001 f875 	bl	800bd88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	791b      	ldrb	r3, [r3, #4]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f001 f86f 	bl	800bd88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	701a      	strb	r2, [r3, #0]
      break;
 800acb6:	e0ec      	b.n	800ae92 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fa01 	bl	800b0c8 <USBH_Get_CfgDesc>
 800acc6:	4603      	mov	r3, r0
 800acc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acca:	7bbb      	ldrb	r3, [r7, #14]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2205      	movs	r2, #5
 800acd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acd6:	e0de      	b.n	800ae96 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	f040 80db 	bne.w	800ae96 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ace6:	3301      	adds	r3, #1
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d903      	bls.n	800ad02 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	220d      	movs	r2, #13
 800acfe:	701a      	strb	r2, [r3, #0]
      break;
 800ad00:	e0c9      	b.n	800ae96 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	795b      	ldrb	r3, [r3, #5]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 f83d 	bl	800bd88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f001 f837 	bl	800bd88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	701a      	strb	r2, [r3, #0]
      break;
 800ad26:	e0b6      	b.n	800ae96 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d036      	beq.n	800ada0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad3e:	23ff      	movs	r3, #255	; 0xff
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f9e5 	bl	800b110 <USBH_Get_StringDesc>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d111      	bne.n	800ad74 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2206      	movs	r2, #6
 800ad54:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2205      	movs	r2, #5
 800ad5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f001 f9fb 	bl	800c168 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad72:	e092      	b.n	800ae9a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	f040 808f 	bne.w	800ae9a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2206      	movs	r2, #6
 800ad80:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2205      	movs	r2, #5
 800ad86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad96:	2300      	movs	r3, #0
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f001 f9e5 	bl	800c168 <osMessageQueuePut>
      break;
 800ad9e:	e07c      	b.n	800ae9a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2206      	movs	r2, #6
 800ada4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2205      	movs	r2, #5
 800adaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adba:	2300      	movs	r3, #0
 800adbc:	2200      	movs	r2, #0
 800adbe:	f001 f9d3 	bl	800c168 <osMessageQueuePut>
      break;
 800adc2:	e06a      	b.n	800ae9a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d027      	beq.n	800ae1e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800adda:	23ff      	movs	r3, #255	; 0xff
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f997 	bl	800b110 <USBH_Get_StringDesc>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2207      	movs	r2, #7
 800adf0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800adf2:	e054      	b.n	800ae9e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d151      	bne.n	800ae9e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2207      	movs	r2, #7
 800adfe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2205      	movs	r2, #5
 800ae04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae14:	2300      	movs	r3, #0
 800ae16:	2200      	movs	r2, #0
 800ae18:	f001 f9a6 	bl	800c168 <osMessageQueuePut>
      break;
 800ae1c:	e03f      	b.n	800ae9e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2207      	movs	r2, #7
 800ae22:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2205      	movs	r2, #5
 800ae28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f001 f994 	bl	800c168 <osMessageQueuePut>
      break;
 800ae40:	e02d      	b.n	800ae9e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d017      	beq.n	800ae7c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae58:	23ff      	movs	r3, #255	; 0xff
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f958 	bl	800b110 <USBH_Get_StringDesc>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d102      	bne.n	800ae70 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ae6e:	e018      	b.n	800aea2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d115      	bne.n	800aea2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7a:	e012      	b.n	800aea2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae80:	e00f      	b.n	800aea2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800ae82:	bf00      	nop
 800ae84:	e00e      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae86:	bf00      	nop
 800ae88:	e00c      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae8a:	bf00      	nop
 800ae8c:	e00a      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae8e:	bf00      	nop
 800ae90:	e008      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae92:	bf00      	nop
 800ae94:	e006      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae96:	bf00      	nop
 800ae98:	e004      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae9a:	bf00      	nop
 800ae9c:	e002      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800ae9e:	bf00      	nop
 800aea0:	e000      	b.n	800aea4 <USBH_HandleEnum+0x44c>
      break;
 800aea2:	bf00      	nop
  }
  return Status;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop

0800aeb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800aec2:	bf00      	nop
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f804 	bl	800aef2 <USBH_HandleSof>
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b0b      	cmp	r3, #11
 800af02:	d10a      	bne.n	800af1a <USBH_HandleSof+0x28>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4798      	blx	r3
  }
}
 800af1a:	bf00      	nop
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af46:	2300      	movs	r3, #0
 800af48:	2200      	movs	r2, #0
 800af4a:	f001 f90d 	bl	800c168 <osMessageQueuePut>
#endif
#endif

  return;
 800af4e:	bf00      	nop
}
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800af56:	b480      	push	{r7}
 800af58:	b083      	sub	sp, #12
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800af66:	bf00      	nop
}
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afa6:	2300      	movs	r3, #0
 800afa8:	2200      	movs	r2, #0
 800afaa:	f001 f8dd 	bl	800c168 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f003 fffc 	bl	800efd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	791b      	ldrb	r3, [r3, #4]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fecf 	bl	800bd88 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	795b      	ldrb	r3, [r3, #5]
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fec9 	bl	800bd88 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b00a:	2300      	movs	r3, #0
 800b00c:	2200      	movs	r2, #0
 800b00e:	f001 f8ab 	bl	800c168 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b034:	2200      	movs	r2, #0
 800b036:	f001 f8f7 	bl	800c228 <osMessageQueueGet>
 800b03a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1f0      	bne.n	800b024 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff faa6 	bl	800a594 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b048:	e7ec      	b.n	800b024 <USBH_Process_OS+0x8>

0800b04a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b066:	2300      	movs	r3, #0
 800b068:	2200      	movs	r2, #0
 800b06a:	f001 f87d 	bl	800c168 <osMessageQueuePut>
#endif

  return USBH_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af02      	add	r7, sp, #8
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	4613      	mov	r3, r2
 800b092:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b096:	2100      	movs	r1, #0
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f864 	bl	800b166 <USBH_GetDescriptor>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0b4:	78fa      	ldrb	r2, [r7, #3]
 800b0b6:	b292      	uxth	r2, r2
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f000 f918 	bl	800b2ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	331c      	adds	r3, #28
 800b0d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b0da:	887b      	ldrh	r3, [r7, #2]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f83d 	bl	800b166 <USBH_GetDescriptor>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	72fb      	strb	r3, [r7, #11]
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d107      	bne.n	800b106 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b0fc:	887a      	ldrh	r2, [r7, #2]
 800b0fe:	68f9      	ldr	r1, [r7, #12]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 f964 	bl	800b3ce <USBH_ParseCfgDesc>
  }

  return status;
 800b106:	7afb      	ldrb	r3, [r7, #11]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af02      	add	r7, sp, #8
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	461a      	mov	r2, r3
 800b11c:	460b      	mov	r3, r1
 800b11e:	72fb      	strb	r3, [r7, #11]
 800b120:	4613      	mov	r3, r2
 800b122:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b124:	7afb      	ldrb	r3, [r7, #11]
 800b126:	b29b      	uxth	r3, r3
 800b128:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b12c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b134:	893b      	ldrh	r3, [r7, #8]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	460b      	mov	r3, r1
 800b13a:	2100      	movs	r1, #0
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f812 	bl	800b166 <USBH_GetDescriptor>
 800b142:	4603      	mov	r3, r0
 800b144:	75fb      	strb	r3, [r7, #23]
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d107      	bne.n	800b15c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b152:	893a      	ldrh	r2, [r7, #8]
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 fa37 	bl	800b5ca <USBH_ParseStringDesc>
  }

  return status;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	607b      	str	r3, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	72fb      	strb	r3, [r7, #11]
 800b174:	4613      	mov	r3, r2
 800b176:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	789b      	ldrb	r3, [r3, #2]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d11c      	bne.n	800b1ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b180:	7afb      	ldrb	r3, [r7, #11]
 800b182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b186:	b2da      	uxtb	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2206      	movs	r2, #6
 800b190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	893a      	ldrh	r2, [r7, #8]
 800b196:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b198:	893b      	ldrh	r3, [r7, #8]
 800b19a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b19e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1a2:	d104      	bne.n	800b1ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f240 4209 	movw	r2, #1033	; 0x409
 800b1aa:	829a      	strh	r2, [r3, #20]
 800b1ac:	e002      	b.n	800b1b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8b3a      	ldrh	r2, [r7, #24]
 800b1b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b1ba:	8b3b      	ldrh	r3, [r7, #24]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fa50 	bl	800b666 <USBH_CtlReq>
 800b1c6:	4603      	mov	r3, r0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	789b      	ldrb	r3, [r3, #2]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d10f      	bne.n	800b204 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b204:	2200      	movs	r2, #0
 800b206:	2100      	movs	r1, #0
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fa2c 	bl	800b666 <USBH_CtlReq>
 800b20e:	4603      	mov	r3, r0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	789b      	ldrb	r3, [r3, #2]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d10e      	bne.n	800b24a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2209      	movs	r2, #9
 800b236:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	887a      	ldrh	r2, [r7, #2]
 800b23c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b24a:	2200      	movs	r2, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fa09 	bl	800b666 <USBH_CtlReq>
 800b254:	4603      	mov	r3, r0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	460b      	mov	r3, r1
 800b268:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	789b      	ldrb	r3, [r3, #2]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d10f      	bne.n	800b292 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2203      	movs	r2, #3
 800b27c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b27e:	78fb      	ldrb	r3, [r7, #3]
 800b280:	b29a      	uxth	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b292:	2200      	movs	r2, #0
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f9e5 	bl	800b666 <USBH_CtlReq>
 800b29c:	4603      	mov	r3, r0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	789b      	ldrb	r3, [r3, #2]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d10f      	bne.n	800b2da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2202      	movs	r2, #2
 800b2be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2100      	movs	r1, #0
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f9c1 	bl	800b666 <USBH_CtlReq>
 800b2e4:	4603      	mov	r3, r0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	781a      	ldrb	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	785a      	ldrb	r2, [r3, #1]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3302      	adds	r3, #2
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b29a      	uxth	r2, r3
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3303      	adds	r3, #3
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	b29b      	uxth	r3, r3
 800b320:	4313      	orrs	r3, r2
 800b322:	b29a      	uxth	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	791a      	ldrb	r2, [r3, #4]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	795a      	ldrb	r2, [r3, #5]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	799a      	ldrb	r2, [r3, #6]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	79da      	ldrb	r2, [r3, #7]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b348:	88fb      	ldrh	r3, [r7, #6]
 800b34a:	2b08      	cmp	r3, #8
 800b34c:	d939      	bls.n	800b3c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3308      	adds	r3, #8
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	b29a      	uxth	r2, r3
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	3309      	adds	r3, #9
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	021b      	lsls	r3, r3, #8
 800b360:	b29b      	uxth	r3, r3
 800b362:	4313      	orrs	r3, r2
 800b364:	b29a      	uxth	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	330a      	adds	r3, #10
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	b29a      	uxth	r2, r3
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	330b      	adds	r3, #11
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	021b      	lsls	r3, r3, #8
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	b29a      	uxth	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	330c      	adds	r3, #12
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	330d      	adds	r3, #13
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	b29b      	uxth	r3, r3
 800b396:	021b      	lsls	r3, r3, #8
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	7b9a      	ldrb	r2, [r3, #14]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	7bda      	ldrb	r2, [r3, #15]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	7c1a      	ldrb	r2, [r3, #16]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	7c5a      	ldrb	r2, [r3, #17]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	745a      	strb	r2, [r3, #17]
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b08a      	sub	sp, #40	; 0x28
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	785a      	ldrb	r2, [r3, #1]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	3302      	adds	r3, #2
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	b29a      	uxth	r2, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	3303      	adds	r3, #3
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	b29b      	uxth	r3, r3
 800b414:	4313      	orrs	r3, r2
 800b416:	b29a      	uxth	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	791a      	ldrb	r2, [r3, #4]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	795a      	ldrb	r2, [r3, #5]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	799a      	ldrb	r2, [r3, #6]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	79da      	ldrb	r2, [r3, #7]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	7a1a      	ldrb	r2, [r3, #8]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b444:	88fb      	ldrh	r3, [r7, #6]
 800b446:	2b09      	cmp	r3, #9
 800b448:	d95f      	bls.n	800b50a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b44a:	2309      	movs	r3, #9
 800b44c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b44e:	2300      	movs	r3, #0
 800b450:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b452:	e051      	b.n	800b4f8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b454:	f107 0316 	add.w	r3, r7, #22
 800b458:	4619      	mov	r1, r3
 800b45a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b45c:	f000 f8e8 	bl	800b630 <USBH_GetNextDesc>
 800b460:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	2b04      	cmp	r3, #4
 800b468:	d146      	bne.n	800b4f8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b46a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b46e:	221a      	movs	r2, #26
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	3308      	adds	r3, #8
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4413      	add	r3, r2
 800b47a:	3302      	adds	r3, #2
 800b47c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b47e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b480:	69f8      	ldr	r0, [r7, #28]
 800b482:	f000 f846 	bl	800b512 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b490:	e022      	b.n	800b4d8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b492:	f107 0316 	add.w	r3, r7, #22
 800b496:	4619      	mov	r1, r3
 800b498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b49a:	f000 f8c9 	bl	800b630 <USBH_GetNextDesc>
 800b49e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	2b05      	cmp	r3, #5
 800b4a6:	d117      	bne.n	800b4d8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b4a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b4b0:	3201      	adds	r2, #1
 800b4b2:	00d2      	lsls	r2, r2, #3
 800b4b4:	211a      	movs	r1, #26
 800b4b6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	3308      	adds	r3, #8
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4c8:	69b8      	ldr	r0, [r7, #24]
 800b4ca:	f000 f851 	bl	800b570 <USBH_ParseEPDesc>
            ep_ix++;
 800b4ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	791b      	ldrb	r3, [r3, #4]
 800b4dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d204      	bcs.n	800b4ee <USBH_ParseCfgDesc+0x120>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	885a      	ldrh	r2, [r3, #2]
 800b4e8:	8afb      	ldrh	r3, [r7, #22]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d8d1      	bhi.n	800b492 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b4ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b4f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d804      	bhi.n	800b50a <USBH_ParseCfgDesc+0x13c>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	885a      	ldrh	r2, [r3, #2]
 800b504:	8afb      	ldrh	r3, [r7, #22]
 800b506:	429a      	cmp	r2, r3
 800b508:	d8a4      	bhi.n	800b454 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b50a:	bf00      	nop
 800b50c:	3728      	adds	r7, #40	; 0x28
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781a      	ldrb	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	785a      	ldrb	r2, [r3, #1]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	789a      	ldrb	r2, [r3, #2]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	78da      	ldrb	r2, [r3, #3]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	791a      	ldrb	r2, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	795a      	ldrb	r2, [r3, #5]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	799a      	ldrb	r2, [r3, #6]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	79da      	ldrb	r2, [r3, #7]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	7a1a      	ldrb	r2, [r3, #8]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	721a      	strb	r2, [r3, #8]
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781a      	ldrb	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	785a      	ldrb	r2, [r3, #1]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	789a      	ldrb	r2, [r3, #2]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	78da      	ldrb	r2, [r3, #3]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	3304      	adds	r3, #4
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	3305      	adds	r3, #5
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	799a      	ldrb	r2, [r3, #6]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	719a      	strb	r2, [r3, #6]
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b087      	sub	sp, #28
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d120      	bne.n	800b624 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	1e9a      	subs	r2, r3, #2
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	bf28      	it	cs
 800b5ee:	4613      	movcs	r3, r2
 800b5f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3302      	adds	r3, #2
 800b5f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	82fb      	strh	r3, [r7, #22]
 800b5fc:	e00b      	b.n	800b616 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b5fe:	8afb      	ldrh	r3, [r7, #22]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4413      	add	r3, r2
 800b604:	781a      	ldrb	r2, [r3, #0]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	3301      	adds	r3, #1
 800b60e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b610:	8afb      	ldrh	r3, [r7, #22]
 800b612:	3302      	adds	r3, #2
 800b614:	82fb      	strh	r3, [r7, #22]
 800b616:	8afa      	ldrh	r2, [r7, #22]
 800b618:	8abb      	ldrh	r3, [r7, #20]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d3ef      	bcc.n	800b5fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2200      	movs	r2, #0
 800b622:	701a      	strb	r2, [r3, #0]
  }
}
 800b624:	bf00      	nop
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	881a      	ldrh	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	b29b      	uxth	r3, r3
 800b644:	4413      	add	r3, r2
 800b646:	b29a      	uxth	r2, r3
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4413      	add	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b658:	68fb      	ldr	r3, [r7, #12]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b086      	sub	sp, #24
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	4613      	mov	r3, r2
 800b672:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	789b      	ldrb	r3, [r3, #2]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d002      	beq.n	800b686 <USBH_CtlReq+0x20>
 800b680:	2b02      	cmp	r3, #2
 800b682:	d01d      	beq.n	800b6c0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b684:	e043      	b.n	800b70e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	88fa      	ldrh	r2, [r7, #6]
 800b690:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2201      	movs	r2, #1
 800b696:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2202      	movs	r2, #2
 800b69c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f000 fd55 	bl	800c168 <osMessageQueuePut>
      break;
 800b6be:	e026      	b.n	800b70e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f829 	bl	800b718 <USBH_HandleControl>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <USBH_CtlReq+0x70>
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d106      	bne.n	800b6e4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	761a      	strb	r2, [r3, #24]
 800b6e2:	e005      	b.n	800b6f0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d102      	bne.n	800b6f0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b704:	2300      	movs	r3, #0
 800b706:	2200      	movs	r2, #0
 800b708:	f000 fd2e 	bl	800c168 <osMessageQueuePut>
      break;
 800b70c:	bf00      	nop
  }
  return status;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af02      	add	r7, sp, #8
 800b71e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b720:	2301      	movs	r3, #1
 800b722:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b724:	2300      	movs	r3, #0
 800b726:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7e1b      	ldrb	r3, [r3, #24]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	2b0a      	cmp	r3, #10
 800b730:	f200 8229 	bhi.w	800bb86 <USBH_HandleControl+0x46e>
 800b734:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <USBH_HandleControl+0x24>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b769 	.word	0x0800b769
 800b740:	0800b783 	.word	0x0800b783
 800b744:	0800b825 	.word	0x0800b825
 800b748:	0800b84b 	.word	0x0800b84b
 800b74c:	0800b8d7 	.word	0x0800b8d7
 800b750:	0800b901 	.word	0x0800b901
 800b754:	0800b9c3 	.word	0x0800b9c3
 800b758:	0800b9e5 	.word	0x0800b9e5
 800b75c:	0800ba77 	.word	0x0800ba77
 800b760:	0800ba9d 	.word	0x0800ba9d
 800b764:	0800bb2f 	.word	0x0800bb2f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f103 0110 	add.w	r1, r3, #16
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	795b      	ldrb	r3, [r3, #5]
 800b772:	461a      	mov	r2, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fa17 	bl	800bba8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2202      	movs	r2, #2
 800b77e:	761a      	strb	r2, [r3, #24]
      break;
 800b780:	e20c      	b.n	800bb9c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	795b      	ldrb	r3, [r3, #5]
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f003 fd13 	bl	800f1b4 <USBH_LL_GetURBState>
 800b78e:	4603      	mov	r3, r0
 800b790:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d12c      	bne.n	800b7f2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	7c1b      	ldrb	r3, [r3, #16]
 800b79c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	8adb      	ldrh	r3, [r3, #22]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7aa:	7b7b      	ldrb	r3, [r7, #13]
 800b7ac:	2b80      	cmp	r3, #128	; 0x80
 800b7ae:	d103      	bne.n	800b7b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2203      	movs	r2, #3
 800b7b4:	761a      	strb	r2, [r3, #24]
 800b7b6:	e00d      	b.n	800b7d4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2205      	movs	r2, #5
 800b7bc:	761a      	strb	r2, [r3, #24]
 800b7be:	e009      	b.n	800b7d4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b7c0:	7b7b      	ldrb	r3, [r7, #13]
 800b7c2:	2b80      	cmp	r3, #128	; 0x80
 800b7c4:	d103      	bne.n	800b7ce <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2209      	movs	r2, #9
 800b7ca:	761a      	strb	r2, [r3, #24]
 800b7cc:	e002      	b.n	800b7d4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2207      	movs	r2, #7
 800b7d2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2203      	movs	r2, #3
 800b7d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f000 fcbc 	bl	800c168 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b7f0:	e1cb      	b.n	800bb8a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
 800b7f4:	2b04      	cmp	r3, #4
 800b7f6:	d003      	beq.n	800b800 <USBH_HandleControl+0xe8>
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	f040 81c5 	bne.w	800bb8a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	220b      	movs	r2, #11
 800b804:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2203      	movs	r2, #3
 800b80a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b81a:	2300      	movs	r3, #0
 800b81c:	2200      	movs	r2, #0
 800b81e:	f000 fca3 	bl	800c168 <osMessageQueuePut>
      break;
 800b822:	e1b2      	b.n	800bb8a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6899      	ldr	r1, [r3, #8]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	899a      	ldrh	r2, [r3, #12]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	791b      	ldrb	r3, [r3, #4]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f9f2 	bl	800bc26 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2204      	movs	r2, #4
 800b846:	761a      	strb	r2, [r3, #24]
      break;
 800b848:	e1a8      	b.n	800bb9c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	791b      	ldrb	r3, [r3, #4]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f003 fcaf 	bl	800f1b4 <USBH_LL_GetURBState>
 800b856:	4603      	mov	r3, r0
 800b858:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d110      	bne.n	800b882 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2209      	movs	r2, #9
 800b864:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2203      	movs	r2, #3
 800b86a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b87a:	2300      	movs	r3, #0
 800b87c:	2200      	movs	r2, #0
 800b87e:	f000 fc73 	bl	800c168 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b882:	7bbb      	ldrb	r3, [r7, #14]
 800b884:	2b05      	cmp	r3, #5
 800b886:	d110      	bne.n	800b8aa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b888:	2303      	movs	r3, #3
 800b88a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2203      	movs	r2, #3
 800b890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f000 fc60 	bl	800c168 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8a8:	e171      	b.n	800bb8e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	f040 816e 	bne.w	800bb8e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	220b      	movs	r2, #11
 800b8b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f000 fc4a 	bl	800c168 <osMessageQueuePut>
      break;
 800b8d4:	e15b      	b.n	800bb8e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6899      	ldr	r1, [r3, #8]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	899a      	ldrh	r2, [r3, #12]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	795b      	ldrb	r3, [r3, #5]
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	9000      	str	r0, [sp, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f978 	bl	800bbdc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2206      	movs	r2, #6
 800b8fc:	761a      	strb	r2, [r3, #24]
      break;
 800b8fe:	e14d      	b.n	800bb9c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	795b      	ldrb	r3, [r3, #5]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f003 fc54 	bl	800f1b4 <USBH_LL_GetURBState>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d111      	bne.n	800b93a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2207      	movs	r2, #7
 800b91a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2203      	movs	r2, #3
 800b920:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b930:	2300      	movs	r3, #0
 800b932:	2200      	movs	r2, #0
 800b934:	f000 fc18 	bl	800c168 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b938:	e12b      	b.n	800bb92 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b93a:	7bbb      	ldrb	r3, [r7, #14]
 800b93c:	2b05      	cmp	r3, #5
 800b93e:	d113      	bne.n	800b968 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	220c      	movs	r2, #12
 800b944:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b946:	2303      	movs	r3, #3
 800b948:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2203      	movs	r2, #3
 800b94e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b95e:	2300      	movs	r3, #0
 800b960:	2200      	movs	r2, #0
 800b962:	f000 fc01 	bl	800c168 <osMessageQueuePut>
      break;
 800b966:	e114      	b.n	800bb92 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d111      	bne.n	800b992 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2205      	movs	r2, #5
 800b972:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2203      	movs	r2, #3
 800b978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b988:	2300      	movs	r3, #0
 800b98a:	2200      	movs	r2, #0
 800b98c:	f000 fbec 	bl	800c168 <osMessageQueuePut>
      break;
 800b990:	e0ff      	b.n	800bb92 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b04      	cmp	r3, #4
 800b996:	f040 80fc 	bne.w	800bb92 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	220b      	movs	r2, #11
 800b99e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f000 fbd4 	bl	800c168 <osMessageQueuePut>
      break;
 800b9c0:	e0e7      	b.n	800bb92 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	791b      	ldrb	r3, [r3, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f92b 	bl	800bc26 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2208      	movs	r2, #8
 800b9e0:	761a      	strb	r2, [r3, #24]

      break;
 800b9e2:	e0db      	b.n	800bb9c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	791b      	ldrb	r3, [r3, #4]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f003 fbe2 	bl	800f1b4 <USBH_LL_GetURBState>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d113      	bne.n	800ba22 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	220d      	movs	r2, #13
 800b9fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2203      	movs	r2, #3
 800ba08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba18:	2300      	movs	r3, #0
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f000 fba4 	bl	800c168 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba20:	e0b9      	b.n	800bb96 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b04      	cmp	r3, #4
 800ba26:	d111      	bne.n	800ba4c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	220b      	movs	r2, #11
 800ba2c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2203      	movs	r2, #3
 800ba32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba42:	2300      	movs	r3, #0
 800ba44:	2200      	movs	r2, #0
 800ba46:	f000 fb8f 	bl	800c168 <osMessageQueuePut>
      break;
 800ba4a:	e0a4      	b.n	800bb96 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	2b05      	cmp	r3, #5
 800ba50:	f040 80a1 	bne.w	800bb96 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ba54:	2303      	movs	r3, #3
 800ba56:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f000 fb7a 	bl	800c168 <osMessageQueuePut>
      break;
 800ba74:	e08f      	b.n	800bb96 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	795b      	ldrb	r3, [r3, #5]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	9200      	str	r2, [sp, #0]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2100      	movs	r1, #0
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f8aa 	bl	800bbdc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	220a      	movs	r2, #10
 800ba98:	761a      	strb	r2, [r3, #24]
      break;
 800ba9a:	e07f      	b.n	800bb9c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	795b      	ldrb	r3, [r3, #5]
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f003 fb86 	bl	800f1b4 <USBH_LL_GetURBState>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d113      	bne.n	800bada <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	220d      	movs	r2, #13
 800baba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2203      	movs	r2, #3
 800bac0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bad0:	2300      	movs	r3, #0
 800bad2:	2200      	movs	r2, #0
 800bad4:	f000 fb48 	bl	800c168 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bad8:	e05f      	b.n	800bb9a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d111      	bne.n	800bb04 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2209      	movs	r2, #9
 800bae4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2203      	movs	r2, #3
 800baea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bafa:	2300      	movs	r3, #0
 800bafc:	2200      	movs	r2, #0
 800bafe:	f000 fb33 	bl	800c168 <osMessageQueuePut>
      break;
 800bb02:	e04a      	b.n	800bb9a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d147      	bne.n	800bb9a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	220b      	movs	r2, #11
 800bb0e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2203      	movs	r2, #3
 800bb14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb24:	2300      	movs	r3, #0
 800bb26:	2200      	movs	r2, #0
 800bb28:	f000 fb1e 	bl	800c168 <osMessageQueuePut>
      break;
 800bb2c:	e035      	b.n	800bb9a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	7e5b      	ldrb	r3, [r3, #25]
 800bb32:	3301      	adds	r3, #1
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	765a      	strb	r2, [r3, #25]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7e5b      	ldrb	r3, [r3, #25]
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d806      	bhi.n	800bb50 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2201      	movs	r2, #1
 800bb46:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb4e:	e025      	b.n	800bb9c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb56:	2106      	movs	r1, #6
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	795b      	ldrb	r3, [r3, #5]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f90d 	bl	800bd88 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	791b      	ldrb	r3, [r3, #4]
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f907 	bl	800bd88 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb80:	2302      	movs	r3, #2
 800bb82:	73fb      	strb	r3, [r7, #15]
      break;
 800bb84:	e00a      	b.n	800bb9c <USBH_HandleControl+0x484>

    default:
      break;
 800bb86:	bf00      	nop
 800bb88:	e008      	b.n	800bb9c <USBH_HandleControl+0x484>
      break;
 800bb8a:	bf00      	nop
 800bb8c:	e006      	b.n	800bb9c <USBH_HandleControl+0x484>
      break;
 800bb8e:	bf00      	nop
 800bb90:	e004      	b.n	800bb9c <USBH_HandleControl+0x484>
      break;
 800bb92:	bf00      	nop
 800bb94:	e002      	b.n	800bb9c <USBH_HandleControl+0x484>
      break;
 800bb96:	bf00      	nop
 800bb98:	e000      	b.n	800bb9c <USBH_HandleControl+0x484>
      break;
 800bb9a:	bf00      	nop
  }

  return status;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop

0800bba8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af04      	add	r7, sp, #16
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbb6:	79f9      	ldrb	r1, [r7, #7]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	9303      	str	r3, [sp, #12]
 800bbbc:	2308      	movs	r3, #8
 800bbbe:	9302      	str	r3, [sp, #8]
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	9301      	str	r3, [sp, #4]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	2300      	movs	r3, #0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f003 fac0 	bl	800f152 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af04      	add	r7, sp, #16
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	461a      	mov	r2, r3
 800bbea:	460b      	mov	r3, r1
 800bbec:	80fb      	strh	r3, [r7, #6]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc00:	7979      	ldrb	r1, [r7, #5]
 800bc02:	7e3b      	ldrb	r3, [r7, #24]
 800bc04:	9303      	str	r3, [sp, #12]
 800bc06:	88fb      	ldrh	r3, [r7, #6]
 800bc08:	9302      	str	r3, [sp, #8]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	2301      	movs	r3, #1
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	2300      	movs	r3, #0
 800bc14:	2200      	movs	r2, #0
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f003 fa9b 	bl	800f152 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b088      	sub	sp, #32
 800bc2a:	af04      	add	r7, sp, #16
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	4611      	mov	r1, r2
 800bc32:	461a      	mov	r2, r3
 800bc34:	460b      	mov	r3, r1
 800bc36:	80fb      	strh	r3, [r7, #6]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc3c:	7979      	ldrb	r1, [r7, #5]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9303      	str	r3, [sp, #12]
 800bc42:	88fb      	ldrh	r3, [r7, #6]
 800bc44:	9302      	str	r3, [sp, #8]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2201      	movs	r2, #1
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f003 fa7d 	bl	800f152 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc58:	2300      	movs	r3, #0

}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b088      	sub	sp, #32
 800bc66:	af04      	add	r7, sp, #16
 800bc68:	60f8      	str	r0, [r7, #12]
 800bc6a:	60b9      	str	r1, [r7, #8]
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	461a      	mov	r2, r3
 800bc70:	460b      	mov	r3, r1
 800bc72:	80fb      	strh	r3, [r7, #6]
 800bc74:	4613      	mov	r3, r2
 800bc76:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc86:	7979      	ldrb	r1, [r7, #5]
 800bc88:	7e3b      	ldrb	r3, [r7, #24]
 800bc8a:	9303      	str	r3, [sp, #12]
 800bc8c:	88fb      	ldrh	r3, [r7, #6]
 800bc8e:	9302      	str	r3, [sp, #8]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	9301      	str	r3, [sp, #4]
 800bc94:	2301      	movs	r3, #1
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	2302      	movs	r3, #2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f003 fa58 	bl	800f152 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af04      	add	r7, sp, #16
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	461a      	mov	r2, r3
 800bcba:	460b      	mov	r3, r1
 800bcbc:	80fb      	strh	r3, [r7, #6]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcc2:	7979      	ldrb	r1, [r7, #5]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9303      	str	r3, [sp, #12]
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	9302      	str	r3, [sp, #8]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	9301      	str	r3, [sp, #4]
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f003 fa3a 	bl	800f152 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af04      	add	r7, sp, #16
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	70fb      	strb	r3, [r7, #3]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70bb      	strb	r3, [r7, #2]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd02:	7878      	ldrb	r0, [r7, #1]
 800bd04:	78ba      	ldrb	r2, [r7, #2]
 800bd06:	78f9      	ldrb	r1, [r7, #3]
 800bd08:	8b3b      	ldrh	r3, [r7, #24]
 800bd0a:	9302      	str	r3, [sp, #8]
 800bd0c:	7d3b      	ldrb	r3, [r7, #20]
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	7c3b      	ldrb	r3, [r7, #16]
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	4603      	mov	r3, r0
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f003 f9cd 	bl	800f0b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f003 f9ec 	bl	800f114 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f836 	bl	800bdc4 <USBH_GetFreePipe>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd5c:	89fb      	ldrh	r3, [r7, #14]
 800bd5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00a      	beq.n	800bd7c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bd66:	78fa      	ldrb	r2, [r7, #3]
 800bd68:	89fb      	ldrh	r3, [r7, #14]
 800bd6a:	f003 030f 	and.w	r3, r3, #15
 800bd6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	33e0      	adds	r3, #224	; 0xe0
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	440b      	add	r3, r1
 800bd7a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd7c:	89fb      	ldrh	r3, [r7, #14]
 800bd7e:	b2db      	uxtb	r3, r3
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bd94:	78fb      	ldrb	r3, [r7, #3]
 800bd96:	2b0a      	cmp	r3, #10
 800bd98:	d80d      	bhi.n	800bdb6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	33e0      	adds	r3, #224	; 0xe0
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	33e0      	adds	r3, #224	; 0xe0
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	440b      	add	r3, r1
 800bdb4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73fb      	strb	r3, [r7, #15]
 800bdd4:	e00f      	b.n	800bdf6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	33e0      	adds	r3, #224	; 0xe0
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d102      	bne.n	800bdf0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	e007      	b.n	800be00 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	73fb      	strb	r3, [r7, #15]
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
 800bdf8:	2b0a      	cmp	r3, #10
 800bdfa:	d9ec      	bls.n	800bdd6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bdfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <__NVIC_SetPriority>:
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	db0a      	blt.n	800be36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	b2da      	uxtb	r2, r3
 800be24:	490c      	ldr	r1, [pc, #48]	; (800be58 <__NVIC_SetPriority+0x4c>)
 800be26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be2a:	0112      	lsls	r2, r2, #4
 800be2c:	b2d2      	uxtb	r2, r2
 800be2e:	440b      	add	r3, r1
 800be30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be34:	e00a      	b.n	800be4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	4908      	ldr	r1, [pc, #32]	; (800be5c <__NVIC_SetPriority+0x50>)
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	f003 030f 	and.w	r3, r3, #15
 800be42:	3b04      	subs	r3, #4
 800be44:	0112      	lsls	r2, r2, #4
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	440b      	add	r3, r1
 800be4a:	761a      	strb	r2, [r3, #24]
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	e000e100 	.word	0xe000e100
 800be5c:	e000ed00 	.word	0xe000ed00

0800be60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <SysTick_Handler+0x1c>)
 800be66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be68:	f001 fee8 	bl	800dc3c <xTaskGetSchedulerState>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d001      	beq.n	800be76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be72:	f002 fcd1 	bl	800e818 <xPortSysTickHandler>
  }
}
 800be76:	bf00      	nop
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	e000e010 	.word	0xe000e010

0800be80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be80:	b580      	push	{r7, lr}
 800be82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be84:	2100      	movs	r1, #0
 800be86:	f06f 0004 	mvn.w	r0, #4
 800be8a:	f7ff ffbf 	bl	800be0c <__NVIC_SetPriority>
#endif
}
 800be8e:	bf00      	nop
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be9a:	f3ef 8305 	mrs	r3, IPSR
 800be9e:	603b      	str	r3, [r7, #0]
  return(result);
 800bea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bea6:	f06f 0305 	mvn.w	r3, #5
 800beaa:	607b      	str	r3, [r7, #4]
 800beac:	e00c      	b.n	800bec8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800beae:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <osKernelInitialize+0x44>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d105      	bne.n	800bec2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800beb6:	4b08      	ldr	r3, [pc, #32]	; (800bed8 <osKernelInitialize+0x44>)
 800beb8:	2201      	movs	r2, #1
 800beba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	607b      	str	r3, [r7, #4]
 800bec0:	e002      	b.n	800bec8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bec8:	687b      	ldr	r3, [r7, #4]
}
 800beca:	4618      	mov	r0, r3
 800becc:	370c      	adds	r7, #12
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	200004c0 	.word	0x200004c0

0800bedc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bee2:	f3ef 8305 	mrs	r3, IPSR
 800bee6:	603b      	str	r3, [r7, #0]
  return(result);
 800bee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800beee:	f06f 0305 	mvn.w	r3, #5
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	e010      	b.n	800bf18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <osKernelStart+0x48>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d109      	bne.n	800bf12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800befe:	f7ff ffbf 	bl	800be80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <osKernelStart+0x48>)
 800bf04:	2202      	movs	r2, #2
 800bf06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf08:	f001 fa50 	bl	800d3ac <vTaskStartScheduler>
      stat = osOK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	607b      	str	r3, [r7, #4]
 800bf10:	e002      	b.n	800bf18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf18:	687b      	ldr	r3, [r7, #4]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	200004c0 	.word	0x200004c0

0800bf28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08e      	sub	sp, #56	; 0x38
 800bf2c:	af04      	add	r7, sp, #16
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf38:	f3ef 8305 	mrs	r3, IPSR
 800bf3c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d17e      	bne.n	800c042 <osThreadNew+0x11a>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d07b      	beq.n	800c042 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf4a:	2380      	movs	r3, #128	; 0x80
 800bf4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf4e:	2318      	movs	r3, #24
 800bf50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d045      	beq.n	800bfee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <osThreadNew+0x48>
        name = attr->name;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d008      	beq.n	800bf96 <osThreadNew+0x6e>
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	2b38      	cmp	r3, #56	; 0x38
 800bf88:	d805      	bhi.n	800bf96 <osThreadNew+0x6e>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <osThreadNew+0x72>
        return (NULL);
 800bf96:	2300      	movs	r3, #0
 800bf98:	e054      	b.n	800c044 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	089b      	lsrs	r3, r3, #2
 800bfa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00e      	beq.n	800bfd0 <osThreadNew+0xa8>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	2b5b      	cmp	r3, #91	; 0x5b
 800bfb8:	d90a      	bls.n	800bfd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d006      	beq.n	800bfd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <osThreadNew+0xa8>
        mem = 1;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	61bb      	str	r3, [r7, #24]
 800bfce:	e010      	b.n	800bff2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10c      	bne.n	800bff2 <osThreadNew+0xca>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d108      	bne.n	800bff2 <osThreadNew+0xca>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d104      	bne.n	800bff2 <osThreadNew+0xca>
          mem = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	61bb      	str	r3, [r7, #24]
 800bfec:	e001      	b.n	800bff2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d110      	bne.n	800c01a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c000:	9202      	str	r2, [sp, #8]
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	6a3a      	ldr	r2, [r7, #32]
 800c00c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 fff6 	bl	800d000 <xTaskCreateStatic>
 800c014:	4603      	mov	r3, r0
 800c016:	613b      	str	r3, [r7, #16]
 800c018:	e013      	b.n	800c042 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d110      	bne.n	800c042 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	b29a      	uxth	r2, r3
 800c024:	f107 0310 	add.w	r3, r7, #16
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f001 f841 	bl	800d0ba <xTaskCreate>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d001      	beq.n	800c042 <osThreadNew+0x11a>
            hTask = NULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c042:	693b      	ldr	r3, [r7, #16]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3728      	adds	r7, #40	; 0x28
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c054:	f3ef 8305 	mrs	r3, IPSR
 800c058:	60bb      	str	r3, [r7, #8]
  return(result);
 800c05a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d003      	beq.n	800c068 <osDelay+0x1c>
    stat = osErrorISR;
 800c060:	f06f 0305 	mvn.w	r3, #5
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	e007      	b.n	800c078 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 f966 	bl	800d344 <vTaskDelay>
    }
  }

  return (stat);
 800c078:	68fb      	ldr	r3, [r7, #12]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c082:	b580      	push	{r7, lr}
 800c084:	b08a      	sub	sp, #40	; 0x28
 800c086:	af02      	add	r7, sp, #8
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c08e:	2300      	movs	r3, #0
 800c090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c092:	f3ef 8305 	mrs	r3, IPSR
 800c096:	613b      	str	r3, [r7, #16]
  return(result);
 800c098:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d15f      	bne.n	800c15e <osMessageQueueNew+0xdc>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d05c      	beq.n	800c15e <osMessageQueueNew+0xdc>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d059      	beq.n	800c15e <osMessageQueueNew+0xdc>
    mem = -1;
 800c0aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d029      	beq.n	800c10a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d012      	beq.n	800c0e4 <osMessageQueueNew+0x62>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	2b4f      	cmp	r3, #79	; 0x4f
 800c0c4:	d90e      	bls.n	800c0e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	695a      	ldr	r2, [r3, #20]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	68b9      	ldr	r1, [r7, #8]
 800c0d6:	fb01 f303 	mul.w	r3, r1, r3
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d302      	bcc.n	800c0e4 <osMessageQueueNew+0x62>
        mem = 1;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	e014      	b.n	800c10e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d110      	bne.n	800c10e <osMessageQueueNew+0x8c>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10c      	bne.n	800c10e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d108      	bne.n	800c10e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d104      	bne.n	800c10e <osMessageQueueNew+0x8c>
          mem = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	61bb      	str	r3, [r7, #24]
 800c108:	e001      	b.n	800c10e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d10b      	bne.n	800c12c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691a      	ldr	r2, [r3, #16]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	2100      	movs	r1, #0
 800c11e:	9100      	str	r1, [sp, #0]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 fa2e 	bl	800c584 <xQueueGenericCreateStatic>
 800c128:	61f8      	str	r0, [r7, #28]
 800c12a:	e008      	b.n	800c13e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c132:	2200      	movs	r2, #0
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 fa9c 	bl	800c674 <xQueueGenericCreate>
 800c13c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00c      	beq.n	800c15e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	e001      	b.n	800c156 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c152:	2300      	movs	r3, #0
 800c154:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c156:	6979      	ldr	r1, [r7, #20]
 800c158:	69f8      	ldr	r0, [r7, #28]
 800c15a:	f000 fef3 	bl	800cf44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c15e:	69fb      	ldr	r3, [r7, #28]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	603b      	str	r3, [r7, #0]
 800c174:	4613      	mov	r3, r2
 800c176:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c180:	f3ef 8305 	mrs	r3, IPSR
 800c184:	617b      	str	r3, [r7, #20]
  return(result);
 800c186:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d028      	beq.n	800c1de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <osMessageQueuePut+0x36>
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <osMessageQueuePut+0x36>
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c19e:	f06f 0303 	mvn.w	r3, #3
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e038      	b.n	800c218 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c1aa:	f107 0210 	add.w	r2, r7, #16
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	69b8      	ldr	r0, [r7, #24]
 800c1b4:	f000 fbba 	bl	800c92c <xQueueGenericSendFromISR>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d003      	beq.n	800c1c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c1be:	f06f 0302 	mvn.w	r3, #2
 800c1c2:	61fb      	str	r3, [r7, #28]
 800c1c4:	e028      	b.n	800c218 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d025      	beq.n	800c218 <osMessageQueuePut+0xb0>
 800c1cc:	4b15      	ldr	r3, [pc, #84]	; (800c224 <osMessageQueuePut+0xbc>)
 800c1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	e01c      	b.n	800c218 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <osMessageQueuePut+0x82>
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c1ea:	f06f 0303 	mvn.w	r3, #3
 800c1ee:	61fb      	str	r3, [r7, #28]
 800c1f0:	e012      	b.n	800c218 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	68b9      	ldr	r1, [r7, #8]
 800c1f8:	69b8      	ldr	r0, [r7, #24]
 800c1fa:	f000 fa99 	bl	800c730 <xQueueGenericSend>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b01      	cmp	r3, #1
 800c202:	d009      	beq.n	800c218 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c20a:	f06f 0301 	mvn.w	r3, #1
 800c20e:	61fb      	str	r3, [r7, #28]
 800c210:	e002      	b.n	800c218 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c212:	f06f 0302 	mvn.w	r3, #2
 800c216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c218:	69fb      	ldr	r3, [r7, #28]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3720      	adds	r7, #32
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	e000ed04 	.word	0xe000ed04

0800c228 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c23e:	f3ef 8305 	mrs	r3, IPSR
 800c242:	617b      	str	r3, [r7, #20]
  return(result);
 800c244:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c246:	2b00      	cmp	r3, #0
 800c248:	d028      	beq.n	800c29c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <osMessageQueueGet+0x34>
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <osMessageQueueGet+0x34>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c25c:	f06f 0303 	mvn.w	r3, #3
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	e037      	b.n	800c2d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c264:	2300      	movs	r3, #0
 800c266:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c268:	f107 0310 	add.w	r3, r7, #16
 800c26c:	461a      	mov	r2, r3
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	69b8      	ldr	r0, [r7, #24]
 800c272:	f000 fcd7 	bl	800cc24 <xQueueReceiveFromISR>
 800c276:	4603      	mov	r3, r0
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d003      	beq.n	800c284 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c27c:	f06f 0302 	mvn.w	r3, #2
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	e027      	b.n	800c2d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d024      	beq.n	800c2d4 <osMessageQueueGet+0xac>
 800c28a:	4b15      	ldr	r3, [pc, #84]	; (800c2e0 <osMessageQueueGet+0xb8>)
 800c28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	e01b      	b.n	800c2d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d002      	beq.n	800c2a8 <osMessageQueueGet+0x80>
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d103      	bne.n	800c2b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c2a8:	f06f 0303 	mvn.w	r3, #3
 800c2ac:	61fb      	str	r3, [r7, #28]
 800c2ae:	e011      	b.n	800c2d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	68b9      	ldr	r1, [r7, #8]
 800c2b4:	69b8      	ldr	r0, [r7, #24]
 800c2b6:	f000 fbd5 	bl	800ca64 <xQueueReceive>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d009      	beq.n	800c2d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c2c6:	f06f 0301 	mvn.w	r3, #1
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e002      	b.n	800c2d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c2ce:	f06f 0302 	mvn.w	r3, #2
 800c2d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2d4:	69fb      	ldr	r3, [r7, #28]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3720      	adds	r7, #32
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	e000ed04 	.word	0xe000ed04

0800c2e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a07      	ldr	r2, [pc, #28]	; (800c310 <vApplicationGetIdleTaskMemory+0x2c>)
 800c2f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	4a06      	ldr	r2, [pc, #24]	; (800c314 <vApplicationGetIdleTaskMemory+0x30>)
 800c2fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2280      	movs	r2, #128	; 0x80
 800c300:	601a      	str	r2, [r3, #0]
}
 800c302:	bf00      	nop
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	200004c4 	.word	0x200004c4
 800c314:	20000520 	.word	0x20000520

0800c318 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	4a07      	ldr	r2, [pc, #28]	; (800c344 <vApplicationGetTimerTaskMemory+0x2c>)
 800c328:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	4a06      	ldr	r2, [pc, #24]	; (800c348 <vApplicationGetTimerTaskMemory+0x30>)
 800c32e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c336:	601a      	str	r2, [r3, #0]
}
 800c338:	bf00      	nop
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	20000720 	.word	0x20000720
 800c348:	2000077c 	.word	0x2000077c

0800c34c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f103 0208 	add.w	r2, r3, #8
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c364:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f103 0208 	add.w	r2, r3, #8
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f103 0208 	add.w	r2, r3, #8
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c39a:	bf00      	nop
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	689a      	ldr	r2, [r3, #8]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	601a      	str	r2, [r3, #0]
}
 800c3e2:	bf00      	nop
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c404:	d103      	bne.n	800c40e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	60fb      	str	r3, [r7, #12]
 800c40c:	e00c      	b.n	800c428 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3308      	adds	r3, #8
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e002      	b.n	800c41c <vListInsert+0x2e>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	429a      	cmp	r2, r3
 800c426:	d2f6      	bcs.n	800c416 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	1c5a      	adds	r2, r3, #1
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	601a      	str	r2, [r3, #0]
}
 800c454:	bf00      	nop
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	6892      	ldr	r2, [r2, #8]
 800c476:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	6852      	ldr	r2, [r2, #4]
 800c480:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d103      	bne.n	800c494 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	689a      	ldr	r2, [r3, #8]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	1e5a      	subs	r2, r3, #1
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10a      	bne.n	800c4de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c4da:	bf00      	nop
 800c4dc:	e7fe      	b.n	800c4dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c4de:	f002 f909 	bl	800e6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ea:	68f9      	ldr	r1, [r7, #12]
 800c4ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4ee:	fb01 f303 	mul.w	r3, r1, r3
 800c4f2:	441a      	add	r2, r3
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50e:	3b01      	subs	r3, #1
 800c510:	68f9      	ldr	r1, [r7, #12]
 800c512:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c514:	fb01 f303 	mul.w	r3, r1, r3
 800c518:	441a      	add	r2, r3
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	22ff      	movs	r2, #255	; 0xff
 800c522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	22ff      	movs	r2, #255	; 0xff
 800c52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d114      	bne.n	800c55e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01a      	beq.n	800c572 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3310      	adds	r3, #16
 800c540:	4618      	mov	r0, r3
 800c542:	f001 f9bd 	bl	800d8c0 <xTaskRemoveFromEventList>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d012      	beq.n	800c572 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c54c:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <xQueueGenericReset+0xcc>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	e009      	b.n	800c572 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3310      	adds	r3, #16
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fef2 	bl	800c34c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	3324      	adds	r3, #36	; 0x24
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7ff feed 	bl	800c34c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c572:	f002 f8ef 	bl	800e754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c576:	2301      	movs	r3, #1
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	e000ed04 	.word	0xe000ed04

0800c584 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08e      	sub	sp, #56	; 0x38
 800c588:	af02      	add	r7, sp, #8
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
 800c590:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <xQueueGenericCreateStatic+0x52>
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <xQueueGenericCreateStatic+0x56>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <xQueueGenericCreateStatic+0x58>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	623b      	str	r3, [r7, #32]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d102      	bne.n	800c602 <xQueueGenericCreateStatic+0x7e>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <xQueueGenericCreateStatic+0x82>
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <xQueueGenericCreateStatic+0x84>
 800c606:	2300      	movs	r3, #0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	61fb      	str	r3, [r7, #28]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c622:	2350      	movs	r3, #80	; 0x50
 800c624:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b50      	cmp	r3, #80	; 0x50
 800c62a:	d00a      	beq.n	800c642 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	61bb      	str	r3, [r7, #24]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c642:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00d      	beq.n	800c66a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c656:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	4613      	mov	r3, r2
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f000 f83f 	bl	800c6e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3730      	adds	r7, #48	; 0x30
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c674:	b580      	push	{r7, lr}
 800c676:	b08a      	sub	sp, #40	; 0x28
 800c678:	af02      	add	r7, sp, #8
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	613b      	str	r3, [r7, #16]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	fb02 f303 	mul.w	r3, r2, r3
 800c6a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	3350      	adds	r3, #80	; 0x50
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f002 f943 	bl	800e938 <pvPortMalloc>
 800c6b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d011      	beq.n	800c6de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	3350      	adds	r3, #80	; 0x50
 800c6c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6cc:	79fa      	ldrb	r2, [r7, #7]
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	68b9      	ldr	r1, [r7, #8]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f000 f805 	bl	800c6e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6de:	69bb      	ldr	r3, [r7, #24]
	}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3720      	adds	r7, #32
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d103      	bne.n	800c704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	e002      	b.n	800c70a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c716:	2101      	movs	r1, #1
 800c718:	69b8      	ldr	r0, [r7, #24]
 800c71a:	f7ff fecb 	bl	800c4b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	78fa      	ldrb	r2, [r7, #3]
 800c722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c726:	bf00      	nop
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08e      	sub	sp, #56	; 0x38
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c73e:	2300      	movs	r3, #0
 800c740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <xQueueGenericSend+0x32>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d103      	bne.n	800c770 <xQueueGenericSend+0x40>
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <xQueueGenericSend+0x44>
 800c770:	2301      	movs	r3, #1
 800c772:	e000      	b.n	800c776 <xQueueGenericSend+0x46>
 800c774:	2300      	movs	r3, #0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10a      	bne.n	800c790 <xQueueGenericSend+0x60>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c78c:	bf00      	nop
 800c78e:	e7fe      	b.n	800c78e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d103      	bne.n	800c79e <xQueueGenericSend+0x6e>
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d101      	bne.n	800c7a2 <xQueueGenericSend+0x72>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e000      	b.n	800c7a4 <xQueueGenericSend+0x74>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10a      	bne.n	800c7be <xQueueGenericSend+0x8e>
	__asm volatile
 800c7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	623b      	str	r3, [r7, #32]
}
 800c7ba:	bf00      	nop
 800c7bc:	e7fe      	b.n	800c7bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7be:	f001 fa3d 	bl	800dc3c <xTaskGetSchedulerState>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d102      	bne.n	800c7ce <xQueueGenericSend+0x9e>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <xQueueGenericSend+0xa2>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e000      	b.n	800c7d4 <xQueueGenericSend+0xa4>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10a      	bne.n	800c7ee <xQueueGenericSend+0xbe>
	__asm volatile
 800c7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	61fb      	str	r3, [r7, #28]
}
 800c7ea:	bf00      	nop
 800c7ec:	e7fe      	b.n	800c7ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7ee:	f001 ff81 	bl	800e6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d302      	bcc.n	800c804 <xQueueGenericSend+0xd4>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b02      	cmp	r3, #2
 800c802:	d129      	bne.n	800c858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c80a:	f000 fa8b 	bl	800cd24 <prvCopyDataToQueue>
 800c80e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d010      	beq.n	800c83a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	3324      	adds	r3, #36	; 0x24
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 f84f 	bl	800d8c0 <xTaskRemoveFromEventList>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d013      	beq.n	800c850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c828:	4b3f      	ldr	r3, [pc, #252]	; (800c928 <xQueueGenericSend+0x1f8>)
 800c82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	e00a      	b.n	800c850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d007      	beq.n	800c850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c840:	4b39      	ldr	r3, [pc, #228]	; (800c928 <xQueueGenericSend+0x1f8>)
 800c842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c850:	f001 ff80 	bl	800e754 <vPortExitCritical>
				return pdPASS;
 800c854:	2301      	movs	r3, #1
 800c856:	e063      	b.n	800c920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d103      	bne.n	800c866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c85e:	f001 ff79 	bl	800e754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c862:	2300      	movs	r3, #0
 800c864:	e05c      	b.n	800c920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d106      	bne.n	800c87a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c86c:	f107 0314 	add.w	r3, r7, #20
 800c870:	4618      	mov	r0, r3
 800c872:	f001 f889 	bl	800d988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c876:	2301      	movs	r3, #1
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c87a:	f001 ff6b 	bl	800e754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c87e:	f000 fdfb 	bl	800d478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c882:	f001 ff37 	bl	800e6f4 <vPortEnterCritical>
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c88c:	b25b      	sxtb	r3, r3
 800c88e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c892:	d103      	bne.n	800c89c <xQueueGenericSend+0x16c>
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a2:	b25b      	sxtb	r3, r3
 800c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8a8:	d103      	bne.n	800c8b2 <xQueueGenericSend+0x182>
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8b2:	f001 ff4f 	bl	800e754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8b6:	1d3a      	adds	r2, r7, #4
 800c8b8:	f107 0314 	add.w	r3, r7, #20
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 f878 	bl	800d9b4 <xTaskCheckForTimeOut>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d124      	bne.n	800c914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8cc:	f000 fb22 	bl	800cf14 <prvIsQueueFull>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d018      	beq.n	800c908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	3310      	adds	r3, #16
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 ff9e 	bl	800d820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8e6:	f000 faad 	bl	800ce44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c8ea:	f000 fdd3 	bl	800d494 <xTaskResumeAll>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f47f af7c 	bne.w	800c7ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <xQueueGenericSend+0x1f8>)
 800c8f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	e772      	b.n	800c7ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c90a:	f000 fa9b 	bl	800ce44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c90e:	f000 fdc1 	bl	800d494 <xTaskResumeAll>
 800c912:	e76c      	b.n	800c7ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c916:	f000 fa95 	bl	800ce44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c91a:	f000 fdbb 	bl	800d494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c91e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c920:	4618      	mov	r0, r3
 800c922:	3738      	adds	r7, #56	; 0x38
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b090      	sub	sp, #64	; 0x40
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <xQueueGenericSendFromISR+0x3c>
 800c960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <xQueueGenericSendFromISR+0x40>
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <xQueueGenericSendFromISR+0x42>
 800c96c:	2300      	movs	r3, #0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10a      	bne.n	800c988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c984:	bf00      	nop
 800c986:	e7fe      	b.n	800c986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d103      	bne.n	800c996 <xQueueGenericSendFromISR+0x6a>
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c992:	2b01      	cmp	r3, #1
 800c994:	d101      	bne.n	800c99a <xQueueGenericSendFromISR+0x6e>
 800c996:	2301      	movs	r3, #1
 800c998:	e000      	b.n	800c99c <xQueueGenericSendFromISR+0x70>
 800c99a:	2300      	movs	r3, #0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	623b      	str	r3, [r7, #32]
}
 800c9b2:	bf00      	nop
 800c9b4:	e7fe      	b.n	800c9b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9b6:	f001 ff7f 	bl	800e8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c9ba:	f3ef 8211 	mrs	r2, BASEPRI
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	61fa      	str	r2, [r7, #28]
 800c9d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d302      	bcc.n	800c9e8 <xQueueGenericSendFromISR+0xbc>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d12f      	bne.n	800ca48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9f8:	683a      	ldr	r2, [r7, #0]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9fe:	f000 f991 	bl	800cd24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ca06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca0a:	d112      	bne.n	800ca32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d016      	beq.n	800ca42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	3324      	adds	r3, #36	; 0x24
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 ff51 	bl	800d8c0 <xTaskRemoveFromEventList>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00e      	beq.n	800ca42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00b      	beq.n	800ca42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]
 800ca30:	e007      	b.n	800ca42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca36:	3301      	adds	r3, #1
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	b25a      	sxtb	r2, r3
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca42:	2301      	movs	r3, #1
 800ca44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ca46:	e001      	b.n	800ca4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3740      	adds	r7, #64	; 0x40
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08c      	sub	sp, #48	; 0x30
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca70:	2300      	movs	r3, #0
 800ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <xQueueReceive+0x30>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	623b      	str	r3, [r7, #32]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d103      	bne.n	800caa2 <xQueueReceive+0x3e>
 800ca9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <xQueueReceive+0x42>
 800caa2:	2301      	movs	r3, #1
 800caa4:	e000      	b.n	800caa8 <xQueueReceive+0x44>
 800caa6:	2300      	movs	r3, #0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <xQueueReceive+0x5e>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	61fb      	str	r3, [r7, #28]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cac2:	f001 f8bb 	bl	800dc3c <xTaskGetSchedulerState>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d102      	bne.n	800cad2 <xQueueReceive+0x6e>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <xQueueReceive+0x72>
 800cad2:	2301      	movs	r3, #1
 800cad4:	e000      	b.n	800cad8 <xQueueReceive+0x74>
 800cad6:	2300      	movs	r3, #0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10a      	bne.n	800caf2 <xQueueReceive+0x8e>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	61bb      	str	r3, [r7, #24]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caf2:	f001 fdff 	bl	800e6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d01f      	beq.n	800cb42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb02:	68b9      	ldr	r1, [r7, #8]
 800cb04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb06:	f000 f977 	bl	800cdf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	1e5a      	subs	r2, r3, #1
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00f      	beq.n	800cb3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	3310      	adds	r3, #16
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fece 	bl	800d8c0 <xTaskRemoveFromEventList>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d007      	beq.n	800cb3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb2a:	4b3d      	ldr	r3, [pc, #244]	; (800cc20 <xQueueReceive+0x1bc>)
 800cb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb3a:	f001 fe0b 	bl	800e754 <vPortExitCritical>
				return pdPASS;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e069      	b.n	800cc16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d103      	bne.n	800cb50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb48:	f001 fe04 	bl	800e754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e062      	b.n	800cc16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d106      	bne.n	800cb64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb56:	f107 0310 	add.w	r3, r7, #16
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 ff14 	bl	800d988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb60:	2301      	movs	r3, #1
 800cb62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb64:	f001 fdf6 	bl	800e754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb68:	f000 fc86 	bl	800d478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb6c:	f001 fdc2 	bl	800e6f4 <vPortEnterCritical>
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb76:	b25b      	sxtb	r3, r3
 800cb78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb7c:	d103      	bne.n	800cb86 <xQueueReceive+0x122>
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb8c:	b25b      	sxtb	r3, r3
 800cb8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb92:	d103      	bne.n	800cb9c <xQueueReceive+0x138>
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb9c:	f001 fdda 	bl	800e754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cba0:	1d3a      	adds	r2, r7, #4
 800cba2:	f107 0310 	add.w	r3, r7, #16
 800cba6:	4611      	mov	r1, r2
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 ff03 	bl	800d9b4 <xTaskCheckForTimeOut>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d123      	bne.n	800cbfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbb6:	f000 f997 	bl	800cee8 <prvIsQueueEmpty>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d017      	beq.n	800cbf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	3324      	adds	r3, #36	; 0x24
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fe29 	bl	800d820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbd0:	f000 f938 	bl	800ce44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbd4:	f000 fc5e 	bl	800d494 <xTaskResumeAll>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d189      	bne.n	800caf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <xQueueReceive+0x1bc>)
 800cbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	e780      	b.n	800caf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf2:	f000 f927 	bl	800ce44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbf6:	f000 fc4d 	bl	800d494 <xTaskResumeAll>
 800cbfa:	e77a      	b.n	800caf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbfe:	f000 f921 	bl	800ce44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc02:	f000 fc47 	bl	800d494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc08:	f000 f96e 	bl	800cee8 <prvIsQueueEmpty>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f43f af6f 	beq.w	800caf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3730      	adds	r7, #48	; 0x30
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	e000ed04 	.word	0xe000ed04

0800cc24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08e      	sub	sp, #56	; 0x38
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10a      	bne.n	800cc50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	623b      	str	r3, [r7, #32]
}
 800cc4c:	bf00      	nop
 800cc4e:	e7fe      	b.n	800cc4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <xQueueReceiveFromISR+0x3a>
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <xQueueReceiveFromISR+0x3e>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e000      	b.n	800cc64 <xQueueReceiveFromISR+0x40>
 800cc62:	2300      	movs	r3, #0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10a      	bne.n	800cc7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	61fb      	str	r3, [r7, #28]
}
 800cc7a:	bf00      	nop
 800cc7c:	e7fe      	b.n	800cc7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc7e:	f001 fe1b 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800cc82:	f3ef 8211 	mrs	r2, BASEPRI
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	61ba      	str	r2, [r7, #24]
 800cc98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cc9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d02f      	beq.n	800cd0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccb4:	68b9      	ldr	r1, [r7, #8]
 800ccb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccb8:	f000 f89e 	bl	800cdf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	1e5a      	subs	r2, r3, #1
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ccc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cccc:	d112      	bne.n	800ccf4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d016      	beq.n	800cd04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	3310      	adds	r3, #16
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 fdf0 	bl	800d8c0 <xTaskRemoveFromEventList>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00e      	beq.n	800cd04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	e007      	b.n	800cd04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ccf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	b25a      	sxtb	r2, r3
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cd04:	2301      	movs	r3, #1
 800cd06:	637b      	str	r3, [r7, #52]	; 0x34
 800cd08:	e001      	b.n	800cd0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f383 8811 	msr	BASEPRI, r3
}
 800cd18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3738      	adds	r7, #56	; 0x38
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd30:	2300      	movs	r3, #0
 800cd32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10d      	bne.n	800cd5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d14d      	bne.n	800cde6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 ff92 	bl	800dc78 <xTaskPriorityDisinherit>
 800cd54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	609a      	str	r2, [r3, #8]
 800cd5c:	e043      	b.n	800cde6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d119      	bne.n	800cd98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6858      	ldr	r0, [r3, #4]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	68b9      	ldr	r1, [r7, #8]
 800cd70:	f002 fb08 	bl	800f384 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	685a      	ldr	r2, [r3, #4]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7c:	441a      	add	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d32b      	bcc.n	800cde6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	605a      	str	r2, [r3, #4]
 800cd96:	e026      	b.n	800cde6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	68d8      	ldr	r0, [r3, #12]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda0:	461a      	mov	r2, r3
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	f002 faee 	bl	800f384 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	68da      	ldr	r2, [r3, #12]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb0:	425b      	negs	r3, r3
 800cdb2:	441a      	add	r2, r3
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68da      	ldr	r2, [r3, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d207      	bcs.n	800cdd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	689a      	ldr	r2, [r3, #8]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdcc:	425b      	negs	r3, r3
 800cdce:	441a      	add	r2, r3
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d105      	bne.n	800cde6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	3b01      	subs	r3, #1
 800cde4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cdee:	697b      	ldr	r3, [r7, #20]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3718      	adds	r7, #24
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d018      	beq.n	800ce3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce12:	441a      	add	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	68da      	ldr	r2, [r3, #12]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d303      	bcc.n	800ce2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	68d9      	ldr	r1, [r3, #12]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce34:	461a      	mov	r2, r3
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	f002 faa4 	bl	800f384 <memcpy>
	}
}
 800ce3c:	bf00      	nop
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce4c:	f001 fc52 	bl	800e6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce58:	e011      	b.n	800ce7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d012      	beq.n	800ce88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3324      	adds	r3, #36	; 0x24
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 fd2a 	bl	800d8c0 <xTaskRemoveFromEventList>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d001      	beq.n	800ce76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce72:	f000 fe01 	bl	800da78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dce9      	bgt.n	800ce5a <prvUnlockQueue+0x16>
 800ce86:	e000      	b.n	800ce8a <prvUnlockQueue+0x46>
					break;
 800ce88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	22ff      	movs	r2, #255	; 0xff
 800ce8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ce92:	f001 fc5f 	bl	800e754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce96:	f001 fc2d 	bl	800e6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cea0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cea2:	e011      	b.n	800cec8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d012      	beq.n	800ced2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	3310      	adds	r3, #16
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f000 fd05 	bl	800d8c0 <xTaskRemoveFromEventList>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cebc:	f000 fddc 	bl	800da78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	3b01      	subs	r3, #1
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dce9      	bgt.n	800cea4 <prvUnlockQueue+0x60>
 800ced0:	e000      	b.n	800ced4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ced2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	22ff      	movs	r2, #255	; 0xff
 800ced8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cedc:	f001 fc3a 	bl	800e754 <vPortExitCritical>
}
 800cee0:	bf00      	nop
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cef0:	f001 fc00 	bl	800e6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d102      	bne.n	800cf02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cefc:	2301      	movs	r3, #1
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	e001      	b.n	800cf06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf06:	f001 fc25 	bl	800e754 <vPortExitCritical>

	return xReturn;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf1c:	f001 fbea 	bl	800e6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d102      	bne.n	800cf32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	e001      	b.n	800cf36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf36:	f001 fc0d 	bl	800e754 <vPortExitCritical>

	return xReturn;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	e014      	b.n	800cf7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cf54:	4a0f      	ldr	r2, [pc, #60]	; (800cf94 <vQueueAddToRegistry+0x50>)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10b      	bne.n	800cf78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cf60:	490c      	ldr	r1, [pc, #48]	; (800cf94 <vQueueAddToRegistry+0x50>)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cf6a:	4a0a      	ldr	r2, [pc, #40]	; (800cf94 <vQueueAddToRegistry+0x50>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	4413      	add	r3, r2
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cf76:	e006      	b.n	800cf86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	60fb      	str	r3, [r7, #12]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	d9e7      	bls.n	800cf54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20005090 	.word	0x20005090

0800cf98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cfa8:	f001 fba4 	bl	800e6f4 <vPortEnterCritical>
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfb2:	b25b      	sxtb	r3, r3
 800cfb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfb8:	d103      	bne.n	800cfc2 <vQueueWaitForMessageRestricted+0x2a>
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfc8:	b25b      	sxtb	r3, r3
 800cfca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfce:	d103      	bne.n	800cfd8 <vQueueWaitForMessageRestricted+0x40>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfd8:	f001 fbbc 	bl	800e754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d106      	bne.n	800cff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	3324      	adds	r3, #36	; 0x24
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	68b9      	ldr	r1, [r7, #8]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 fc3b 	bl	800d868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cff2:	6978      	ldr	r0, [r7, #20]
 800cff4:	f7ff ff26 	bl	800ce44 <prvUnlockQueue>
	}
 800cff8:	bf00      	nop
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d000:	b580      	push	{r7, lr}
 800d002:	b08e      	sub	sp, #56	; 0x38
 800d004:	af04      	add	r7, sp, #16
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10a      	bne.n	800d02a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	623b      	str	r3, [r7, #32]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <xTaskCreateStatic+0x46>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	61fb      	str	r3, [r7, #28]
}
 800d042:	bf00      	nop
 800d044:	e7fe      	b.n	800d044 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d046:	235c      	movs	r3, #92	; 0x5c
 800d048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2b5c      	cmp	r3, #92	; 0x5c
 800d04e:	d00a      	beq.n	800d066 <xTaskCreateStatic+0x66>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	61bb      	str	r3, [r7, #24]
}
 800d062:	bf00      	nop
 800d064:	e7fe      	b.n	800d064 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d066:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d01e      	beq.n	800d0ac <xTaskCreateStatic+0xac>
 800d06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d070:	2b00      	cmp	r3, #0
 800d072:	d01b      	beq.n	800d0ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d07c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	2202      	movs	r2, #2
 800d082:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d086:	2300      	movs	r3, #0
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	9302      	str	r3, [sp, #8]
 800d08e:	f107 0314 	add.w	r3, r7, #20
 800d092:	9301      	str	r3, [sp, #4]
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	68b9      	ldr	r1, [r7, #8]
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f000 f850 	bl	800d144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0a6:	f000 f8dd 	bl	800d264 <prvAddNewTaskToReadyList>
 800d0aa:	e001      	b.n	800d0b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d0b0:	697b      	ldr	r3, [r7, #20]
	}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3728      	adds	r7, #40	; 0x28
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b08c      	sub	sp, #48	; 0x30
 800d0be:	af04      	add	r7, sp, #16
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	603b      	str	r3, [r7, #0]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0ca:	88fb      	ldrh	r3, [r7, #6]
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 fc32 	bl	800e938 <pvPortMalloc>
 800d0d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00e      	beq.n	800d0fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0dc:	205c      	movs	r0, #92	; 0x5c
 800d0de:	f001 fc2b 	bl	800e938 <pvPortMalloc>
 800d0e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	631a      	str	r2, [r3, #48]	; 0x30
 800d0f0:	e005      	b.n	800d0fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0f2:	6978      	ldr	r0, [r7, #20]
 800d0f4:	f001 fcec 	bl	800ead0 <vPortFree>
 800d0f8:	e001      	b.n	800d0fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d017      	beq.n	800d134 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d10c:	88fa      	ldrh	r2, [r7, #6]
 800d10e:	2300      	movs	r3, #0
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	9302      	str	r3, [sp, #8]
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	9301      	str	r3, [sp, #4]
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 f80e 	bl	800d144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d128:	69f8      	ldr	r0, [r7, #28]
 800d12a:	f000 f89b 	bl	800d264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d12e:	2301      	movs	r3, #1
 800d130:	61bb      	str	r3, [r7, #24]
 800d132:	e002      	b.n	800d13a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d138:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d13a:	69bb      	ldr	r3, [r7, #24]
	}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3720      	adds	r7, #32
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b088      	sub	sp, #32
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	461a      	mov	r2, r3
 800d15c:	21a5      	movs	r1, #165	; 0xa5
 800d15e:	f002 f91f 	bl	800f3a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d16c:	3b01      	subs	r3, #1
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	f023 0307 	bic.w	r3, r3, #7
 800d17a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	f003 0307 	and.w	r3, r3, #7
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	617b      	str	r3, [r7, #20]
}
 800d198:	bf00      	nop
 800d19a:	e7fe      	b.n	800d19a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d01f      	beq.n	800d1e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61fb      	str	r3, [r7, #28]
 800d1a6:	e012      	b.n	800d1ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	7819      	ldrb	r1, [r3, #0]
 800d1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	3334      	adds	r3, #52	; 0x34
 800d1b8:	460a      	mov	r2, r1
 800d1ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d006      	beq.n	800d1d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	61fb      	str	r3, [r7, #28]
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	2b0f      	cmp	r3, #15
 800d1d2:	d9e9      	bls.n	800d1a8 <prvInitialiseNewTask+0x64>
 800d1d4:	e000      	b.n	800d1d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800d1d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1e0:	e003      	b.n	800d1ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	2b37      	cmp	r3, #55	; 0x37
 800d1ee:	d901      	bls.n	800d1f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1f0:	2337      	movs	r3, #55	; 0x37
 800d1f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	2200      	movs	r2, #0
 800d204:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	3304      	adds	r3, #4
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7ff f8be 	bl	800c38c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d212:	3318      	adds	r3, #24
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff f8b9 	bl	800c38c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d21e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d22e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	2200      	movs	r2, #0
 800d234:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	68f9      	ldr	r1, [r7, #12]
 800d242:	69b8      	ldr	r0, [r7, #24]
 800d244:	f001 f928 	bl	800e498 <pxPortInitialiseStack>
 800d248:	4602      	mov	r2, r0
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d25a:	bf00      	nop
 800d25c:	3720      	adds	r7, #32
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d26c:	f001 fa42 	bl	800e6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d270:	4b2d      	ldr	r3, [pc, #180]	; (800d328 <prvAddNewTaskToReadyList+0xc4>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3301      	adds	r3, #1
 800d276:	4a2c      	ldr	r2, [pc, #176]	; (800d328 <prvAddNewTaskToReadyList+0xc4>)
 800d278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d27a:	4b2c      	ldr	r3, [pc, #176]	; (800d32c <prvAddNewTaskToReadyList+0xc8>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d109      	bne.n	800d296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d282:	4a2a      	ldr	r2, [pc, #168]	; (800d32c <prvAddNewTaskToReadyList+0xc8>)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d288:	4b27      	ldr	r3, [pc, #156]	; (800d328 <prvAddNewTaskToReadyList+0xc4>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d110      	bne.n	800d2b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d290:	f000 fc16 	bl	800dac0 <prvInitialiseTaskLists>
 800d294:	e00d      	b.n	800d2b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d296:	4b26      	ldr	r3, [pc, #152]	; (800d330 <prvAddNewTaskToReadyList+0xcc>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d109      	bne.n	800d2b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d29e:	4b23      	ldr	r3, [pc, #140]	; (800d32c <prvAddNewTaskToReadyList+0xc8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d802      	bhi.n	800d2b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d2ac:	4a1f      	ldr	r2, [pc, #124]	; (800d32c <prvAddNewTaskToReadyList+0xc8>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d2b2:	4b20      	ldr	r3, [pc, #128]	; (800d334 <prvAddNewTaskToReadyList+0xd0>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	4a1e      	ldr	r2, [pc, #120]	; (800d334 <prvAddNewTaskToReadyList+0xd0>)
 800d2ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d2bc:	4b1d      	ldr	r3, [pc, #116]	; (800d334 <prvAddNewTaskToReadyList+0xd0>)
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c8:	4b1b      	ldr	r3, [pc, #108]	; (800d338 <prvAddNewTaskToReadyList+0xd4>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d903      	bls.n	800d2d8 <prvAddNewTaskToReadyList+0x74>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d4:	4a18      	ldr	r2, [pc, #96]	; (800d338 <prvAddNewTaskToReadyList+0xd4>)
 800d2d6:	6013      	str	r3, [r2, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2dc:	4613      	mov	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	4a15      	ldr	r2, [pc, #84]	; (800d33c <prvAddNewTaskToReadyList+0xd8>)
 800d2e6:	441a      	add	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	f7ff f859 	bl	800c3a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d2f4:	f001 fa2e 	bl	800e754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d2f8:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <prvAddNewTaskToReadyList+0xcc>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00e      	beq.n	800d31e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d300:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <prvAddNewTaskToReadyList+0xc8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d207      	bcs.n	800d31e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d30e:	4b0c      	ldr	r3, [pc, #48]	; (800d340 <prvAddNewTaskToReadyList+0xdc>)
 800d310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d314:	601a      	str	r2, [r3, #0]
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d31e:	bf00      	nop
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20001050 	.word	0x20001050
 800d32c:	20000b7c 	.word	0x20000b7c
 800d330:	2000105c 	.word	0x2000105c
 800d334:	2000106c 	.word	0x2000106c
 800d338:	20001058 	.word	0x20001058
 800d33c:	20000b80 	.word	0x20000b80
 800d340:	e000ed04 	.word	0xe000ed04

0800d344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d017      	beq.n	800d386 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d356:	4b13      	ldr	r3, [pc, #76]	; (800d3a4 <vTaskDelay+0x60>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <vTaskDelay+0x30>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	60bb      	str	r3, [r7, #8]
}
 800d370:	bf00      	nop
 800d372:	e7fe      	b.n	800d372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d374:	f000 f880 	bl	800d478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d378:	2100      	movs	r1, #0
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fcea 	bl	800dd54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d380:	f000 f888 	bl	800d494 <xTaskResumeAll>
 800d384:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d107      	bne.n	800d39c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d38c:	4b06      	ldr	r3, [pc, #24]	; (800d3a8 <vTaskDelay+0x64>)
 800d38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d39c:	bf00      	nop
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20001078 	.word	0x20001078
 800d3a8:	e000ed04 	.word	0xe000ed04

0800d3ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08a      	sub	sp, #40	; 0x28
 800d3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	1d39      	adds	r1, r7, #4
 800d3be:	f107 0308 	add.w	r3, r7, #8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe ff8e 	bl	800c2e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	9202      	str	r2, [sp, #8]
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	460a      	mov	r2, r1
 800d3da:	4921      	ldr	r1, [pc, #132]	; (800d460 <vTaskStartScheduler+0xb4>)
 800d3dc:	4821      	ldr	r0, [pc, #132]	; (800d464 <vTaskStartScheduler+0xb8>)
 800d3de:	f7ff fe0f 	bl	800d000 <xTaskCreateStatic>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	4a20      	ldr	r2, [pc, #128]	; (800d468 <vTaskStartScheduler+0xbc>)
 800d3e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d3e8:	4b1f      	ldr	r3, [pc, #124]	; (800d468 <vTaskStartScheduler+0xbc>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e001      	b.n	800d3fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d102      	bne.n	800d406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d400:	f000 fcfc 	bl	800ddfc <xTimerCreateTimerTask>
 800d404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d116      	bne.n	800d43a <vTaskStartScheduler+0x8e>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	613b      	str	r3, [r7, #16]
}
 800d41e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d420:	4b12      	ldr	r3, [pc, #72]	; (800d46c <vTaskStartScheduler+0xc0>)
 800d422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d428:	4b11      	ldr	r3, [pc, #68]	; (800d470 <vTaskStartScheduler+0xc4>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d42e:	4b11      	ldr	r3, [pc, #68]	; (800d474 <vTaskStartScheduler+0xc8>)
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d434:	f001 f8bc 	bl	800e5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d438:	e00e      	b.n	800d458 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d440:	d10a      	bne.n	800d458 <vTaskStartScheduler+0xac>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	60fb      	str	r3, [r7, #12]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <vTaskStartScheduler+0xaa>
}
 800d458:	bf00      	nop
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0800f6d4 	.word	0x0800f6d4
 800d464:	0800da91 	.word	0x0800da91
 800d468:	20001074 	.word	0x20001074
 800d46c:	20001070 	.word	0x20001070
 800d470:	2000105c 	.word	0x2000105c
 800d474:	20001054 	.word	0x20001054

0800d478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d478:	b480      	push	{r7}
 800d47a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d47c:	4b04      	ldr	r3, [pc, #16]	; (800d490 <vTaskSuspendAll+0x18>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	3301      	adds	r3, #1
 800d482:	4a03      	ldr	r2, [pc, #12]	; (800d490 <vTaskSuspendAll+0x18>)
 800d484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d486:	bf00      	nop
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	20001078 	.word	0x20001078

0800d494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4a2:	4b42      	ldr	r3, [pc, #264]	; (800d5ac <xTaskResumeAll+0x118>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d10a      	bne.n	800d4c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	603b      	str	r3, [r7, #0]
}
 800d4bc:	bf00      	nop
 800d4be:	e7fe      	b.n	800d4be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4c0:	f001 f918 	bl	800e6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4c4:	4b39      	ldr	r3, [pc, #228]	; (800d5ac <xTaskResumeAll+0x118>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	4a38      	ldr	r2, [pc, #224]	; (800d5ac <xTaskResumeAll+0x118>)
 800d4cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ce:	4b37      	ldr	r3, [pc, #220]	; (800d5ac <xTaskResumeAll+0x118>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d162      	bne.n	800d59c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4d6:	4b36      	ldr	r3, [pc, #216]	; (800d5b0 <xTaskResumeAll+0x11c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d05e      	beq.n	800d59c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4de:	e02f      	b.n	800d540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4e0:	4b34      	ldr	r3, [pc, #208]	; (800d5b4 <xTaskResumeAll+0x120>)
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3318      	adds	r3, #24
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fe ffb7 	bl	800c460 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe ffb2 	bl	800c460 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d500:	4b2d      	ldr	r3, [pc, #180]	; (800d5b8 <xTaskResumeAll+0x124>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	429a      	cmp	r2, r3
 800d506:	d903      	bls.n	800d510 <xTaskResumeAll+0x7c>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50c:	4a2a      	ldr	r2, [pc, #168]	; (800d5b8 <xTaskResumeAll+0x124>)
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d514:	4613      	mov	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4413      	add	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4a27      	ldr	r2, [pc, #156]	; (800d5bc <xTaskResumeAll+0x128>)
 800d51e:	441a      	add	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	3304      	adds	r3, #4
 800d524:	4619      	mov	r1, r3
 800d526:	4610      	mov	r0, r2
 800d528:	f7fe ff3d 	bl	800c3a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d530:	4b23      	ldr	r3, [pc, #140]	; (800d5c0 <xTaskResumeAll+0x12c>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d536:	429a      	cmp	r2, r3
 800d538:	d302      	bcc.n	800d540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d53a:	4b22      	ldr	r3, [pc, #136]	; (800d5c4 <xTaskResumeAll+0x130>)
 800d53c:	2201      	movs	r2, #1
 800d53e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d540:	4b1c      	ldr	r3, [pc, #112]	; (800d5b4 <xTaskResumeAll+0x120>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1cb      	bne.n	800d4e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d54e:	f000 fb55 	bl	800dbfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d552:	4b1d      	ldr	r3, [pc, #116]	; (800d5c8 <xTaskResumeAll+0x134>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d010      	beq.n	800d580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d55e:	f000 f847 	bl	800d5f0 <xTaskIncrementTick>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d568:	4b16      	ldr	r3, [pc, #88]	; (800d5c4 <xTaskResumeAll+0x130>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	3b01      	subs	r3, #1
 800d572:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1f1      	bne.n	800d55e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <xTaskResumeAll+0x134>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d580:	4b10      	ldr	r3, [pc, #64]	; (800d5c4 <xTaskResumeAll+0x130>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d009      	beq.n	800d59c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d588:	2301      	movs	r3, #1
 800d58a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d58c:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <xTaskResumeAll+0x138>)
 800d58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d59c:	f001 f8da 	bl	800e754 <vPortExitCritical>

	return xAlreadyYielded;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20001078 	.word	0x20001078
 800d5b0:	20001050 	.word	0x20001050
 800d5b4:	20001010 	.word	0x20001010
 800d5b8:	20001058 	.word	0x20001058
 800d5bc:	20000b80 	.word	0x20000b80
 800d5c0:	20000b7c 	.word	0x20000b7c
 800d5c4:	20001064 	.word	0x20001064
 800d5c8:	20001060 	.word	0x20001060
 800d5cc:	e000ed04 	.word	0xe000ed04

0800d5d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d5d6:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <xTaskGetTickCount+0x1c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d5dc:	687b      	ldr	r3, [r7, #4]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	20001054 	.word	0x20001054

0800d5f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5fa:	4b4f      	ldr	r3, [pc, #316]	; (800d738 <xTaskIncrementTick+0x148>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f040 808f 	bne.w	800d722 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d604:	4b4d      	ldr	r3, [pc, #308]	; (800d73c <xTaskIncrementTick+0x14c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3301      	adds	r3, #1
 800d60a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d60c:	4a4b      	ldr	r2, [pc, #300]	; (800d73c <xTaskIncrementTick+0x14c>)
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d120      	bne.n	800d65a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d618:	4b49      	ldr	r3, [pc, #292]	; (800d740 <xTaskIncrementTick+0x150>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00a      	beq.n	800d638 <xTaskIncrementTick+0x48>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	603b      	str	r3, [r7, #0]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <xTaskIncrementTick+0x46>
 800d638:	4b41      	ldr	r3, [pc, #260]	; (800d740 <xTaskIncrementTick+0x150>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	4b41      	ldr	r3, [pc, #260]	; (800d744 <xTaskIncrementTick+0x154>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a3f      	ldr	r2, [pc, #252]	; (800d740 <xTaskIncrementTick+0x150>)
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	4a3f      	ldr	r2, [pc, #252]	; (800d744 <xTaskIncrementTick+0x154>)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	4b3e      	ldr	r3, [pc, #248]	; (800d748 <xTaskIncrementTick+0x158>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	4a3d      	ldr	r2, [pc, #244]	; (800d748 <xTaskIncrementTick+0x158>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	f000 fad1 	bl	800dbfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d65a:	4b3c      	ldr	r3, [pc, #240]	; (800d74c <xTaskIncrementTick+0x15c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	429a      	cmp	r2, r3
 800d662:	d349      	bcc.n	800d6f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d664:	4b36      	ldr	r3, [pc, #216]	; (800d740 <xTaskIncrementTick+0x150>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d104      	bne.n	800d678 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d66e:	4b37      	ldr	r3, [pc, #220]	; (800d74c <xTaskIncrementTick+0x15c>)
 800d670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d674:	601a      	str	r2, [r3, #0]
					break;
 800d676:	e03f      	b.n	800d6f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d678:	4b31      	ldr	r3, [pc, #196]	; (800d740 <xTaskIncrementTick+0x150>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d203      	bcs.n	800d698 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d690:	4a2e      	ldr	r2, [pc, #184]	; (800d74c <xTaskIncrementTick+0x15c>)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d696:	e02f      	b.n	800d6f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	3304      	adds	r3, #4
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fe fedf 	bl	800c460 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	3318      	adds	r3, #24
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fed6 	bl	800c460 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b8:	4b25      	ldr	r3, [pc, #148]	; (800d750 <xTaskIncrementTick+0x160>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d903      	bls.n	800d6c8 <xTaskIncrementTick+0xd8>
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c4:	4a22      	ldr	r2, [pc, #136]	; (800d750 <xTaskIncrementTick+0x160>)
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4a1f      	ldr	r2, [pc, #124]	; (800d754 <xTaskIncrementTick+0x164>)
 800d6d6:	441a      	add	r2, r3
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	3304      	adds	r3, #4
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	f7fe fe61 	bl	800c3a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e8:	4b1b      	ldr	r3, [pc, #108]	; (800d758 <xTaskIncrementTick+0x168>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d3b8      	bcc.n	800d664 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6f6:	e7b5      	b.n	800d664 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6f8:	4b17      	ldr	r3, [pc, #92]	; (800d758 <xTaskIncrementTick+0x168>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fe:	4915      	ldr	r1, [pc, #84]	; (800d754 <xTaskIncrementTick+0x164>)
 800d700:	4613      	mov	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4413      	add	r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	440b      	add	r3, r1
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d901      	bls.n	800d714 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d710:	2301      	movs	r3, #1
 800d712:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d714:	4b11      	ldr	r3, [pc, #68]	; (800d75c <xTaskIncrementTick+0x16c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d007      	beq.n	800d72c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d71c:	2301      	movs	r3, #1
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	e004      	b.n	800d72c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d722:	4b0f      	ldr	r3, [pc, #60]	; (800d760 <xTaskIncrementTick+0x170>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3301      	adds	r3, #1
 800d728:	4a0d      	ldr	r2, [pc, #52]	; (800d760 <xTaskIncrementTick+0x170>)
 800d72a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d72c:	697b      	ldr	r3, [r7, #20]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20001078 	.word	0x20001078
 800d73c:	20001054 	.word	0x20001054
 800d740:	20001008 	.word	0x20001008
 800d744:	2000100c 	.word	0x2000100c
 800d748:	20001068 	.word	0x20001068
 800d74c:	20001070 	.word	0x20001070
 800d750:	20001058 	.word	0x20001058
 800d754:	20000b80 	.word	0x20000b80
 800d758:	20000b7c 	.word	0x20000b7c
 800d75c:	20001064 	.word	0x20001064
 800d760:	20001060 	.word	0x20001060

0800d764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d76a:	4b28      	ldr	r3, [pc, #160]	; (800d80c <vTaskSwitchContext+0xa8>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d003      	beq.n	800d77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d772:	4b27      	ldr	r3, [pc, #156]	; (800d810 <vTaskSwitchContext+0xac>)
 800d774:	2201      	movs	r2, #1
 800d776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d778:	e041      	b.n	800d7fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d77a:	4b25      	ldr	r3, [pc, #148]	; (800d810 <vTaskSwitchContext+0xac>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d780:	4b24      	ldr	r3, [pc, #144]	; (800d814 <vTaskSwitchContext+0xb0>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	60fb      	str	r3, [r7, #12]
 800d786:	e010      	b.n	800d7aa <vTaskSwitchContext+0x46>
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10a      	bne.n	800d7a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	607b      	str	r3, [r7, #4]
}
 800d7a0:	bf00      	nop
 800d7a2:	e7fe      	b.n	800d7a2 <vTaskSwitchContext+0x3e>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	60fb      	str	r3, [r7, #12]
 800d7aa:	491b      	ldr	r1, [pc, #108]	; (800d818 <vTaskSwitchContext+0xb4>)
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	440b      	add	r3, r1
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0e4      	beq.n	800d788 <vTaskSwitchContext+0x24>
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4a13      	ldr	r2, [pc, #76]	; (800d818 <vTaskSwitchContext+0xb4>)
 800d7ca:	4413      	add	r3, r2
 800d7cc:	60bb      	str	r3, [r7, #8]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	605a      	str	r2, [r3, #4]
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	3308      	adds	r3, #8
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d104      	bne.n	800d7ee <vTaskSwitchContext+0x8a>
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	685a      	ldr	r2, [r3, #4]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	4a09      	ldr	r2, [pc, #36]	; (800d81c <vTaskSwitchContext+0xb8>)
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	4a06      	ldr	r2, [pc, #24]	; (800d814 <vTaskSwitchContext+0xb0>)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6013      	str	r3, [r2, #0]
}
 800d7fe:	bf00      	nop
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	20001078 	.word	0x20001078
 800d810:	20001064 	.word	0x20001064
 800d814:	20001058 	.word	0x20001058
 800d818:	20000b80 	.word	0x20000b80
 800d81c:	20000b7c 	.word	0x20000b7c

0800d820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	60fb      	str	r3, [r7, #12]
}
 800d842:	bf00      	nop
 800d844:	e7fe      	b.n	800d844 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d846:	4b07      	ldr	r3, [pc, #28]	; (800d864 <vTaskPlaceOnEventList+0x44>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3318      	adds	r3, #24
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7fe fdcd 	bl	800c3ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d854:	2101      	movs	r1, #1
 800d856:	6838      	ldr	r0, [r7, #0]
 800d858:	f000 fa7c 	bl	800dd54 <prvAddCurrentTaskToDelayedList>
}
 800d85c:	bf00      	nop
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20000b7c 	.word	0x20000b7c

0800d868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10a      	bne.n	800d890 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	617b      	str	r3, [r7, #20]
}
 800d88c:	bf00      	nop
 800d88e:	e7fe      	b.n	800d88e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d890:	4b0a      	ldr	r3, [pc, #40]	; (800d8bc <vTaskPlaceOnEventListRestricted+0x54>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3318      	adds	r3, #24
 800d896:	4619      	mov	r1, r3
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f7fe fd84 	bl	800c3a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8aa:	6879      	ldr	r1, [r7, #4]
 800d8ac:	68b8      	ldr	r0, [r7, #8]
 800d8ae:	f000 fa51 	bl	800dd54 <prvAddCurrentTaskToDelayedList>
	}
 800d8b2:	bf00      	nop
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20000b7c 	.word	0x20000b7c

0800d8c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10a      	bne.n	800d8ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	60fb      	str	r3, [r7, #12]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	3318      	adds	r3, #24
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe fdb5 	bl	800c460 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8f6:	4b1e      	ldr	r3, [pc, #120]	; (800d970 <xTaskRemoveFromEventList+0xb0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d11d      	bne.n	800d93a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	3304      	adds	r3, #4
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe fdac 	bl	800c460 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d90c:	4b19      	ldr	r3, [pc, #100]	; (800d974 <xTaskRemoveFromEventList+0xb4>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	429a      	cmp	r2, r3
 800d912:	d903      	bls.n	800d91c <xTaskRemoveFromEventList+0x5c>
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	4a16      	ldr	r2, [pc, #88]	; (800d974 <xTaskRemoveFromEventList+0xb4>)
 800d91a:	6013      	str	r3, [r2, #0]
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d920:	4613      	mov	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4413      	add	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	4a13      	ldr	r2, [pc, #76]	; (800d978 <xTaskRemoveFromEventList+0xb8>)
 800d92a:	441a      	add	r2, r3
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	3304      	adds	r3, #4
 800d930:	4619      	mov	r1, r3
 800d932:	4610      	mov	r0, r2
 800d934:	f7fe fd37 	bl	800c3a6 <vListInsertEnd>
 800d938:	e005      	b.n	800d946 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	3318      	adds	r3, #24
 800d93e:	4619      	mov	r1, r3
 800d940:	480e      	ldr	r0, [pc, #56]	; (800d97c <xTaskRemoveFromEventList+0xbc>)
 800d942:	f7fe fd30 	bl	800c3a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94a:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <xTaskRemoveFromEventList+0xc0>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d950:	429a      	cmp	r2, r3
 800d952:	d905      	bls.n	800d960 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d954:	2301      	movs	r3, #1
 800d956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d958:	4b0a      	ldr	r3, [pc, #40]	; (800d984 <xTaskRemoveFromEventList+0xc4>)
 800d95a:	2201      	movs	r2, #1
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	e001      	b.n	800d964 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d960:	2300      	movs	r3, #0
 800d962:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d964:	697b      	ldr	r3, [r7, #20]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3718      	adds	r7, #24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	20001078 	.word	0x20001078
 800d974:	20001058 	.word	0x20001058
 800d978:	20000b80 	.word	0x20000b80
 800d97c:	20001010 	.word	0x20001010
 800d980:	20000b7c 	.word	0x20000b7c
 800d984:	20001064 	.word	0x20001064

0800d988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d990:	4b06      	ldr	r3, [pc, #24]	; (800d9ac <vTaskInternalSetTimeOutState+0x24>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d998:	4b05      	ldr	r3, [pc, #20]	; (800d9b0 <vTaskInternalSetTimeOutState+0x28>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	605a      	str	r2, [r3, #4]
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr
 800d9ac:	20001068 	.word	0x20001068
 800d9b0:	20001054 	.word	0x20001054

0800d9b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10a      	bne.n	800d9da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	613b      	str	r3, [r7, #16]
}
 800d9d6:	bf00      	nop
 800d9d8:	e7fe      	b.n	800d9d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10a      	bne.n	800d9f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	60fb      	str	r3, [r7, #12]
}
 800d9f2:	bf00      	nop
 800d9f4:	e7fe      	b.n	800d9f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d9f6:	f000 fe7d 	bl	800e6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d9fa:	4b1d      	ldr	r3, [pc, #116]	; (800da70 <xTaskCheckForTimeOut+0xbc>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da12:	d102      	bne.n	800da1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da14:	2300      	movs	r3, #0
 800da16:	61fb      	str	r3, [r7, #28]
 800da18:	e023      	b.n	800da62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	4b15      	ldr	r3, [pc, #84]	; (800da74 <xTaskCheckForTimeOut+0xc0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	429a      	cmp	r2, r3
 800da24:	d007      	beq.n	800da36 <xTaskCheckForTimeOut+0x82>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d302      	bcc.n	800da36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da30:	2301      	movs	r3, #1
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	e015      	b.n	800da62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	697a      	ldr	r2, [r7, #20]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d20b      	bcs.n	800da58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	1ad2      	subs	r2, r2, r3
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff ff9b 	bl	800d988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da52:	2300      	movs	r3, #0
 800da54:	61fb      	str	r3, [r7, #28]
 800da56:	e004      	b.n	800da62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2200      	movs	r2, #0
 800da5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da5e:	2301      	movs	r3, #1
 800da60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da62:	f000 fe77 	bl	800e754 <vPortExitCritical>

	return xReturn;
 800da66:	69fb      	ldr	r3, [r7, #28]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3720      	adds	r7, #32
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20001054 	.word	0x20001054
 800da74:	20001068 	.word	0x20001068

0800da78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da7c:	4b03      	ldr	r3, [pc, #12]	; (800da8c <vTaskMissedYield+0x14>)
 800da7e:	2201      	movs	r2, #1
 800da80:	601a      	str	r2, [r3, #0]
}
 800da82:	bf00      	nop
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	20001064 	.word	0x20001064

0800da90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da98:	f000 f852 	bl	800db40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da9c:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <prvIdleTask+0x28>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d9f9      	bls.n	800da98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800daa4:	4b05      	ldr	r3, [pc, #20]	; (800dabc <prvIdleTask+0x2c>)
 800daa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dab4:	e7f0      	b.n	800da98 <prvIdleTask+0x8>
 800dab6:	bf00      	nop
 800dab8:	20000b80 	.word	0x20000b80
 800dabc:	e000ed04 	.word	0xe000ed04

0800dac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dac6:	2300      	movs	r3, #0
 800dac8:	607b      	str	r3, [r7, #4]
 800daca:	e00c      	b.n	800dae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	4613      	mov	r3, r2
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4413      	add	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4a12      	ldr	r2, [pc, #72]	; (800db20 <prvInitialiseTaskLists+0x60>)
 800dad8:	4413      	add	r3, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe fc36 	bl	800c34c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3301      	adds	r3, #1
 800dae4:	607b      	str	r3, [r7, #4]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b37      	cmp	r3, #55	; 0x37
 800daea:	d9ef      	bls.n	800dacc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800daec:	480d      	ldr	r0, [pc, #52]	; (800db24 <prvInitialiseTaskLists+0x64>)
 800daee:	f7fe fc2d 	bl	800c34c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800daf2:	480d      	ldr	r0, [pc, #52]	; (800db28 <prvInitialiseTaskLists+0x68>)
 800daf4:	f7fe fc2a 	bl	800c34c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800daf8:	480c      	ldr	r0, [pc, #48]	; (800db2c <prvInitialiseTaskLists+0x6c>)
 800dafa:	f7fe fc27 	bl	800c34c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dafe:	480c      	ldr	r0, [pc, #48]	; (800db30 <prvInitialiseTaskLists+0x70>)
 800db00:	f7fe fc24 	bl	800c34c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db04:	480b      	ldr	r0, [pc, #44]	; (800db34 <prvInitialiseTaskLists+0x74>)
 800db06:	f7fe fc21 	bl	800c34c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db0a:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <prvInitialiseTaskLists+0x78>)
 800db0c:	4a05      	ldr	r2, [pc, #20]	; (800db24 <prvInitialiseTaskLists+0x64>)
 800db0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db10:	4b0a      	ldr	r3, [pc, #40]	; (800db3c <prvInitialiseTaskLists+0x7c>)
 800db12:	4a05      	ldr	r2, [pc, #20]	; (800db28 <prvInitialiseTaskLists+0x68>)
 800db14:	601a      	str	r2, [r3, #0]
}
 800db16:	bf00      	nop
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20000b80 	.word	0x20000b80
 800db24:	20000fe0 	.word	0x20000fe0
 800db28:	20000ff4 	.word	0x20000ff4
 800db2c:	20001010 	.word	0x20001010
 800db30:	20001024 	.word	0x20001024
 800db34:	2000103c 	.word	0x2000103c
 800db38:	20001008 	.word	0x20001008
 800db3c:	2000100c 	.word	0x2000100c

0800db40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db46:	e019      	b.n	800db7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db48:	f000 fdd4 	bl	800e6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db4c:	4b10      	ldr	r3, [pc, #64]	; (800db90 <prvCheckTasksWaitingTermination+0x50>)
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3304      	adds	r3, #4
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe fc81 	bl	800c460 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db5e:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <prvCheckTasksWaitingTermination+0x54>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	3b01      	subs	r3, #1
 800db64:	4a0b      	ldr	r2, [pc, #44]	; (800db94 <prvCheckTasksWaitingTermination+0x54>)
 800db66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db68:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <prvCheckTasksWaitingTermination+0x58>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	4a0a      	ldr	r2, [pc, #40]	; (800db98 <prvCheckTasksWaitingTermination+0x58>)
 800db70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db72:	f000 fdef 	bl	800e754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f810 	bl	800db9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db7c:	4b06      	ldr	r3, [pc, #24]	; (800db98 <prvCheckTasksWaitingTermination+0x58>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e1      	bne.n	800db48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db84:	bf00      	nop
 800db86:	bf00      	nop
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20001024 	.word	0x20001024
 800db94:	20001050 	.word	0x20001050
 800db98:	20001038 	.word	0x20001038

0800db9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d108      	bne.n	800dbc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 ff8c 	bl	800ead0 <vPortFree>
				vPortFree( pxTCB );
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 ff89 	bl	800ead0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbbe:	e018      	b.n	800dbf2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d103      	bne.n	800dbd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 ff80 	bl	800ead0 <vPortFree>
	}
 800dbd0:	e00f      	b.n	800dbf2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d00a      	beq.n	800dbf2 <prvDeleteTCB+0x56>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	60fb      	str	r3, [r7, #12]
}
 800dbee:	bf00      	nop
 800dbf0:	e7fe      	b.n	800dbf0 <prvDeleteTCB+0x54>
	}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc02:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <prvResetNextTaskUnblockTime+0x38>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d104      	bne.n	800dc16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc0c:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <prvResetNextTaskUnblockTime+0x3c>)
 800dc0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc14:	e008      	b.n	800dc28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc16:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <prvResetNextTaskUnblockTime+0x38>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	4a04      	ldr	r2, [pc, #16]	; (800dc38 <prvResetNextTaskUnblockTime+0x3c>)
 800dc26:	6013      	str	r3, [r2, #0]
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr
 800dc34:	20001008 	.word	0x20001008
 800dc38:	20001070 	.word	0x20001070

0800dc3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc42:	4b0b      	ldr	r3, [pc, #44]	; (800dc70 <xTaskGetSchedulerState+0x34>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d102      	bne.n	800dc50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	607b      	str	r3, [r7, #4]
 800dc4e:	e008      	b.n	800dc62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc50:	4b08      	ldr	r3, [pc, #32]	; (800dc74 <xTaskGetSchedulerState+0x38>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc58:	2302      	movs	r3, #2
 800dc5a:	607b      	str	r3, [r7, #4]
 800dc5c:	e001      	b.n	800dc62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc62:	687b      	ldr	r3, [r7, #4]
	}
 800dc64:	4618      	mov	r0, r3
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	2000105c 	.word	0x2000105c
 800dc74:	20001078 	.word	0x20001078

0800dc78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc84:	2300      	movs	r3, #0
 800dc86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d056      	beq.n	800dd3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc8e:	4b2e      	ldr	r3, [pc, #184]	; (800dd48 <xTaskPriorityDisinherit+0xd0>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d00a      	beq.n	800dcae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9c:	f383 8811 	msr	BASEPRI, r3
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	60fb      	str	r3, [r7, #12]
}
 800dcaa:	bf00      	nop
 800dcac:	e7fe      	b.n	800dcac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10a      	bne.n	800dccc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	60bb      	str	r3, [r7, #8]
}
 800dcc8:	bf00      	nop
 800dcca:	e7fe      	b.n	800dcca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd0:	1e5a      	subs	r2, r3, #1
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d02c      	beq.n	800dd3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d128      	bne.n	800dd3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3304      	adds	r3, #4
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fe fbb6 	bl	800c460 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0c:	4b0f      	ldr	r3, [pc, #60]	; (800dd4c <xTaskPriorityDisinherit+0xd4>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d903      	bls.n	800dd1c <xTaskPriorityDisinherit+0xa4>
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd18:	4a0c      	ldr	r2, [pc, #48]	; (800dd4c <xTaskPriorityDisinherit+0xd4>)
 800dd1a:	6013      	str	r3, [r2, #0]
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4a09      	ldr	r2, [pc, #36]	; (800dd50 <xTaskPriorityDisinherit+0xd8>)
 800dd2a:	441a      	add	r2, r3
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	4619      	mov	r1, r3
 800dd32:	4610      	mov	r0, r2
 800dd34:	f7fe fb37 	bl	800c3a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd3c:	697b      	ldr	r3, [r7, #20]
	}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3718      	adds	r7, #24
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20000b7c 	.word	0x20000b7c
 800dd4c:	20001058 	.word	0x20001058
 800dd50:	20000b80 	.word	0x20000b80

0800dd54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd5e:	4b21      	ldr	r3, [pc, #132]	; (800dde4 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd64:	4b20      	ldr	r3, [pc, #128]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fe fb78 	bl	800c460 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd76:	d10a      	bne.n	800dd8e <prvAddCurrentTaskToDelayedList+0x3a>
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d007      	beq.n	800dd8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd7e:	4b1a      	ldr	r3, [pc, #104]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4819      	ldr	r0, [pc, #100]	; (800ddec <prvAddCurrentTaskToDelayedList+0x98>)
 800dd88:	f7fe fb0d 	bl	800c3a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd8c:	e026      	b.n	800dddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd96:	4b14      	ldr	r3, [pc, #80]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d209      	bcs.n	800ddba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dda6:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f7fe fb1b 	bl	800c3ee <vListInsert>
}
 800ddb8:	e010      	b.n	800dddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddba:	4b0e      	ldr	r3, [pc, #56]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	f7fe fb11 	bl	800c3ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddcc:	4b0a      	ldr	r3, [pc, #40]	; (800ddf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d202      	bcs.n	800dddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ddd6:	4a08      	ldr	r2, [pc, #32]	; (800ddf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	6013      	str	r3, [r2, #0]
}
 800dddc:	bf00      	nop
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20001054 	.word	0x20001054
 800dde8:	20000b7c 	.word	0x20000b7c
 800ddec:	2000103c 	.word	0x2000103c
 800ddf0:	2000100c 	.word	0x2000100c
 800ddf4:	20001008 	.word	0x20001008
 800ddf8:	20001070 	.word	0x20001070

0800ddfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08a      	sub	sp, #40	; 0x28
 800de00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de02:	2300      	movs	r3, #0
 800de04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de06:	f000 fb07 	bl	800e418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de0a:	4b1c      	ldr	r3, [pc, #112]	; (800de7c <xTimerCreateTimerTask+0x80>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d021      	beq.n	800de56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de1a:	1d3a      	adds	r2, r7, #4
 800de1c:	f107 0108 	add.w	r1, r7, #8
 800de20:	f107 030c 	add.w	r3, r7, #12
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe fa77 	bl	800c318 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	9202      	str	r2, [sp, #8]
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	2302      	movs	r3, #2
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	2300      	movs	r3, #0
 800de3a:	460a      	mov	r2, r1
 800de3c:	4910      	ldr	r1, [pc, #64]	; (800de80 <xTimerCreateTimerTask+0x84>)
 800de3e:	4811      	ldr	r0, [pc, #68]	; (800de84 <xTimerCreateTimerTask+0x88>)
 800de40:	f7ff f8de 	bl	800d000 <xTaskCreateStatic>
 800de44:	4603      	mov	r3, r0
 800de46:	4a10      	ldr	r2, [pc, #64]	; (800de88 <xTimerCreateTimerTask+0x8c>)
 800de48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de4a:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <xTimerCreateTimerTask+0x8c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de52:	2301      	movs	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800de5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	613b      	str	r3, [r7, #16]
}
 800de6e:	bf00      	nop
 800de70:	e7fe      	b.n	800de70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800de72:	697b      	ldr	r3, [r7, #20]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	200010ac 	.word	0x200010ac
 800de80:	0800f6dc 	.word	0x0800f6dc
 800de84:	0800dfc1 	.word	0x0800dfc1
 800de88:	200010b0 	.word	0x200010b0

0800de8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08a      	sub	sp, #40	; 0x28
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10a      	bne.n	800deba <xTimerGenericCommand+0x2e>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	623b      	str	r3, [r7, #32]
}
 800deb6:	bf00      	nop
 800deb8:	e7fe      	b.n	800deb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800deba:	4b1a      	ldr	r3, [pc, #104]	; (800df24 <xTimerGenericCommand+0x98>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d02a      	beq.n	800df18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b05      	cmp	r3, #5
 800ded2:	dc18      	bgt.n	800df06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ded4:	f7ff feb2 	bl	800dc3c <xTaskGetSchedulerState>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d109      	bne.n	800def2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <xTimerGenericCommand+0x98>)
 800dee0:	6818      	ldr	r0, [r3, #0]
 800dee2:	f107 0110 	add.w	r1, r7, #16
 800dee6:	2300      	movs	r3, #0
 800dee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deea:	f7fe fc21 	bl	800c730 <xQueueGenericSend>
 800deee:	6278      	str	r0, [r7, #36]	; 0x24
 800def0:	e012      	b.n	800df18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800def2:	4b0c      	ldr	r3, [pc, #48]	; (800df24 <xTimerGenericCommand+0x98>)
 800def4:	6818      	ldr	r0, [r3, #0]
 800def6:	f107 0110 	add.w	r1, r7, #16
 800defa:	2300      	movs	r3, #0
 800defc:	2200      	movs	r2, #0
 800defe:	f7fe fc17 	bl	800c730 <xQueueGenericSend>
 800df02:	6278      	str	r0, [r7, #36]	; 0x24
 800df04:	e008      	b.n	800df18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df06:	4b07      	ldr	r3, [pc, #28]	; (800df24 <xTimerGenericCommand+0x98>)
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	f107 0110 	add.w	r1, r7, #16
 800df0e:	2300      	movs	r3, #0
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	f7fe fd0b 	bl	800c92c <xQueueGenericSendFromISR>
 800df16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3728      	adds	r7, #40	; 0x28
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	200010ac 	.word	0x200010ac

0800df28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df32:	4b22      	ldr	r3, [pc, #136]	; (800dfbc <prvProcessExpiredTimer+0x94>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	3304      	adds	r3, #4
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe fa8d 	bl	800c460 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d022      	beq.n	800df9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	699a      	ldr	r2, [r3, #24]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	18d1      	adds	r1, r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	6978      	ldr	r0, [r7, #20]
 800df62:	f000 f8d1 	bl	800e108 <prvInsertTimerInActiveList>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d01f      	beq.n	800dfac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df6c:	2300      	movs	r3, #0
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	2300      	movs	r3, #0
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	2100      	movs	r1, #0
 800df76:	6978      	ldr	r0, [r7, #20]
 800df78:	f7ff ff88 	bl	800de8c <xTimerGenericCommand>
 800df7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d113      	bne.n	800dfac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	60fb      	str	r3, [r7, #12]
}
 800df96:	bf00      	nop
 800df98:	e7fe      	b.n	800df98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfa0:	f023 0301 	bic.w	r3, r3, #1
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	6978      	ldr	r0, [r7, #20]
 800dfb2:	4798      	blx	r3
}
 800dfb4:	bf00      	nop
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	200010a4 	.word	0x200010a4

0800dfc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 f857 	bl	800e080 <prvGetNextExpireTime>
 800dfd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 f803 	bl	800dfe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dfde:	f000 f8d5 	bl	800e18c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfe2:	e7f1      	b.n	800dfc8 <prvTimerTask+0x8>

0800dfe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dfee:	f7ff fa43 	bl	800d478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dff2:	f107 0308 	add.w	r3, r7, #8
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 f866 	bl	800e0c8 <prvSampleTimeNow>
 800dffc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d130      	bne.n	800e066 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10a      	bne.n	800e020 <prvProcessTimerOrBlockTask+0x3c>
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d806      	bhi.n	800e020 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e012:	f7ff fa3f 	bl	800d494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e016:	68f9      	ldr	r1, [r7, #12]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff ff85 	bl	800df28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e01e:	e024      	b.n	800e06a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d008      	beq.n	800e038 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e026:	4b13      	ldr	r3, [pc, #76]	; (800e074 <prvProcessTimerOrBlockTask+0x90>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <prvProcessTimerOrBlockTask+0x50>
 800e030:	2301      	movs	r3, #1
 800e032:	e000      	b.n	800e036 <prvProcessTimerOrBlockTask+0x52>
 800e034:	2300      	movs	r3, #0
 800e036:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e038:	4b0f      	ldr	r3, [pc, #60]	; (800e078 <prvProcessTimerOrBlockTask+0x94>)
 800e03a:	6818      	ldr	r0, [r3, #0]
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	4619      	mov	r1, r3
 800e046:	f7fe ffa7 	bl	800cf98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e04a:	f7ff fa23 	bl	800d494 <xTaskResumeAll>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10a      	bne.n	800e06a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e054:	4b09      	ldr	r3, [pc, #36]	; (800e07c <prvProcessTimerOrBlockTask+0x98>)
 800e056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	f3bf 8f6f 	isb	sy
}
 800e064:	e001      	b.n	800e06a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e066:	f7ff fa15 	bl	800d494 <xTaskResumeAll>
}
 800e06a:	bf00      	nop
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	200010a8 	.word	0x200010a8
 800e078:	200010ac 	.word	0x200010ac
 800e07c:	e000ed04 	.word	0xe000ed04

0800e080 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e088:	4b0e      	ldr	r3, [pc, #56]	; (800e0c4 <prvGetNextExpireTime+0x44>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <prvGetNextExpireTime+0x16>
 800e092:	2201      	movs	r2, #1
 800e094:	e000      	b.n	800e098 <prvGetNextExpireTime+0x18>
 800e096:	2200      	movs	r2, #0
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d105      	bne.n	800e0b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0a4:	4b07      	ldr	r3, [pc, #28]	; (800e0c4 <prvGetNextExpireTime+0x44>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e001      	b.n	800e0b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	200010a4 	.word	0x200010a4

0800e0c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e0d0:	f7ff fa7e 	bl	800d5d0 <xTaskGetTickCount>
 800e0d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e0d6:	4b0b      	ldr	r3, [pc, #44]	; (800e104 <prvSampleTimeNow+0x3c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d205      	bcs.n	800e0ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e0e0:	f000 f936 	bl	800e350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	e002      	b.n	800e0f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0f2:	4a04      	ldr	r2, [pc, #16]	; (800e104 <prvSampleTimeNow+0x3c>)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	200010b4 	.word	0x200010b4

0800e108 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e116:	2300      	movs	r3, #0
 800e118:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d812      	bhi.n	800e154 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	1ad2      	subs	r2, r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d302      	bcc.n	800e142 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e13c:	2301      	movs	r3, #1
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	e01b      	b.n	800e17a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e142:	4b10      	ldr	r3, [pc, #64]	; (800e184 <prvInsertTimerInActiveList+0x7c>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3304      	adds	r3, #4
 800e14a:	4619      	mov	r1, r3
 800e14c:	4610      	mov	r0, r2
 800e14e:	f7fe f94e 	bl	800c3ee <vListInsert>
 800e152:	e012      	b.n	800e17a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d206      	bcs.n	800e16a <prvInsertTimerInActiveList+0x62>
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	429a      	cmp	r2, r3
 800e162:	d302      	bcc.n	800e16a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	e007      	b.n	800e17a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e16a:	4b07      	ldr	r3, [pc, #28]	; (800e188 <prvInsertTimerInActiveList+0x80>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3304      	adds	r3, #4
 800e172:	4619      	mov	r1, r3
 800e174:	4610      	mov	r0, r2
 800e176:	f7fe f93a 	bl	800c3ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e17a:	697b      	ldr	r3, [r7, #20]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3718      	adds	r7, #24
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	200010a8 	.word	0x200010a8
 800e188:	200010a4 	.word	0x200010a4

0800e18c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08e      	sub	sp, #56	; 0x38
 800e190:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e192:	e0ca      	b.n	800e32a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	da18      	bge.n	800e1cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e19a:	1d3b      	adds	r3, r7, #4
 800e19c:	3304      	adds	r3, #4
 800e19e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10a      	bne.n	800e1bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	61fb      	str	r3, [r7, #28]
}
 800e1b8:	bf00      	nop
 800e1ba:	e7fe      	b.n	800e1ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c2:	6850      	ldr	r0, [r2, #4]
 800e1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c6:	6892      	ldr	r2, [r2, #8]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f2c0 80aa 	blt.w	800e328 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fe f93b 	bl	800c460 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1ea:	463b      	mov	r3, r7
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7ff ff6b 	bl	800e0c8 <prvSampleTimeNow>
 800e1f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b09      	cmp	r3, #9
 800e1f8:	f200 8097 	bhi.w	800e32a <prvProcessReceivedCommands+0x19e>
 800e1fc:	a201      	add	r2, pc, #4	; (adr r2, 800e204 <prvProcessReceivedCommands+0x78>)
 800e1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e202:	bf00      	nop
 800e204:	0800e22d 	.word	0x0800e22d
 800e208:	0800e22d 	.word	0x0800e22d
 800e20c:	0800e22d 	.word	0x0800e22d
 800e210:	0800e2a1 	.word	0x0800e2a1
 800e214:	0800e2b5 	.word	0x0800e2b5
 800e218:	0800e2ff 	.word	0x0800e2ff
 800e21c:	0800e22d 	.word	0x0800e22d
 800e220:	0800e22d 	.word	0x0800e22d
 800e224:	0800e2a1 	.word	0x0800e2a1
 800e228:	0800e2b5 	.word	0x0800e2b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e232:	f043 0301 	orr.w	r3, r3, #1
 800e236:	b2da      	uxtb	r2, r3
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	18d1      	adds	r1, r2, r3
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e24c:	f7ff ff5c 	bl	800e108 <prvInsertTimerInActiveList>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d069      	beq.n	800e32a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e25c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d05e      	beq.n	800e32a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	441a      	add	r2, r3
 800e274:	2300      	movs	r3, #0
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	2300      	movs	r3, #0
 800e27a:	2100      	movs	r1, #0
 800e27c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e27e:	f7ff fe05 	bl	800de8c <xTimerGenericCommand>
 800e282:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d14f      	bne.n	800e32a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	61bb      	str	r3, [r7, #24]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2a6:	f023 0301 	bic.w	r3, r3, #1
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e2b2:	e03a      	b.n	800e32a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2ba:	f043 0301 	orr.w	r3, r3, #1
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	617b      	str	r3, [r7, #20]
}
 800e2e6:	bf00      	nop
 800e2e8:	e7fe      	b.n	800e2e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ec:	699a      	ldr	r2, [r3, #24]
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	18d1      	adds	r1, r2, r3
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f8:	f7ff ff06 	bl	800e108 <prvInsertTimerInActiveList>
					break;
 800e2fc:	e015      	b.n	800e32a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e304:	f003 0302 	and.w	r3, r3, #2
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d103      	bne.n	800e314 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e30e:	f000 fbdf 	bl	800ead0 <vPortFree>
 800e312:	e00a      	b.n	800e32a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e31a:	f023 0301 	bic.w	r3, r3, #1
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e326:	e000      	b.n	800e32a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e328:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e32a:	4b08      	ldr	r3, [pc, #32]	; (800e34c <prvProcessReceivedCommands+0x1c0>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1d39      	adds	r1, r7, #4
 800e330:	2200      	movs	r2, #0
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fb96 	bl	800ca64 <xQueueReceive>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f47f af2a 	bne.w	800e194 <prvProcessReceivedCommands+0x8>
	}
}
 800e340:	bf00      	nop
 800e342:	bf00      	nop
 800e344:	3730      	adds	r7, #48	; 0x30
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	200010ac 	.word	0x200010ac

0800e350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e356:	e048      	b.n	800e3ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e358:	4b2d      	ldr	r3, [pc, #180]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e362:	4b2b      	ldr	r3, [pc, #172]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3304      	adds	r3, #4
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe f875 	bl	800c460 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e384:	f003 0304 	and.w	r3, r3, #4
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d02e      	beq.n	800e3ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4413      	add	r3, r2
 800e394:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d90e      	bls.n	800e3bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3aa:	4b19      	ldr	r3, [pc, #100]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f7fe f81a 	bl	800c3ee <vListInsert>
 800e3ba:	e016      	b.n	800e3ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3bc:	2300      	movs	r3, #0
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7ff fd60 	bl	800de8c <xTimerGenericCommand>
 800e3cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10a      	bne.n	800e3ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	603b      	str	r3, [r7, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3ea:	4b09      	ldr	r3, [pc, #36]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1b1      	bne.n	800e358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3f4:	4b06      	ldr	r3, [pc, #24]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3fa:	4b06      	ldr	r3, [pc, #24]	; (800e414 <prvSwitchTimerLists+0xc4>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a04      	ldr	r2, [pc, #16]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e400:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e402:	4a04      	ldr	r2, [pc, #16]	; (800e414 <prvSwitchTimerLists+0xc4>)
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	6013      	str	r3, [r2, #0]
}
 800e408:	bf00      	nop
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	200010a4 	.word	0x200010a4
 800e414:	200010a8 	.word	0x200010a8

0800e418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e41e:	f000 f969 	bl	800e6f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e422:	4b15      	ldr	r3, [pc, #84]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d120      	bne.n	800e46c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e42a:	4814      	ldr	r0, [pc, #80]	; (800e47c <prvCheckForValidListAndQueue+0x64>)
 800e42c:	f7fd ff8e 	bl	800c34c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e430:	4813      	ldr	r0, [pc, #76]	; (800e480 <prvCheckForValidListAndQueue+0x68>)
 800e432:	f7fd ff8b 	bl	800c34c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e436:	4b13      	ldr	r3, [pc, #76]	; (800e484 <prvCheckForValidListAndQueue+0x6c>)
 800e438:	4a10      	ldr	r2, [pc, #64]	; (800e47c <prvCheckForValidListAndQueue+0x64>)
 800e43a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e43c:	4b12      	ldr	r3, [pc, #72]	; (800e488 <prvCheckForValidListAndQueue+0x70>)
 800e43e:	4a10      	ldr	r2, [pc, #64]	; (800e480 <prvCheckForValidListAndQueue+0x68>)
 800e440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e442:	2300      	movs	r3, #0
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	4b11      	ldr	r3, [pc, #68]	; (800e48c <prvCheckForValidListAndQueue+0x74>)
 800e448:	4a11      	ldr	r2, [pc, #68]	; (800e490 <prvCheckForValidListAndQueue+0x78>)
 800e44a:	2110      	movs	r1, #16
 800e44c:	200a      	movs	r0, #10
 800e44e:	f7fe f899 	bl	800c584 <xQueueGenericCreateStatic>
 800e452:	4603      	mov	r3, r0
 800e454:	4a08      	ldr	r2, [pc, #32]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	490b      	ldr	r1, [pc, #44]	; (800e494 <prvCheckForValidListAndQueue+0x7c>)
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fd6c 	bl	800cf44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e46c:	f000 f972 	bl	800e754 <vPortExitCritical>
}
 800e470:	bf00      	nop
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	200010ac 	.word	0x200010ac
 800e47c:	2000107c 	.word	0x2000107c
 800e480:	20001090 	.word	0x20001090
 800e484:	200010a4 	.word	0x200010a4
 800e488:	200010a8 	.word	0x200010a8
 800e48c:	20001158 	.word	0x20001158
 800e490:	200010b8 	.word	0x200010b8
 800e494:	0800f6e4 	.word	0x0800f6e4

0800e498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3b04      	subs	r3, #4
 800e4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3b04      	subs	r3, #4
 800e4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f023 0201 	bic.w	r2, r3, #1
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3b04      	subs	r3, #4
 800e4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4c8:	4a0c      	ldr	r2, [pc, #48]	; (800e4fc <pxPortInitialiseStack+0x64>)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3b14      	subs	r3, #20
 800e4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f06f 0202 	mvn.w	r2, #2
 800e4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3b20      	subs	r3, #32
 800e4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3714      	adds	r7, #20
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	0800e501 	.word	0x0800e501

0800e500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e50a:	4b12      	ldr	r3, [pc, #72]	; (800e554 <prvTaskExitError+0x54>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e512:	d00a      	beq.n	800e52a <prvTaskExitError+0x2a>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	60fb      	str	r3, [r7, #12]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <prvTaskExitError+0x28>
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	60bb      	str	r3, [r7, #8]
}
 800e53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e53e:	bf00      	nop
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d0fc      	beq.n	800e540 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e546:	bf00      	nop
 800e548:	bf00      	nop
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	2000002c 	.word	0x2000002c
	...

0800e560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e560:	4b07      	ldr	r3, [pc, #28]	; (800e580 <pxCurrentTCBConst2>)
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	6808      	ldr	r0, [r1, #0]
 800e566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	f380 8809 	msr	PSP, r0
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f04f 0000 	mov.w	r0, #0
 800e576:	f380 8811 	msr	BASEPRI, r0
 800e57a:	4770      	bx	lr
 800e57c:	f3af 8000 	nop.w

0800e580 <pxCurrentTCBConst2>:
 800e580:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e584:	bf00      	nop
 800e586:	bf00      	nop

0800e588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e588:	4808      	ldr	r0, [pc, #32]	; (800e5ac <prvPortStartFirstTask+0x24>)
 800e58a:	6800      	ldr	r0, [r0, #0]
 800e58c:	6800      	ldr	r0, [r0, #0]
 800e58e:	f380 8808 	msr	MSP, r0
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8814 	msr	CONTROL, r0
 800e59a:	b662      	cpsie	i
 800e59c:	b661      	cpsie	f
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	df00      	svc	0
 800e5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5aa:	bf00      	nop
 800e5ac:	e000ed08 	.word	0xe000ed08

0800e5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5b6:	4b46      	ldr	r3, [pc, #280]	; (800e6d0 <xPortStartScheduler+0x120>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a46      	ldr	r2, [pc, #280]	; (800e6d4 <xPortStartScheduler+0x124>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d10a      	bne.n	800e5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
}
 800e5d2:	bf00      	nop
 800e5d4:	e7fe      	b.n	800e5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5d6:	4b3e      	ldr	r3, [pc, #248]	; (800e6d0 <xPortStartScheduler+0x120>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a3f      	ldr	r2, [pc, #252]	; (800e6d8 <xPortStartScheduler+0x128>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d10a      	bne.n	800e5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	60fb      	str	r3, [r7, #12]
}
 800e5f2:	bf00      	nop
 800e5f4:	e7fe      	b.n	800e5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5f6:	4b39      	ldr	r3, [pc, #228]	; (800e6dc <xPortStartScheduler+0x12c>)
 800e5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	22ff      	movs	r2, #255	; 0xff
 800e606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	4b31      	ldr	r3, [pc, #196]	; (800e6e0 <xPortStartScheduler+0x130>)
 800e61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e61e:	4b31      	ldr	r3, [pc, #196]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e620:	2207      	movs	r2, #7
 800e622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e624:	e009      	b.n	800e63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e626:	4b2f      	ldr	r3, [pc, #188]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3b01      	subs	r3, #1
 800e62c:	4a2d      	ldr	r2, [pc, #180]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e630:	78fb      	ldrb	r3, [r7, #3]
 800e632:	b2db      	uxtb	r3, r3
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	b2db      	uxtb	r3, r3
 800e638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e63a:	78fb      	ldrb	r3, [r7, #3]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e642:	2b80      	cmp	r3, #128	; 0x80
 800e644:	d0ef      	beq.n	800e626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e646:	4b27      	ldr	r3, [pc, #156]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f1c3 0307 	rsb	r3, r3, #7
 800e64e:	2b04      	cmp	r3, #4
 800e650:	d00a      	beq.n	800e668 <xPortStartScheduler+0xb8>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	60bb      	str	r3, [r7, #8]
}
 800e664:	bf00      	nop
 800e666:	e7fe      	b.n	800e666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e668:	4b1e      	ldr	r3, [pc, #120]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	021b      	lsls	r3, r3, #8
 800e66e:	4a1d      	ldr	r2, [pc, #116]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e672:	4b1c      	ldr	r3, [pc, #112]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e67a:	4a1a      	ldr	r2, [pc, #104]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	b2da      	uxtb	r2, r3
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e686:	4b18      	ldr	r3, [pc, #96]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a17      	ldr	r2, [pc, #92]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e692:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a14      	ldr	r2, [pc, #80]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e69e:	f000 f8dd 	bl	800e85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6a2:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <xPortStartScheduler+0x13c>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6a8:	f000 f8fc 	bl	800e8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6ac:	4b10      	ldr	r3, [pc, #64]	; (800e6f0 <xPortStartScheduler+0x140>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a0f      	ldr	r2, [pc, #60]	; (800e6f0 <xPortStartScheduler+0x140>)
 800e6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6b8:	f7ff ff66 	bl	800e588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6bc:	f7ff f852 	bl	800d764 <vTaskSwitchContext>
	prvTaskExitError();
 800e6c0:	f7ff ff1e 	bl	800e500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	e000ed00 	.word	0xe000ed00
 800e6d4:	410fc271 	.word	0x410fc271
 800e6d8:	410fc270 	.word	0x410fc270
 800e6dc:	e000e400 	.word	0xe000e400
 800e6e0:	200011a8 	.word	0x200011a8
 800e6e4:	200011ac 	.word	0x200011ac
 800e6e8:	e000ed20 	.word	0xe000ed20
 800e6ec:	2000002c 	.word	0x2000002c
 800e6f0:	e000ef34 	.word	0xe000ef34

0800e6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	f383 8811 	msr	BASEPRI, r3
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	607b      	str	r3, [r7, #4]
}
 800e70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <vPortEnterCritical+0x58>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	3301      	adds	r3, #1
 800e714:	4a0d      	ldr	r2, [pc, #52]	; (800e74c <vPortEnterCritical+0x58>)
 800e716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e718:	4b0c      	ldr	r3, [pc, #48]	; (800e74c <vPortEnterCritical+0x58>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d10f      	bne.n	800e740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e720:	4b0b      	ldr	r3, [pc, #44]	; (800e750 <vPortEnterCritical+0x5c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	b2db      	uxtb	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00a      	beq.n	800e740 <vPortEnterCritical+0x4c>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	603b      	str	r3, [r7, #0]
}
 800e73c:	bf00      	nop
 800e73e:	e7fe      	b.n	800e73e <vPortEnterCritical+0x4a>
	}
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	2000002c 	.word	0x2000002c
 800e750:	e000ed04 	.word	0xe000ed04

0800e754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e75a:	4b12      	ldr	r3, [pc, #72]	; (800e7a4 <vPortExitCritical+0x50>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10a      	bne.n	800e778 <vPortExitCritical+0x24>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	607b      	str	r3, [r7, #4]
}
 800e774:	bf00      	nop
 800e776:	e7fe      	b.n	800e776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <vPortExitCritical+0x50>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3b01      	subs	r3, #1
 800e77e:	4a09      	ldr	r2, [pc, #36]	; (800e7a4 <vPortExitCritical+0x50>)
 800e780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e782:	4b08      	ldr	r3, [pc, #32]	; (800e7a4 <vPortExitCritical+0x50>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d105      	bne.n	800e796 <vPortExitCritical+0x42>
 800e78a:	2300      	movs	r3, #0
 800e78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f383 8811 	msr	BASEPRI, r3
}
 800e794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e796:	bf00      	nop
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	2000002c 	.word	0x2000002c
	...

0800e7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7b0:	f3ef 8009 	mrs	r0, PSP
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	4b15      	ldr	r3, [pc, #84]	; (800e810 <pxCurrentTCBConst>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	f01e 0f10 	tst.w	lr, #16
 800e7c0:	bf08      	it	eq
 800e7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	6010      	str	r0, [r2, #0]
 800e7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7d4:	f380 8811 	msr	BASEPRI, r0
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f7fe ffc0 	bl	800d764 <vTaskSwitchContext>
 800e7e4:	f04f 0000 	mov.w	r0, #0
 800e7e8:	f380 8811 	msr	BASEPRI, r0
 800e7ec:	bc09      	pop	{r0, r3}
 800e7ee:	6819      	ldr	r1, [r3, #0]
 800e7f0:	6808      	ldr	r0, [r1, #0]
 800e7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f6:	f01e 0f10 	tst.w	lr, #16
 800e7fa:	bf08      	it	eq
 800e7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e800:	f380 8809 	msr	PSP, r0
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	f3af 8000 	nop.w

0800e810 <pxCurrentTCBConst>:
 800e810:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop

0800e818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	607b      	str	r3, [r7, #4]
}
 800e830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e832:	f7fe fedd 	bl	800d5f0 <xTaskIncrementTick>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d003      	beq.n	800e844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e83c:	4b06      	ldr	r3, [pc, #24]	; (800e858 <xPortSysTickHandler+0x40>)
 800e83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	2300      	movs	r3, #0
 800e846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	f383 8811 	msr	BASEPRI, r3
}
 800e84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e860:	4b0b      	ldr	r3, [pc, #44]	; (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e866:	4b0b      	ldr	r3, [pc, #44]	; (800e894 <vPortSetupTimerInterrupt+0x38>)
 800e868:	2200      	movs	r2, #0
 800e86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e86c:	4b0a      	ldr	r3, [pc, #40]	; (800e898 <vPortSetupTimerInterrupt+0x3c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <vPortSetupTimerInterrupt+0x40>)
 800e872:	fba2 2303 	umull	r2, r3, r2, r3
 800e876:	099b      	lsrs	r3, r3, #6
 800e878:	4a09      	ldr	r2, [pc, #36]	; (800e8a0 <vPortSetupTimerInterrupt+0x44>)
 800e87a:	3b01      	subs	r3, #1
 800e87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e87e:	4b04      	ldr	r3, [pc, #16]	; (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e880:	2207      	movs	r2, #7
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	e000e010 	.word	0xe000e010
 800e894:	e000e018 	.word	0xe000e018
 800e898:	20000000 	.word	0x20000000
 800e89c:	10624dd3 	.word	0x10624dd3
 800e8a0:	e000e014 	.word	0xe000e014

0800e8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8b4 <vPortEnableVFP+0x10>
 800e8a8:	6801      	ldr	r1, [r0, #0]
 800e8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8ae:	6001      	str	r1, [r0, #0]
 800e8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8b2:	bf00      	nop
 800e8b4:	e000ed88 	.word	0xe000ed88

0800e8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8be:	f3ef 8305 	mrs	r3, IPSR
 800e8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b0f      	cmp	r3, #15
 800e8c8:	d914      	bls.n	800e8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ca:	4a17      	ldr	r2, [pc, #92]	; (800e928 <vPortValidateInterruptPriority+0x70>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8d4:	4b15      	ldr	r3, [pc, #84]	; (800e92c <vPortValidateInterruptPriority+0x74>)
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	7afa      	ldrb	r2, [r7, #11]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d20a      	bcs.n	800e8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	607b      	str	r3, [r7, #4]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8f4:	4b0e      	ldr	r3, [pc, #56]	; (800e930 <vPortValidateInterruptPriority+0x78>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8fc:	4b0d      	ldr	r3, [pc, #52]	; (800e934 <vPortValidateInterruptPriority+0x7c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d90a      	bls.n	800e91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	603b      	str	r3, [r7, #0]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <vPortValidateInterruptPriority+0x60>
	}
 800e91a:	bf00      	nop
 800e91c:	3714      	adds	r7, #20
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	e000e3f0 	.word	0xe000e3f0
 800e92c:	200011a8 	.word	0x200011a8
 800e930:	e000ed0c 	.word	0xe000ed0c
 800e934:	200011ac 	.word	0x200011ac

0800e938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08a      	sub	sp, #40	; 0x28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e940:	2300      	movs	r3, #0
 800e942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e944:	f7fe fd98 	bl	800d478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e948:	4b5b      	ldr	r3, [pc, #364]	; (800eab8 <pvPortMalloc+0x180>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e950:	f000 f920 	bl	800eb94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e954:	4b59      	ldr	r3, [pc, #356]	; (800eabc <pvPortMalloc+0x184>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4013      	ands	r3, r2
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f040 8093 	bne.w	800ea88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d01d      	beq.n	800e9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e968:	2208      	movs	r2, #8
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4413      	add	r3, r2
 800e96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f003 0307 	and.w	r3, r3, #7
 800e976:	2b00      	cmp	r3, #0
 800e978:	d014      	beq.n	800e9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f023 0307 	bic.w	r3, r3, #7
 800e980:	3308      	adds	r3, #8
 800e982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f003 0307 	and.w	r3, r3, #7
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00a      	beq.n	800e9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	617b      	str	r3, [r7, #20]
}
 800e9a0:	bf00      	nop
 800e9a2:	e7fe      	b.n	800e9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d06e      	beq.n	800ea88 <pvPortMalloc+0x150>
 800e9aa:	4b45      	ldr	r3, [pc, #276]	; (800eac0 <pvPortMalloc+0x188>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d869      	bhi.n	800ea88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9b4:	4b43      	ldr	r3, [pc, #268]	; (800eac4 <pvPortMalloc+0x18c>)
 800e9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9b8:	4b42      	ldr	r3, [pc, #264]	; (800eac4 <pvPortMalloc+0x18c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9be:	e004      	b.n	800e9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d903      	bls.n	800e9dc <pvPortMalloc+0xa4>
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1f1      	bne.n	800e9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9dc:	4b36      	ldr	r3, [pc, #216]	; (800eab8 <pvPortMalloc+0x180>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d050      	beq.n	800ea88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2208      	movs	r2, #8
 800e9ec:	4413      	add	r3, r2
 800e9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	2308      	movs	r3, #8
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d91f      	bls.n	800ea48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	f003 0307 	and.w	r3, r3, #7
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <pvPortMalloc+0xf8>
	__asm volatile
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	613b      	str	r3, [r7, #16]
}
 800ea2c:	bf00      	nop
 800ea2e:	e7fe      	b.n	800ea2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	685a      	ldr	r2, [r3, #4]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	1ad2      	subs	r2, r2, r3
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea42:	69b8      	ldr	r0, [r7, #24]
 800ea44:	f000 f908 	bl	800ec58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea48:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <pvPortMalloc+0x188>)
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	4a1b      	ldr	r2, [pc, #108]	; (800eac0 <pvPortMalloc+0x188>)
 800ea54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea56:	4b1a      	ldr	r3, [pc, #104]	; (800eac0 <pvPortMalloc+0x188>)
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	4b1b      	ldr	r3, [pc, #108]	; (800eac8 <pvPortMalloc+0x190>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d203      	bcs.n	800ea6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea62:	4b17      	ldr	r3, [pc, #92]	; (800eac0 <pvPortMalloc+0x188>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a18      	ldr	r2, [pc, #96]	; (800eac8 <pvPortMalloc+0x190>)
 800ea68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	4b13      	ldr	r3, [pc, #76]	; (800eabc <pvPortMalloc+0x184>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	431a      	orrs	r2, r3
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <pvPortMalloc+0x194>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3301      	adds	r3, #1
 800ea84:	4a11      	ldr	r2, [pc, #68]	; (800eacc <pvPortMalloc+0x194>)
 800ea86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea88:	f7fe fd04 	bl	800d494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	f003 0307 	and.w	r3, r3, #7
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00a      	beq.n	800eaac <pvPortMalloc+0x174>
	__asm volatile
 800ea96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	60fb      	str	r3, [r7, #12]
}
 800eaa8:	bf00      	nop
 800eaaa:	e7fe      	b.n	800eaaa <pvPortMalloc+0x172>
	return pvReturn;
 800eaac:	69fb      	ldr	r3, [r7, #28]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3728      	adds	r7, #40	; 0x28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20004db8 	.word	0x20004db8
 800eabc:	20004dcc 	.word	0x20004dcc
 800eac0:	20004dbc 	.word	0x20004dbc
 800eac4:	20004db0 	.word	0x20004db0
 800eac8:	20004dc0 	.word	0x20004dc0
 800eacc:	20004dc4 	.word	0x20004dc4

0800ead0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d04d      	beq.n	800eb7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eae2:	2308      	movs	r3, #8
 800eae4:	425b      	negs	r3, r3
 800eae6:	697a      	ldr	r2, [r7, #20]
 800eae8:	4413      	add	r3, r2
 800eaea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	4b24      	ldr	r3, [pc, #144]	; (800eb88 <vPortFree+0xb8>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4013      	ands	r3, r2
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10a      	bne.n	800eb14 <vPortFree+0x44>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	60fb      	str	r3, [r7, #12]
}
 800eb10:	bf00      	nop
 800eb12:	e7fe      	b.n	800eb12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00a      	beq.n	800eb32 <vPortFree+0x62>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	60bb      	str	r3, [r7, #8]
}
 800eb2e:	bf00      	nop
 800eb30:	e7fe      	b.n	800eb30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	685a      	ldr	r2, [r3, #4]
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <vPortFree+0xb8>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4013      	ands	r3, r2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d01e      	beq.n	800eb7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d11a      	bne.n	800eb7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	4b0e      	ldr	r3, [pc, #56]	; (800eb88 <vPortFree+0xb8>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	43db      	mvns	r3, r3
 800eb52:	401a      	ands	r2, r3
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb58:	f7fe fc8e 	bl	800d478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <vPortFree+0xbc>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4413      	add	r3, r2
 800eb66:	4a09      	ldr	r2, [pc, #36]	; (800eb8c <vPortFree+0xbc>)
 800eb68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb6a:	6938      	ldr	r0, [r7, #16]
 800eb6c:	f000 f874 	bl	800ec58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb70:	4b07      	ldr	r3, [pc, #28]	; (800eb90 <vPortFree+0xc0>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3301      	adds	r3, #1
 800eb76:	4a06      	ldr	r2, [pc, #24]	; (800eb90 <vPortFree+0xc0>)
 800eb78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb7a:	f7fe fc8b 	bl	800d494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb7e:	bf00      	nop
 800eb80:	3718      	adds	r7, #24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20004dcc 	.word	0x20004dcc
 800eb8c:	20004dbc 	.word	0x20004dbc
 800eb90:	20004dc8 	.word	0x20004dc8

0800eb94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eba0:	4b27      	ldr	r3, [pc, #156]	; (800ec40 <prvHeapInit+0xac>)
 800eba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f003 0307 	and.w	r3, r3, #7
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00c      	beq.n	800ebc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3307      	adds	r3, #7
 800ebb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 0307 	bic.w	r3, r3, #7
 800ebba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	4a1f      	ldr	r2, [pc, #124]	; (800ec40 <prvHeapInit+0xac>)
 800ebc4:	4413      	add	r3, r2
 800ebc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebcc:	4a1d      	ldr	r2, [pc, #116]	; (800ec44 <prvHeapInit+0xb0>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebd2:	4b1c      	ldr	r3, [pc, #112]	; (800ec44 <prvHeapInit+0xb0>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	4413      	add	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebe0:	2208      	movs	r2, #8
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	1a9b      	subs	r3, r3, r2
 800ebe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f023 0307 	bic.w	r3, r3, #7
 800ebee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4a15      	ldr	r2, [pc, #84]	; (800ec48 <prvHeapInit+0xb4>)
 800ebf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <prvHeapInit+0xb4>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebfe:	4b12      	ldr	r3, [pc, #72]	; (800ec48 <prvHeapInit+0xb4>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2200      	movs	r2, #0
 800ec04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	1ad2      	subs	r2, r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec14:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <prvHeapInit+0xb4>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	4a0a      	ldr	r2, [pc, #40]	; (800ec4c <prvHeapInit+0xb8>)
 800ec22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	4a09      	ldr	r2, [pc, #36]	; (800ec50 <prvHeapInit+0xbc>)
 800ec2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec2c:	4b09      	ldr	r3, [pc, #36]	; (800ec54 <prvHeapInit+0xc0>)
 800ec2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec32:	601a      	str	r2, [r3, #0]
}
 800ec34:	bf00      	nop
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	200011b0 	.word	0x200011b0
 800ec44:	20004db0 	.word	0x20004db0
 800ec48:	20004db8 	.word	0x20004db8
 800ec4c:	20004dc0 	.word	0x20004dc0
 800ec50:	20004dbc 	.word	0x20004dbc
 800ec54:	20004dcc 	.word	0x20004dcc

0800ec58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec60:	4b28      	ldr	r3, [pc, #160]	; (800ed04 <prvInsertBlockIntoFreeList+0xac>)
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	e002      	b.n	800ec6c <prvInsertBlockIntoFreeList+0x14>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	60fb      	str	r3, [r7, #12]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d8f7      	bhi.n	800ec66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	4413      	add	r3, r2
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d108      	bne.n	800ec9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	441a      	add	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	441a      	add	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d118      	bne.n	800ece0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <prvInsertBlockIntoFreeList+0xb0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d00d      	beq.n	800ecd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	e008      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecd6:	4b0c      	ldr	r3, [pc, #48]	; (800ed08 <prvInsertBlockIntoFreeList+0xb0>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	e003      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d002      	beq.n	800ecf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecf6:	bf00      	nop
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	20004db0 	.word	0x20004db0
 800ed08:	20004db8 	.word	0x20004db8

0800ed0c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed10:	2201      	movs	r2, #1
 800ed12:	490e      	ldr	r1, [pc, #56]	; (800ed4c <MX_USB_HOST_Init+0x40>)
 800ed14:	480e      	ldr	r0, [pc, #56]	; (800ed50 <MX_USB_HOST_Init+0x44>)
 800ed16:	f7fb faf1 	bl	800a2fc <USBH_Init>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed20:	f7f2 fe5e 	bl	80019e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ed24:	490b      	ldr	r1, [pc, #44]	; (800ed54 <MX_USB_HOST_Init+0x48>)
 800ed26:	480a      	ldr	r0, [pc, #40]	; (800ed50 <MX_USB_HOST_Init+0x44>)
 800ed28:	f7fb fb98 	bl	800a45c <USBH_RegisterClass>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ed32:	f7f2 fe55 	bl	80019e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ed36:	4806      	ldr	r0, [pc, #24]	; (800ed50 <MX_USB_HOST_Init+0x44>)
 800ed38:	f7fb fc1c 	bl	800a574 <USBH_Start>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ed42:	f7f2 fe4d 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ed46:	bf00      	nop
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	0800ed59 	.word	0x0800ed59
 800ed50:	200050d0 	.word	0x200050d0
 800ed54:	2000000c 	.word	0x2000000c

0800ed58 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ed64:	78fb      	ldrb	r3, [r7, #3]
 800ed66:	3b01      	subs	r3, #1
 800ed68:	2b04      	cmp	r3, #4
 800ed6a:	d819      	bhi.n	800eda0 <USBH_UserProcess+0x48>
 800ed6c:	a201      	add	r2, pc, #4	; (adr r2, 800ed74 <USBH_UserProcess+0x1c>)
 800ed6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed72:	bf00      	nop
 800ed74:	0800eda1 	.word	0x0800eda1
 800ed78:	0800ed91 	.word	0x0800ed91
 800ed7c:	0800eda1 	.word	0x0800eda1
 800ed80:	0800ed99 	.word	0x0800ed99
 800ed84:	0800ed89 	.word	0x0800ed89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ed88:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <USBH_UserProcess+0x58>)
 800ed8a:	2203      	movs	r2, #3
 800ed8c:	701a      	strb	r2, [r3, #0]
  break;
 800ed8e:	e008      	b.n	800eda2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ed90:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <USBH_UserProcess+0x58>)
 800ed92:	2202      	movs	r2, #2
 800ed94:	701a      	strb	r2, [r3, #0]
  break;
 800ed96:	e004      	b.n	800eda2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ed98:	4b05      	ldr	r3, [pc, #20]	; (800edb0 <USBH_UserProcess+0x58>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	701a      	strb	r2, [r3, #0]
  break;
 800ed9e:	e000      	b.n	800eda2 <USBH_UserProcess+0x4a>

  default:
  break;
 800eda0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eda2:	bf00      	nop
 800eda4:	370c      	adds	r7, #12
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	20004dd0 	.word	0x20004dd0

0800edb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b08a      	sub	sp, #40	; 0x28
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edbc:	f107 0314 	add.w	r3, r7, #20
 800edc0:	2200      	movs	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	605a      	str	r2, [r3, #4]
 800edc6:	609a      	str	r2, [r3, #8]
 800edc8:	60da      	str	r2, [r3, #12]
 800edca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800edd4:	d147      	bne.n	800ee66 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edd6:	2300      	movs	r3, #0
 800edd8:	613b      	str	r3, [r7, #16]
 800edda:	4b25      	ldr	r3, [pc, #148]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800eddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edde:	4a24      	ldr	r2, [pc, #144]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ede0:	f043 0301 	orr.w	r3, r3, #1
 800ede4:	6313      	str	r3, [r2, #48]	; 0x30
 800ede6:	4b22      	ldr	r3, [pc, #136]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ede8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	613b      	str	r3, [r7, #16]
 800edf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800edf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800edf8:	2300      	movs	r3, #0
 800edfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ee00:	f107 0314 	add.w	r3, r7, #20
 800ee04:	4619      	mov	r1, r3
 800ee06:	481b      	ldr	r0, [pc, #108]	; (800ee74 <HAL_HCD_MspInit+0xc0>)
 800ee08:	f7f3 ff88 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ee0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ee10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee12:	2302      	movs	r3, #2
 800ee14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee1e:	230a      	movs	r3, #10
 800ee20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee22:	f107 0314 	add.w	r3, r7, #20
 800ee26:	4619      	mov	r1, r3
 800ee28:	4812      	ldr	r0, [pc, #72]	; (800ee74 <HAL_HCD_MspInit+0xc0>)
 800ee2a:	f7f3 ff77 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee2e:	4b10      	ldr	r3, [pc, #64]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ee30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee32:	4a0f      	ldr	r2, [pc, #60]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ee34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee38:	6353      	str	r3, [r2, #52]	; 0x34
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ee40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee42:	4a0b      	ldr	r2, [pc, #44]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ee44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee48:	6453      	str	r3, [r2, #68]	; 0x44
 800ee4a:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <HAL_HCD_MspInit+0xbc>)
 800ee4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ee56:	2200      	movs	r2, #0
 800ee58:	2105      	movs	r1, #5
 800ee5a:	2043      	movs	r0, #67	; 0x43
 800ee5c:	f7f3 fea2 	bl	8002ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee60:	2043      	movs	r0, #67	; 0x43
 800ee62:	f7f3 febb 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee66:	bf00      	nop
 800ee68:	3728      	adds	r7, #40	; 0x28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	40023800 	.word	0x40023800
 800ee74:	40020000 	.word	0x40020000

0800ee78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fc f821 	bl	800aece <USBH_LL_IncTimer>
}
 800ee8c:	bf00      	nop
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fc f865 	bl	800af72 <USBH_LL_Connect>
}
 800eea8:	bf00      	nop
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fc f87a 	bl	800afb8 <USBH_LL_Disconnect>
}
 800eec4:	bf00      	nop
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
 800eed8:	4613      	mov	r3, r2
 800eeda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fc f8b1 	bl	800b04a <USBH_LL_NotifyURBChange>
#endif
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fc f80f 	bl	800af22 <USBH_LL_PortEnabled>
}
 800ef04:	bf00      	nop
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fc f81b 	bl	800af56 <USBH_LL_PortDisabled>
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d12a      	bne.n	800ef90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ef3a:	4a18      	ldr	r2, [pc, #96]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a15      	ldr	r2, [pc, #84]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef46:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ef52:	4b12      	ldr	r3, [pc, #72]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef54:	2208      	movs	r2, #8
 800ef56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ef58:	4b10      	ldr	r3, [pc, #64]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef5e:	4b0f      	ldr	r3, [pc, #60]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ef64:	4b0d      	ldr	r3, [pc, #52]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef66:	2202      	movs	r2, #2
 800ef68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef6a:	4b0c      	ldr	r3, [pc, #48]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ef70:	480a      	ldr	r0, [pc, #40]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef72:	f7f4 f888 	bl	8003086 <HAL_HCD_Init>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ef7c:	f7f2 fd30 	bl	80019e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ef80:	4806      	ldr	r0, [pc, #24]	; (800ef9c <USBH_LL_Init+0x74>)
 800ef82:	f7f4 fc65 	bl	8003850 <HAL_HCD_GetCurrentFrame>
 800ef86:	4603      	mov	r3, r0
 800ef88:	4619      	mov	r1, r3
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7fb ff90 	bl	800aeb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	200054b4 	.word	0x200054b4

0800efa0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7f4 fbd4 	bl	8003764 <HAL_HCD_Start>
 800efbc:	4603      	mov	r3, r0
 800efbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800efc0:	7bfb      	ldrb	r3, [r7, #15]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f000 f95c 	bl	800f280 <USBH_Get_USB_Status>
 800efc8:	4603      	mov	r3, r0
 800efca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b084      	sub	sp, #16
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efde:	2300      	movs	r3, #0
 800efe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efec:	4618      	mov	r0, r3
 800efee:	f7f4 fbdc 	bl	80037aa <HAL_HCD_Stop>
 800eff2:	4603      	mov	r3, r0
 800eff4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eff6:	7bfb      	ldrb	r3, [r7, #15]
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 f941 	bl	800f280 <USBH_Get_USB_Status>
 800effe:	4603      	mov	r3, r0
 800f000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f002:	7bbb      	ldrb	r3, [r7, #14]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f014:	2301      	movs	r3, #1
 800f016:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f01e:	4618      	mov	r0, r3
 800f020:	f7f4 fc24 	bl	800386c <HAL_HCD_GetCurrentSpeed>
 800f024:	4603      	mov	r3, r0
 800f026:	2b02      	cmp	r3, #2
 800f028:	d00c      	beq.n	800f044 <USBH_LL_GetSpeed+0x38>
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d80d      	bhi.n	800f04a <USBH_LL_GetSpeed+0x3e>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d002      	beq.n	800f038 <USBH_LL_GetSpeed+0x2c>
 800f032:	2b01      	cmp	r3, #1
 800f034:	d003      	beq.n	800f03e <USBH_LL_GetSpeed+0x32>
 800f036:	e008      	b.n	800f04a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f038:	2300      	movs	r3, #0
 800f03a:	73fb      	strb	r3, [r7, #15]
    break;
 800f03c:	e008      	b.n	800f050 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f03e:	2301      	movs	r3, #1
 800f040:	73fb      	strb	r3, [r7, #15]
    break;
 800f042:	e005      	b.n	800f050 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f044:	2302      	movs	r3, #2
 800f046:	73fb      	strb	r3, [r7, #15]
    break;
 800f048:	e002      	b.n	800f050 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f04a:	2301      	movs	r3, #1
 800f04c:	73fb      	strb	r3, [r7, #15]
    break;
 800f04e:	bf00      	nop
  }
  return  speed;
 800f050:	7bfb      	ldrb	r3, [r7, #15]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f070:	4618      	mov	r0, r3
 800f072:	f7f4 fbb7 	bl	80037e4 <HAL_HCD_ResetPort>
 800f076:	4603      	mov	r3, r0
 800f078:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f000 f8ff 	bl	800f280 <USBH_Get_USB_Status>
 800f082:	4603      	mov	r3, r0
 800f084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f086:	7bbb      	ldrb	r3, [r7, #14]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	460b      	mov	r3, r1
 800f09a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0a2:	78fa      	ldrb	r2, [r7, #3]
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7f4 fbbe 	bl	8003828 <HAL_HCD_HC_GetXferCount>
 800f0ac:	4603      	mov	r3, r0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f0b6:	b590      	push	{r4, r7, lr}
 800f0b8:	b089      	sub	sp, #36	; 0x24
 800f0ba:	af04      	add	r7, sp, #16
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	4608      	mov	r0, r1
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	70fb      	strb	r3, [r7, #3]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	70bb      	strb	r3, [r7, #2]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f0de:	787c      	ldrb	r4, [r7, #1]
 800f0e0:	78ba      	ldrb	r2, [r7, #2]
 800f0e2:	78f9      	ldrb	r1, [r7, #3]
 800f0e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f0e6:	9302      	str	r3, [sp, #8]
 800f0e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f0ec:	9301      	str	r3, [sp, #4]
 800f0ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	f7f4 f828 	bl	800314a <HAL_HCD_HC_Init>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
 800f100:	4618      	mov	r0, r3
 800f102:	f000 f8bd 	bl	800f280 <USBH_Get_USB_Status>
 800f106:	4603      	mov	r3, r0
 800f108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	bd90      	pop	{r4, r7, pc}

0800f114 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f12e:	78fa      	ldrb	r2, [r7, #3]
 800f130:	4611      	mov	r1, r2
 800f132:	4618      	mov	r0, r3
 800f134:	f7f4 f898 	bl	8003268 <HAL_HCD_HC_Halt>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f89e 	bl	800f280 <USBH_Get_USB_Status>
 800f144:	4603      	mov	r3, r0
 800f146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f148:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f152:	b590      	push	{r4, r7, lr}
 800f154:	b089      	sub	sp, #36	; 0x24
 800f156:	af04      	add	r7, sp, #16
 800f158:	6078      	str	r0, [r7, #4]
 800f15a:	4608      	mov	r0, r1
 800f15c:	4611      	mov	r1, r2
 800f15e:	461a      	mov	r2, r3
 800f160:	4603      	mov	r3, r0
 800f162:	70fb      	strb	r3, [r7, #3]
 800f164:	460b      	mov	r3, r1
 800f166:	70bb      	strb	r3, [r7, #2]
 800f168:	4613      	mov	r3, r2
 800f16a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f16c:	2300      	movs	r3, #0
 800f16e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f17a:	787c      	ldrb	r4, [r7, #1]
 800f17c:	78ba      	ldrb	r2, [r7, #2]
 800f17e:	78f9      	ldrb	r1, [r7, #3]
 800f180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f184:	9303      	str	r3, [sp, #12]
 800f186:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f188:	9302      	str	r3, [sp, #8]
 800f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18c:	9301      	str	r3, [sp, #4]
 800f18e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	4623      	mov	r3, r4
 800f196:	f7f4 f88b 	bl	80032b0 <HAL_HCD_HC_SubmitRequest>
 800f19a:	4603      	mov	r3, r0
 800f19c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 f86d 	bl	800f280 <USBH_Get_USB_Status>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd90      	pop	{r4, r7, pc}

0800f1b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1c6:	78fa      	ldrb	r2, [r7, #3]
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7f4 fb18 	bl	8003800 <HAL_HCD_HC_GetURBState>
 800f1d0:	4603      	mov	r3, r0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d103      	bne.n	800f1f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f1f0:	78fb      	ldrb	r3, [r7, #3]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f870 	bl	800f2d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f1f8:	20c8      	movs	r0, #200	; 0xc8
 800f1fa:	f7f3 fbf7 	bl	80029ec <HAL_Delay>
  return USBH_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
 800f214:	4613      	mov	r3, r2
 800f216:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f21e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	212c      	movs	r1, #44	; 0x2c
 800f226:	fb01 f303 	mul.w	r3, r1, r3
 800f22a:	4413      	add	r3, r2
 800f22c:	333b      	adds	r3, #59	; 0x3b
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d009      	beq.n	800f248 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f234:	78fb      	ldrb	r3, [r7, #3]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	212c      	movs	r1, #44	; 0x2c
 800f23a:	fb01 f303 	mul.w	r3, r1, r3
 800f23e:	4413      	add	r3, r2
 800f240:	3354      	adds	r3, #84	; 0x54
 800f242:	78ba      	ldrb	r2, [r7, #2]
 800f244:	701a      	strb	r2, [r3, #0]
 800f246:	e008      	b.n	800f25a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	212c      	movs	r1, #44	; 0x2c
 800f24e:	fb01 f303 	mul.w	r3, r1, r3
 800f252:	4413      	add	r3, r2
 800f254:	3355      	adds	r3, #85	; 0x55
 800f256:	78ba      	ldrb	r2, [r7, #2]
 800f258:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7f3 fbbb 	bl	80029ec <HAL_Delay>
}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
	...

0800f280 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	4603      	mov	r3, r0
 800f288:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	2b03      	cmp	r3, #3
 800f292:	d817      	bhi.n	800f2c4 <USBH_Get_USB_Status+0x44>
 800f294:	a201      	add	r2, pc, #4	; (adr r2, 800f29c <USBH_Get_USB_Status+0x1c>)
 800f296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29a:	bf00      	nop
 800f29c:	0800f2ad 	.word	0x0800f2ad
 800f2a0:	0800f2b3 	.word	0x0800f2b3
 800f2a4:	0800f2b9 	.word	0x0800f2b9
 800f2a8:	0800f2bf 	.word	0x0800f2bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b0:	e00b      	b.n	800f2ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b6:	e008      	b.n	800f2ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f2bc:	e005      	b.n	800f2ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f2be:	2302      	movs	r3, #2
 800f2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c2:	e002      	b.n	800f2ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c8:	bf00      	nop
  }
  return usb_status;
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d102      	bne.n	800f2f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	73fb      	strb	r3, [r7, #15]
 800f2f0:	e001      	b.n	800f2f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f2f6:	7bfb      	ldrb	r3, [r7, #15]
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	4803      	ldr	r0, [pc, #12]	; (800f30c <MX_DriverVbusFS+0x34>)
 800f2fe:	f7f3 fea9 	bl	8003054 <HAL_GPIO_WritePin>
}
 800f302:	bf00      	nop
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	40020800 	.word	0x40020800

0800f310 <__errno>:
 800f310:	4b01      	ldr	r3, [pc, #4]	; (800f318 <__errno+0x8>)
 800f312:	6818      	ldr	r0, [r3, #0]
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	20000030 	.word	0x20000030

0800f31c <__libc_init_array>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	4d0d      	ldr	r5, [pc, #52]	; (800f354 <__libc_init_array+0x38>)
 800f320:	4c0d      	ldr	r4, [pc, #52]	; (800f358 <__libc_init_array+0x3c>)
 800f322:	1b64      	subs	r4, r4, r5
 800f324:	10a4      	asrs	r4, r4, #2
 800f326:	2600      	movs	r6, #0
 800f328:	42a6      	cmp	r6, r4
 800f32a:	d109      	bne.n	800f340 <__libc_init_array+0x24>
 800f32c:	4d0b      	ldr	r5, [pc, #44]	; (800f35c <__libc_init_array+0x40>)
 800f32e:	4c0c      	ldr	r4, [pc, #48]	; (800f360 <__libc_init_array+0x44>)
 800f330:	f000 f986 	bl	800f640 <_init>
 800f334:	1b64      	subs	r4, r4, r5
 800f336:	10a4      	asrs	r4, r4, #2
 800f338:	2600      	movs	r6, #0
 800f33a:	42a6      	cmp	r6, r4
 800f33c:	d105      	bne.n	800f34a <__libc_init_array+0x2e>
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	f855 3b04 	ldr.w	r3, [r5], #4
 800f344:	4798      	blx	r3
 800f346:	3601      	adds	r6, #1
 800f348:	e7ee      	b.n	800f328 <__libc_init_array+0xc>
 800f34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f34e:	4798      	blx	r3
 800f350:	3601      	adds	r6, #1
 800f352:	e7f2      	b.n	800f33a <__libc_init_array+0x1e>
 800f354:	08010f30 	.word	0x08010f30
 800f358:	08010f30 	.word	0x08010f30
 800f35c:	08010f30 	.word	0x08010f30
 800f360:	08010f34 	.word	0x08010f34

0800f364 <malloc>:
 800f364:	4b02      	ldr	r3, [pc, #8]	; (800f370 <malloc+0xc>)
 800f366:	4601      	mov	r1, r0
 800f368:	6818      	ldr	r0, [r3, #0]
 800f36a:	f000 b871 	b.w	800f450 <_malloc_r>
 800f36e:	bf00      	nop
 800f370:	20000030 	.word	0x20000030

0800f374 <free>:
 800f374:	4b02      	ldr	r3, [pc, #8]	; (800f380 <free+0xc>)
 800f376:	4601      	mov	r1, r0
 800f378:	6818      	ldr	r0, [r3, #0]
 800f37a:	f000 b819 	b.w	800f3b0 <_free_r>
 800f37e:	bf00      	nop
 800f380:	20000030 	.word	0x20000030

0800f384 <memcpy>:
 800f384:	440a      	add	r2, r1
 800f386:	4291      	cmp	r1, r2
 800f388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f38c:	d100      	bne.n	800f390 <memcpy+0xc>
 800f38e:	4770      	bx	lr
 800f390:	b510      	push	{r4, lr}
 800f392:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f39a:	4291      	cmp	r1, r2
 800f39c:	d1f9      	bne.n	800f392 <memcpy+0xe>
 800f39e:	bd10      	pop	{r4, pc}

0800f3a0 <memset>:
 800f3a0:	4402      	add	r2, r0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d100      	bne.n	800f3aa <memset+0xa>
 800f3a8:	4770      	bx	lr
 800f3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ae:	e7f9      	b.n	800f3a4 <memset+0x4>

0800f3b0 <_free_r>:
 800f3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3b2:	2900      	cmp	r1, #0
 800f3b4:	d048      	beq.n	800f448 <_free_r+0x98>
 800f3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3ba:	9001      	str	r0, [sp, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f1a1 0404 	sub.w	r4, r1, #4
 800f3c2:	bfb8      	it	lt
 800f3c4:	18e4      	addlt	r4, r4, r3
 800f3c6:	f000 f8ad 	bl	800f524 <__malloc_lock>
 800f3ca:	4a20      	ldr	r2, [pc, #128]	; (800f44c <_free_r+0x9c>)
 800f3cc:	9801      	ldr	r0, [sp, #4]
 800f3ce:	6813      	ldr	r3, [r2, #0]
 800f3d0:	4615      	mov	r5, r2
 800f3d2:	b933      	cbnz	r3, 800f3e2 <_free_r+0x32>
 800f3d4:	6063      	str	r3, [r4, #4]
 800f3d6:	6014      	str	r4, [r2, #0]
 800f3d8:	b003      	add	sp, #12
 800f3da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3de:	f000 b8a7 	b.w	800f530 <__malloc_unlock>
 800f3e2:	42a3      	cmp	r3, r4
 800f3e4:	d90b      	bls.n	800f3fe <_free_r+0x4e>
 800f3e6:	6821      	ldr	r1, [r4, #0]
 800f3e8:	1862      	adds	r2, r4, r1
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	bf04      	itt	eq
 800f3ee:	681a      	ldreq	r2, [r3, #0]
 800f3f0:	685b      	ldreq	r3, [r3, #4]
 800f3f2:	6063      	str	r3, [r4, #4]
 800f3f4:	bf04      	itt	eq
 800f3f6:	1852      	addeq	r2, r2, r1
 800f3f8:	6022      	streq	r2, [r4, #0]
 800f3fa:	602c      	str	r4, [r5, #0]
 800f3fc:	e7ec      	b.n	800f3d8 <_free_r+0x28>
 800f3fe:	461a      	mov	r2, r3
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	b10b      	cbz	r3, 800f408 <_free_r+0x58>
 800f404:	42a3      	cmp	r3, r4
 800f406:	d9fa      	bls.n	800f3fe <_free_r+0x4e>
 800f408:	6811      	ldr	r1, [r2, #0]
 800f40a:	1855      	adds	r5, r2, r1
 800f40c:	42a5      	cmp	r5, r4
 800f40e:	d10b      	bne.n	800f428 <_free_r+0x78>
 800f410:	6824      	ldr	r4, [r4, #0]
 800f412:	4421      	add	r1, r4
 800f414:	1854      	adds	r4, r2, r1
 800f416:	42a3      	cmp	r3, r4
 800f418:	6011      	str	r1, [r2, #0]
 800f41a:	d1dd      	bne.n	800f3d8 <_free_r+0x28>
 800f41c:	681c      	ldr	r4, [r3, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	6053      	str	r3, [r2, #4]
 800f422:	4421      	add	r1, r4
 800f424:	6011      	str	r1, [r2, #0]
 800f426:	e7d7      	b.n	800f3d8 <_free_r+0x28>
 800f428:	d902      	bls.n	800f430 <_free_r+0x80>
 800f42a:	230c      	movs	r3, #12
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	e7d3      	b.n	800f3d8 <_free_r+0x28>
 800f430:	6825      	ldr	r5, [r4, #0]
 800f432:	1961      	adds	r1, r4, r5
 800f434:	428b      	cmp	r3, r1
 800f436:	bf04      	itt	eq
 800f438:	6819      	ldreq	r1, [r3, #0]
 800f43a:	685b      	ldreq	r3, [r3, #4]
 800f43c:	6063      	str	r3, [r4, #4]
 800f43e:	bf04      	itt	eq
 800f440:	1949      	addeq	r1, r1, r5
 800f442:	6021      	streq	r1, [r4, #0]
 800f444:	6054      	str	r4, [r2, #4]
 800f446:	e7c7      	b.n	800f3d8 <_free_r+0x28>
 800f448:	b003      	add	sp, #12
 800f44a:	bd30      	pop	{r4, r5, pc}
 800f44c:	20004dd4 	.word	0x20004dd4

0800f450 <_malloc_r>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	1ccd      	adds	r5, r1, #3
 800f454:	f025 0503 	bic.w	r5, r5, #3
 800f458:	3508      	adds	r5, #8
 800f45a:	2d0c      	cmp	r5, #12
 800f45c:	bf38      	it	cc
 800f45e:	250c      	movcc	r5, #12
 800f460:	2d00      	cmp	r5, #0
 800f462:	4606      	mov	r6, r0
 800f464:	db01      	blt.n	800f46a <_malloc_r+0x1a>
 800f466:	42a9      	cmp	r1, r5
 800f468:	d903      	bls.n	800f472 <_malloc_r+0x22>
 800f46a:	230c      	movs	r3, #12
 800f46c:	6033      	str	r3, [r6, #0]
 800f46e:	2000      	movs	r0, #0
 800f470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f472:	f000 f857 	bl	800f524 <__malloc_lock>
 800f476:	4921      	ldr	r1, [pc, #132]	; (800f4fc <_malloc_r+0xac>)
 800f478:	680a      	ldr	r2, [r1, #0]
 800f47a:	4614      	mov	r4, r2
 800f47c:	b99c      	cbnz	r4, 800f4a6 <_malloc_r+0x56>
 800f47e:	4f20      	ldr	r7, [pc, #128]	; (800f500 <_malloc_r+0xb0>)
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	b923      	cbnz	r3, 800f48e <_malloc_r+0x3e>
 800f484:	4621      	mov	r1, r4
 800f486:	4630      	mov	r0, r6
 800f488:	f000 f83c 	bl	800f504 <_sbrk_r>
 800f48c:	6038      	str	r0, [r7, #0]
 800f48e:	4629      	mov	r1, r5
 800f490:	4630      	mov	r0, r6
 800f492:	f000 f837 	bl	800f504 <_sbrk_r>
 800f496:	1c43      	adds	r3, r0, #1
 800f498:	d123      	bne.n	800f4e2 <_malloc_r+0x92>
 800f49a:	230c      	movs	r3, #12
 800f49c:	6033      	str	r3, [r6, #0]
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f000 f846 	bl	800f530 <__malloc_unlock>
 800f4a4:	e7e3      	b.n	800f46e <_malloc_r+0x1e>
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	1b5b      	subs	r3, r3, r5
 800f4aa:	d417      	bmi.n	800f4dc <_malloc_r+0x8c>
 800f4ac:	2b0b      	cmp	r3, #11
 800f4ae:	d903      	bls.n	800f4b8 <_malloc_r+0x68>
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	441c      	add	r4, r3
 800f4b4:	6025      	str	r5, [r4, #0]
 800f4b6:	e004      	b.n	800f4c2 <_malloc_r+0x72>
 800f4b8:	6863      	ldr	r3, [r4, #4]
 800f4ba:	42a2      	cmp	r2, r4
 800f4bc:	bf0c      	ite	eq
 800f4be:	600b      	streq	r3, [r1, #0]
 800f4c0:	6053      	strne	r3, [r2, #4]
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f000 f834 	bl	800f530 <__malloc_unlock>
 800f4c8:	f104 000b 	add.w	r0, r4, #11
 800f4cc:	1d23      	adds	r3, r4, #4
 800f4ce:	f020 0007 	bic.w	r0, r0, #7
 800f4d2:	1ac2      	subs	r2, r0, r3
 800f4d4:	d0cc      	beq.n	800f470 <_malloc_r+0x20>
 800f4d6:	1a1b      	subs	r3, r3, r0
 800f4d8:	50a3      	str	r3, [r4, r2]
 800f4da:	e7c9      	b.n	800f470 <_malloc_r+0x20>
 800f4dc:	4622      	mov	r2, r4
 800f4de:	6864      	ldr	r4, [r4, #4]
 800f4e0:	e7cc      	b.n	800f47c <_malloc_r+0x2c>
 800f4e2:	1cc4      	adds	r4, r0, #3
 800f4e4:	f024 0403 	bic.w	r4, r4, #3
 800f4e8:	42a0      	cmp	r0, r4
 800f4ea:	d0e3      	beq.n	800f4b4 <_malloc_r+0x64>
 800f4ec:	1a21      	subs	r1, r4, r0
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f000 f808 	bl	800f504 <_sbrk_r>
 800f4f4:	3001      	adds	r0, #1
 800f4f6:	d1dd      	bne.n	800f4b4 <_malloc_r+0x64>
 800f4f8:	e7cf      	b.n	800f49a <_malloc_r+0x4a>
 800f4fa:	bf00      	nop
 800f4fc:	20004dd4 	.word	0x20004dd4
 800f500:	20004dd8 	.word	0x20004dd8

0800f504 <_sbrk_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d06      	ldr	r5, [pc, #24]	; (800f520 <_sbrk_r+0x1c>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	602b      	str	r3, [r5, #0]
 800f510:	f7f3 f9b8 	bl	8002884 <_sbrk>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_sbrk_r+0x1a>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_sbrk_r+0x1a>
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	200057b8 	.word	0x200057b8

0800f524 <__malloc_lock>:
 800f524:	4801      	ldr	r0, [pc, #4]	; (800f52c <__malloc_lock+0x8>)
 800f526:	f000 b809 	b.w	800f53c <__retarget_lock_acquire_recursive>
 800f52a:	bf00      	nop
 800f52c:	200057c0 	.word	0x200057c0

0800f530 <__malloc_unlock>:
 800f530:	4801      	ldr	r0, [pc, #4]	; (800f538 <__malloc_unlock+0x8>)
 800f532:	f000 b804 	b.w	800f53e <__retarget_lock_release_recursive>
 800f536:	bf00      	nop
 800f538:	200057c0 	.word	0x200057c0

0800f53c <__retarget_lock_acquire_recursive>:
 800f53c:	4770      	bx	lr

0800f53e <__retarget_lock_release_recursive>:
 800f53e:	4770      	bx	lr

0800f540 <floor>:
 800f540:	ec51 0b10 	vmov	r0, r1, d0
 800f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f54c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f550:	2e13      	cmp	r6, #19
 800f552:	ee10 5a10 	vmov	r5, s0
 800f556:	ee10 8a10 	vmov	r8, s0
 800f55a:	460c      	mov	r4, r1
 800f55c:	dc32      	bgt.n	800f5c4 <floor+0x84>
 800f55e:	2e00      	cmp	r6, #0
 800f560:	da14      	bge.n	800f58c <floor+0x4c>
 800f562:	a333      	add	r3, pc, #204	; (adr r3, 800f630 <floor+0xf0>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	f7f0 fe40 	bl	80001ec <__adddf3>
 800f56c:	2200      	movs	r2, #0
 800f56e:	2300      	movs	r3, #0
 800f570:	f7f1 fa82 	bl	8000a78 <__aeabi_dcmpgt>
 800f574:	b138      	cbz	r0, 800f586 <floor+0x46>
 800f576:	2c00      	cmp	r4, #0
 800f578:	da57      	bge.n	800f62a <floor+0xea>
 800f57a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f57e:	431d      	orrs	r5, r3
 800f580:	d001      	beq.n	800f586 <floor+0x46>
 800f582:	4c2d      	ldr	r4, [pc, #180]	; (800f638 <floor+0xf8>)
 800f584:	2500      	movs	r5, #0
 800f586:	4621      	mov	r1, r4
 800f588:	4628      	mov	r0, r5
 800f58a:	e025      	b.n	800f5d8 <floor+0x98>
 800f58c:	4f2b      	ldr	r7, [pc, #172]	; (800f63c <floor+0xfc>)
 800f58e:	4137      	asrs	r7, r6
 800f590:	ea01 0307 	and.w	r3, r1, r7
 800f594:	4303      	orrs	r3, r0
 800f596:	d01f      	beq.n	800f5d8 <floor+0x98>
 800f598:	a325      	add	r3, pc, #148	; (adr r3, 800f630 <floor+0xf0>)
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	f7f0 fe25 	bl	80001ec <__adddf3>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f7f1 fa67 	bl	8000a78 <__aeabi_dcmpgt>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d0eb      	beq.n	800f586 <floor+0x46>
 800f5ae:	2c00      	cmp	r4, #0
 800f5b0:	bfbe      	ittt	lt
 800f5b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f5b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f5ba:	19a4      	addlt	r4, r4, r6
 800f5bc:	ea24 0407 	bic.w	r4, r4, r7
 800f5c0:	2500      	movs	r5, #0
 800f5c2:	e7e0      	b.n	800f586 <floor+0x46>
 800f5c4:	2e33      	cmp	r6, #51	; 0x33
 800f5c6:	dd0b      	ble.n	800f5e0 <floor+0xa0>
 800f5c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f5cc:	d104      	bne.n	800f5d8 <floor+0x98>
 800f5ce:	ee10 2a10 	vmov	r2, s0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	f7f0 fe0a 	bl	80001ec <__adddf3>
 800f5d8:	ec41 0b10 	vmov	d0, r0, r1
 800f5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5e8:	fa23 f707 	lsr.w	r7, r3, r7
 800f5ec:	4207      	tst	r7, r0
 800f5ee:	d0f3      	beq.n	800f5d8 <floor+0x98>
 800f5f0:	a30f      	add	r3, pc, #60	; (adr r3, 800f630 <floor+0xf0>)
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	f7f0 fdf9 	bl	80001ec <__adddf3>
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f7f1 fa3b 	bl	8000a78 <__aeabi_dcmpgt>
 800f602:	2800      	cmp	r0, #0
 800f604:	d0bf      	beq.n	800f586 <floor+0x46>
 800f606:	2c00      	cmp	r4, #0
 800f608:	da02      	bge.n	800f610 <floor+0xd0>
 800f60a:	2e14      	cmp	r6, #20
 800f60c:	d103      	bne.n	800f616 <floor+0xd6>
 800f60e:	3401      	adds	r4, #1
 800f610:	ea25 0507 	bic.w	r5, r5, r7
 800f614:	e7b7      	b.n	800f586 <floor+0x46>
 800f616:	2301      	movs	r3, #1
 800f618:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f61c:	fa03 f606 	lsl.w	r6, r3, r6
 800f620:	4435      	add	r5, r6
 800f622:	4545      	cmp	r5, r8
 800f624:	bf38      	it	cc
 800f626:	18e4      	addcc	r4, r4, r3
 800f628:	e7f2      	b.n	800f610 <floor+0xd0>
 800f62a:	2500      	movs	r5, #0
 800f62c:	462c      	mov	r4, r5
 800f62e:	e7aa      	b.n	800f586 <floor+0x46>
 800f630:	8800759c 	.word	0x8800759c
 800f634:	7e37e43c 	.word	0x7e37e43c
 800f638:	bff00000 	.word	0xbff00000
 800f63c:	000fffff 	.word	0x000fffff

0800f640 <_init>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	bf00      	nop
 800f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f646:	bc08      	pop	{r3}
 800f648:	469e      	mov	lr, r3
 800f64a:	4770      	bx	lr

0800f64c <_fini>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	bf00      	nop
 800f650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f652:	bc08      	pop	{r3}
 800f654:	469e      	mov	lr, r3
 800f656:	4770      	bx	lr
